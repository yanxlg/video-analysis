!function(e, t) {
    'object' == typeof exports && 'object' == typeof module
        ? module.exports = t()
        : 'function' == typeof define && define.amd
        ? define([], t)
        : 'object' == typeof exports
            ? exports.WSWebRTC = t()
            : e.WSWebRTC = t();
}(this, function() {
    return function(e) {
        function t(r) {
            if (i[r]) return i[r].exports;
            var s = i[r] = {i: r, l: !1, exports: {}};
            return e[r].call(s.exports, s, s.exports, t), s.l = !0, s.exports;
        }
        
        var i = {};
        return t.m = e, t.c = i, t.i = function(e) {return e;}, t.d = function(
            e, i, r) {
            t.o(e, i) || Object.defineProperty(e, i,
                {configurable: !1, enumerable: !0, get: r});
        }, t.n = function(e) {
            var i = e && e.__esModule
                ? function() {return e.default;}
                : function() {return e;};
            return t.d(i, 'a', i), i;
        }, t.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, t.p = '<%=baseUrl%>/', t(t.s = 90);
    }([
        function(e, t, i) {
            'use strict';
            t.XHR = {
                MIX: 'mix',
                JOIN: 'join',
                QUIT: 'quit',
                CREATE: 'create',
                MODIFY: 'modify',
                STATUS: 'status',
                DESTROY: 'destroy',
                METHOD: 'method',
                HEADERS: 'headers',
                SUCCESS: 'success',
                RESPONSE: 'responseText',
                WITHCREDENTIALS: 'withCredentials',
            }, t.RSP = {
                ERROR: -1,
                SUCCESS: 0,
                OK: 'ok',
                TYPE: 'type',
                DATA: 'data',
                CODE: 'code',
                SEQ: 'msgSeq',
                PARAM: 'param',
                COMMAND: 'command',
                MESSAGE: 'message',
                TO: 'to',
                FROM: 'from',
                CONTENT: 'content',
                USERID: 'userId',
                ROOMID: 'roomId',
                VROOMID: 'vRoomId',
                MSG: 'msg',
                USERS: 'users',
                TOKEN: 'token',
                TICKET: 'ticket',
                STATUS: 'status',
                RESULT: 'result',
                IP_LIST: 'ipList',
                HOST_NAME: 'hostName',
            }, t.HTTP = {
                AUTH: 'auth',
                TIME: 'time',
                TICKET: 'ticket',
                PING: 'ping',
                PONG: 'pong',
                DISPATCH: 'dispatch',
                FULL_LIST: 'fullList',
                QUIT_ROOM: 'quitRm',
                JOIN_ROOM: 'userInRm',
                CREATE_ROOM: 'createRm',
                DESTROY_ROOM: 'destroyRm',
                FULL_VLIST: 'fullVList',
                QUIT_VROOM: 'quitVRm',
                JOIN_VROOM: 'userInVRm',
                CREATE_VROOM: 'createVRm',
                DESTROY_VROOM: 'destroyVRm',
                IN_WHICH_VROOM: 'inWhichVRm',
                MSG_ANSWER: 'msgAnswer',
                SIGNAL_DISPATCH: 'signalingDispatch',
                CASCADE_DISPATCH: 'cascadedDispatch',
                URL_AU: 'au',
                URL_CASCADE_DISPATCH: 'cascadedDispatch',
                URL_SIGNAL_DISPATCH: 'signalingDispatch',
                RESPONSE_KEY_HOST_NAME: 'hostName',
                RESPONSE_KEY_SYSTEM_TIME: 'systemTime',
                RESPONSE_KEY_RESPONSE_TEXT: 'responseText',
            }, t.LOG = {
                MIX: 'Mix',
                WSS: 'Wss',
                SKIN: 'Skin',
                AUTH: 'Auth',
                PLAY: 'Play',
                PUSH: 'Push',
                PULL: 'Pull',
                ROOM: 'Room',
                SCREEN: 'Screen',
                SIGNAL: 'Signal',
                PREVIEW: 'Preview',
                DISPATCH: 'Dispatch',
            }, t.SUFFIX = {DIV_SUFFIX: '_div_id', VID_SUFFIX: '_video_id'};
        }, function(e, t, i) {
            'use strict';
            Object.defineProperty(t, '__esModule', {value: !0});
            var r = {
                ERROR: 1,
                WARN: 2,
                LOG: 3,
                DEBUG: 4,
                logLevel: 3,
                logPanel: void 0,
                logCallback: void 0,
                setLogLevel: function(e) {
                    var t = parseInt(e);
                    this.logLevel = t > 0 && t < 5 ? t : this.LOG;
                },
                setLogPanel: function(e) {
                    var t = window.document.getElementById(e);
                    this.logPanel = t || void 0;
                },
                setLogCallback: function(e) {this.logCallback = e;},
                error: function(e, t) {
                    if (!(this.logLevel < this.ERROR)) {
                        var i = t || '', r = '【' + i + '】' + e;
                        this.logPanel
                            ? this.logPanel.value += r + '\n'
                            : (console && console.error &&
                            console.error(r), this.logCallback &&
                            this.logCallback(r));
                    }
                },
                warn: function(e, t) {
                    if (!(this.logLevel < this.WARN)) {
                        var i = t || '', r = '【' + i + '】' + e;
                        this.logPanel
                            ? this.logPanel.value += r + '\n'
                            : (console && console.warn &&
                            console.warn(r), this.logCallback &&
                            this.logCallback(r));
                    }
                },
                log: function(e, t) {
                    if (!(this.logLevel < this.LOG)) {
                        var i = t || '', r = '【' + i + '】' + e;
                        this.logPanel
                            ? this.logPanel.value += r + '\n'
                            : (console && console.log &&
                            console.log(r), this.logCallback && this.logCallback(r));
                    }
                },
                debug: function(e, t) {
                    if (!(this.logLevel < this.DEBUG)) {
                        var i = t || '', r = '【' + i + '】' + e;
                        this.logPanel
                            ? this.logPanel.value += r + '\n'
                            : (console && console.debug &&
                            console.debug(r), this.logCallback &&
                            this.logCallback(r));
                    }
                },
            };
            t.default = r;
        }, function(e, t, i) {
            'use strict';
            t.Globals = {
                host: '',
                appId: '',
                appKey: '',
                userId: '',
                userRole: 1,
                observer: void 0,
                rtcHosts: [],
                signalHosts: [],
                pushMixUrl: '',
                pushMixStreamName: '',
                pullMixUrl: '',
                pullMixStreamName: '',
                token: '',
                ticket: '',
                isPermission: !1,
                permissionIndex: 1,
                tickScene: 'ticket1',
                impScene: 'rtcRoom1',
                vimpScene: 'rtcVRoom1',
                ssTestHost: '',
                rtcTestHost: '',
                dispatchTestSSHost: '',
                dispatchTestRTCHost: '',
                dispatchTestSignalHost: '',
                deviceId: '',
                version: 'v2.2.1',
                sdkType: 'MIC_LINK',
                traceId: 'web123456789trace123456789id' +
                Math.random().toFixed(8).substring(2),
            }, t.HOST = {
                RTC_VER: 2,
                RTC_PORT: 10443,
                RTC_TRAN_PORT: 10080,
                RTC_HEADER_TOKEN: 'X-RTC-Token',
                RTC_HEADER_TICKET: 'X-RTC-Ticket',
                RTC_HEADER_APP_ID: 'X-RTC-App-ID',
                RTC_HEADER_USER_ID: 'X-RTC-User-ID',
                RTC_HEADER_TRACE_ID: 'X-RTC-Trace-ID',
                PROTOCOL: 'https://',
                PROTOCOL_WS: 'wss://',
                PROTOCOL_RTC: 'wsrtc://',
                SIG_PORT: 19643,
                SIG_PROTOCOL: 'wssig://',
                SS_HOST: 'miclink.chinanetcenter.com',
                RTC_HOST: 'dispatchcas.miclink.haplat.net',
                DISPATCH_SS_HOST: 'miclink.chinanetcenter.com',
                DISPATCH_RTC_HOST: 'dispatchcas.miclink.haplat.net',
                DISPATCH_SIGNAL_HOST: 'dispatchsignal.haplat.net',
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function s(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function n(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var o = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), a = i(40), u = function(e) {
                function t(e) {
                    r(this, t);
                    var i = s(this,
                        (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                    return i.setMaxListeners(e || 100), i;
                }
                
                return n(t, e), o(t, [
                    {
                        key: 'listenTo',
                        value: function(e, t) {this.addListener(e, t);},
                    },
                    {
                        key: 'removeTo',
                        value: function(e, t) {this.removeListener(e, t);},
                    },
                    {
                        key: 'removeToAll',
                        value: function() {this.removeAllListeners();},
                    },
                    {
                        key: 'trigger',
                        value: function(e) {
                            for (var t = arguments.length, i = Array(
                                t > 1 ? t - 1 : 0), r = 1; r < t; r++) i[r -
                            1] = arguments[r];
                            this.emit.apply(this, [e].concat(i));
                        },
                    }]), t;
            }(a);
            t.default = u;
        }, function(e, t, i) {
            'use strict';
            t.Event = {
                SKIN_EVENT: 'WS_SKIN_EVENT',
                AUTH_EVENT: 'WS_TICKET_EVENT',
                SIGNAL_EVENT: 'WS_SIGNAL_EVENT',
                PLAYER_EVENT: 'WS_PLAYER_EVENT',
                PREVIEW_EVENT: 'WS_PREVIEW_EVENT',
                CHANNEL_EVENT: 'WS_CHANNEL_EVENT',
                MIX_EVENT: 'WS_MIX_EVENT',
                PULL_STREAM_EVENT: 'WS_PULL_STREAM_EVENT',
                PUSH_STREAM_EVENT: 'WS_PUSH_STREAM_EVENT',
            }, t.SkinEvent = {
                APPEND: 'append',
                REMOVE: 'remove',
            }, t.AuthEvent = {
                TOKEN: 'WS_GET_TOKEN',
                TICKET: 'WS_GET_TICKET',
                TICKET_UPDATE: 'WS_UPDATE_TICKET',
            }, t.LinkEvent = {
                JOIN: 'WS_ROOM_EVENT_JOIN',
                CREATE: 'WS_ROOM_EVENT_CREATE',
                DESTROY: 'WS_ROOM_EVENT_DESTROY',
                BROADCAST: 'WS_ROOM_EVENT_BROADCAST',
                SIG_EVENT: 'WS_ROOM_EVENT_SIGNAL',
                PULL_EVENT: 'WS_ROOM_EVENT_PULL_STREAM',
                PUSH_EVENT: 'WS_ROOM_EVENT_PUSH_STREAM',
                PLAY_EVENT: 'WS_ROOM_EVENT_PLAY_STREAM',
                JOIN_V: 'WS_ROOM_EVENT_JOIN_V',
                CREATE_V: 'WS_ROOM_EVENT_CREATE_V',
                MIX_LAYOUT: 'WS_ROOM_EVENT_MIX_LAYOUT',
            }, t.PlayEvent = {
                ERROR: 'WS_VIDEO_ERROR',
                METADATA: 'WS_VIDEO_METADATA',
                SOCKET_OPEN: 'WS_LIVE_SOCKET_OPEN',
                SOCKET_CLOSE: 'WS_LIVE_SOCKET_CLOSE',
                BUFFER_WARNING: 'WS_VIDEO_BUFFER_WARNING',
                DURATION_WARNING: 'WS_VIDEO_DURATION_WARNING',
                RESOLUTION_CHANGE: 'WS_VIDEO_RESOLUTION_CHANGE',
            }, t.SignalEvent = {
                CONNECT_FAILED: 'WS_SIG_CONNECT_FAILED',
                CONNECT_SUCCESS: 'WS_SIG_CONNECT_SUCCESS',
                CONNECT_MSG_SEND: 'WS_SIG_CONNECT_MSG_SEND',
                CONNECT_MSG_RECEIVE: 'WS_SIG_CONNECT_MSG_RECEIVE',
            }, t.PushStreamEvent = {
                METADATA: 'WS_PUSH_METADATA',
                VIDEO_ERROR: 'WS_PUSH_VIDEO_ERROR',
                CAMERA_ERROR: 'WS_PUSH_CAMERA_ERROR',
                DISPATCH_ERROR: 'WS_PUSH_DISPATCH_ERROR',
                STREAMTRACK_CHANGE: 'WS_PUSH_STREAMTRACK_CHANGE',
                SERVER_ERROR: 'WS_PUSH_SERVER_ERROR',
                SERVER_SUCCESS: 'WS_PUSH_SERVER_SUCCESS',
                MIX_COMMAND: 'WS_PUSH_MIX_COMMAND',
                MIX_CREATE_COMMAND: 'WS_PUSH_MIX_CREATE_COMMAND',
                MIX_MODIFY_COMMAND: 'WS_PUSH_MIX_MODIFY_COMMAND',
                MIX_STATUS_COMMAND: 'WS_PUSH_MIX_STATUS_COMMAND',
                MIX_DESTROY_COMMAND: 'WS_PUSH_MIX_DESTROY_COMMAND',
            }, t.PullStreamEvent = {
                METADATA: 'WS_PULL_METADATA',
                VIDEO_ERROR: 'WS_PULL_VIDEO_ERROR',
                DISPATCH_ERROR: 'WS_PULL_DISPATCH_ERROR',
                SERVER_ERROR: 'WS_PULL_SERVER_ERROR',
                SERVER_SUCCESS: 'WS_PULL_SERVER_SUCCESS',
                MIX_JOIN_COMMAND: 'WS_PULL_MIX_JOIN_COMMAND',
                MIX_QUIT_COMMAND: 'WS_PULL_MIX_QUIT_COMMAND',
            }, t.MixEvent = {
                JOIN: 'join',
                QUIT: 'quit',
                CREATE: 'create',
                MODIFY: 'modify',
                STATUS: 'status',
                DESTROY: 'destroy',
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {r(this, e);}
                
                return s(e, null, [
                    {
                        key: 'isWebRTCSupported',
                        value: function() {return !!window.RTCPeerConnection;},
                    },
                    {
                        key: 'isMSESupported',
                        value: function() {
                            var e = window.MediaSource ||
                                window.WebKitMediaSource;
                            return e && 'function' ==
                                typeof e.isTypeSupported && e.isTypeSupported(
                                    'video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
                        },
                    },
                    {
                        key: 'isGetUserMediaSupported',
                        value: function() {
                            return window.navigator.mediaDevices &&
                                window.navigator.mediaDevices.getUserMedia;
                        },
                    },
                    {
                        key: 'getCameraCapacity',
                        value: function() {
                            return window.navigator.mediaDevices &&
                            window.navigator.mediaDevices.getSupportedConstraints
                                ? window.navigator.mediaDevices.getSupportedConstraints()
                                : {};
                        },
                    },
                    {
                        key: 'getMediaDevices',
                        value: function(e) {
                            var t = void 0, i = [], r = [], s = [],
                                n = window.navigator.mediaDevices;
                            n && n.enumerateDevices ? n.enumerateDevices().
                                then(function(n) {
                                    for (var o in n) if (n.hasOwnProperty(o)) {
                                        var a = {};
                                        t = n[o], a.kind = t.kind, a.label = t.label, a.groupId = t.groupId, a.deviceId = t.deviceId, 'videoinput' ===
                                        t.kind
                                            ? i.push(a)
                                            : 'audioinput' === t.kind
                                                ? r.push(a)
                                                : 'audiooutput' === t.kind &&
                                                s.push(a);
                                    }
                                    e && e(i, r, s);
                                }).
                                catch(function(t) {e && e(i, r, s);}) : e &&
                                e(i, r, s);
                        },
                    },
                    {
                        key: 'getAspectByProfile',
                        value: function(e) {
                            var t = {
                                aspectRatio: 4 / 3,
                                width: 480,
                                height: 360,
                                minBitRate: 400,
                                maxBitRate: 700,
                            };
                            switch (String(e).toUpperCase()) {
                                case'180P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 240, t.height = 180, t.minBitRate = 100, t.maxBitRate = 400;
                                    break;
                                case'180P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 320, t.height = 180, t.minBitRate = 100, t.maxBitRate = 400;
                                    break;
                                case'360P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 480, t.height = 360, t.minBitRate = 400, t.maxBitRate = 700;
                                    break;
                                case'360P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 640, t.height = 360, t.minBitRate = 400, t.maxBitRate = 700;
                                    break;
                                case'480P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 640, t.height = 480, t.minBitRate = 500, t.maxBitRate = 800;
                                    break;
                                case'480P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 848, t.height = 480, t.minBitRate = 500, t.maxBitRate = 800;
                                    break;
                                case'540P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 720, t.height = 540, t.minBitRate = 600, t.maxBitRate = 1e3;
                                    break;
                                case'540P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 960, t.height = 540, t.minBitRate = 600, t.maxBitRate = 1e3;
                                    break;
                                case'720P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 960, t.height = 720, t.minBitRate = 800, t.maxBitRate = 1500;
                                    break;
                                case'720P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 1280, t.height = 720, t.minBitRate = 800, t.maxBitRate = 1500;
                                    break;
                                case'1080P_1':
                                    t.aspectRatio = 4 /
                                        3, t.width = 1440, t.height = 1080, t.minBitRate = 1e3, t.maxBitRate = 2e3;
                                    break;
                                case'1080P_2':
                                    t.aspectRatio = 16 /
                                        9, t.width = 1920, t.height = 1080, t.minBitRate = 1e3, t.maxBitRate = 2e3;
                            }
                            return t;
                        },
                    },
                    {
                        key: 'getQueryParams',
                        value: function(e) {
                            var t = {}, i = e.split('&');
                            if (!i.length) return t;
                            for (var r = void 0, s = i.length, n = 0; n <
                            s; n++) r = i[n].split('='), r.length > 1 &&
                            (t[r[0]] = r[1]);
                            return t;
                        },
                    },
                    {
                        key: 'getStreamName',
                        value: function(e) {
                            var t = e.split('?'), i = '',
                                r = t[0].indexOf('//');
                            if (-1 !== r) {
                                var s = t[0].substr(r + 2);
                                r = s.indexOf('/'), -1 !== r &&
                                (i = s.substr(r + 1));
                            }
                            return i;
                        },
                    },
                    {
                        key: 'assembleHost',
                        value: function(e) {
                            if (!e || !e.length) return '';
                            var t = '', i = e.indexOf('://');
                            return t += -1 === i ? 'https://' + e : 'https://' +
                                e.substr(i + 3), '/' !== t[t.length - 1] &&
                            (t += '/'), t;
                        },
                    },
                    {
                        key: 'deletePortFromUrl',
                        value: function(e) {
                            var t = e.indexOf('://');
                            if (-1 === t) return e;
                            var i = e.substr(t + 3);
                            if (-1 === (t = i.indexOf('/'))) return e;
                            var r = i.substr(0, t), s = i.substr(t);
                            return t = r.indexOf(':'), -1 !== t &&
                            (r = r.substr(0, t)), 'https://' + r + s;
                        },
                    },
                    {
                        key: 'setRotationDegreee',
                        value: function(e, t) {
                            var i = document.getElementById(e);
                            if (i) {
                                var r = parseInt(t);
                                r < 0 && (r = -r), r > 360 && (r %= 360);
                                for (var s = 'rotate(' + r + 'deg)', n = [
                                    'transform',
                                    'oTransform',
                                    'msTransform',
                                    'mozTransform',
                                    'webkitTransform'], o = 0; o <
                                     n.length; o++) i.style[n[o]] = s;
                            }
                        },
                    },
                    {
                        key: 'setVideoVolume',
                        value: function(e, t) {
                            var i = document.getElementById(e);
                            if (i) {
                                var r = parseInt(t);
                                (r < 0 || r > 100) && (r = 100), i.volume = r /
                                    100;
                            }
                        },
                    },
                    {
                        key: 'closeEchoCancellation',
                        value: function(e) {
                            for (var t = e, i = [
                                'googEchoCancellation',
                                'googEchoCancellation2',
                                'googNoiseSuppression',
                                'googNoiseSuppression2',
                                'googAutoGainControl',
                                'googHighpassFilter',
                                'googTypingNoiseDetection'], r = 0; r <
                                 i.length; r++) t.audio && (t.audio[i[r]] = !1);
                            return t;
                        },
                    },
                    {
                        key: 'randomNumString',
                        value: function(e) {
                            var t = parseInt(e);
                            return (isNaN(t) || t < 1) &&
                            (t = 6), Math.random().
                                toFixed(t).
                                substring(2);
                        },
                    },
                    {
                        key: 'str2hex',
                        value: function(e) {
                            var t = arguments.length > 1 &&
                            void 0 !== arguments[1]
                                ? arguments[1]
                                : '', i = arguments.length > 2 &&
                            void 0 !== arguments[2]
                                ? arguments[2]
                                : 0;
                            if (!e) return '';
                            e += '';
                            for (var r = void 0, s = [], n = e.length, o = 0; o <
                            n; o++) r = (e.charCodeAt(o) + i).toString(
                                16), s.push(r.length < 2 ? '0' + r : r);
                            return s.join(t);
                        },
                    },
                    {
                        key: 'hex2str',
                        value: function(e) {
                            var t = arguments.length > 1 &&
                            void 0 !== arguments[1]
                                ? arguments[1]
                                : '', i = arguments.length > 2 &&
                            void 0 !== arguments[2]
                                ? arguments[2]
                                : 0;
                            if (!e) return '';
                            e += '', e = e.split(t);
                            for (var r = void 0, s = '', n = e.length, o = 0; o <
                            n; o++) r = parseInt(e[o], 16) -
                                i, s += String.fromCharCode(r);
                            return s;
                        },
                    },
                    {
                        key: 'trim',
                        value: function(e) {return this.ltrim(this.rtrim(e));},
                    },
                    {
                        key: 'ltrim',
                        value: function(e) {
                            if (!e) return '';
                            for (var t = 0; t < e.length; t++) if (e.charCodeAt(
                                    t) > 32) return e.substring(t);
                            return '';
                        },
                    },
                    {
                        key: 'rtrim',
                        value: function(e) {
                            if (!e) return '';
                            for (var t = e.length; t >
                            0; t--) if (e.charCodeAt(t - 1) >
                                32) return e.substring(0, t);
                            return '';
                        },
                    },
                    {
                        key: 'getBrowserUUID',
                        value: function(t) {
                            var i = document.createElement('canvas'),
                                r = t || 'wsWebRTC', s = i.getContext('2d');
                            s.textBaseline = 'top', s.font = '14px \'Arial\'', s.textBaseline = 'middle', s.fillStyle = '#f60', s.fillRect(
                                125, 1, 62,
                                20), s.fillStyle = '#069', s.fillText(r, 2,
                                15), s.fillStyle = 'rgba(102, 204, 0, 0.7)', s.fillText(
                                r, 4, 17);
                            var n = atob(i.toDataURL().
                                replace('data:image/png;base64,', ''));
                            return e.str2hex(n.slice(-16, -12));
                        },
                    },
                    {
                        key: 'getBlowserInfo',
                        value: function() {
                            return {
                                appName: navigator.appName,
                                appVersion: navigator.appVersion,
                                platform: navigator.platform,
                                userAgent: navigator.userAgent,
                            };
                        },
                    },
                    {
                        key: 'uuid',
                        value: function() {
                            for (var e = [], t = '0123456789ABCDEF', i = 0; i <
                            36; i++) e[i] = t.substr(
                                Math.floor(16 * Math.random()), 1);
                            return e[14] = '4', e[19] = t.substr(3 & e[19] | 8,
                                1), e[8] = e[13] = e[18] = e[23] = '-', e.join(
                                '');
                        },
                    },
                    {
                        key: 'setVideoDisplay',
                        value: function(e, t) {
                            if (e) {
                                var i = void 0;
                                if ('String' ===
                                    Object.prototype.toString.call(e).
                                        slice(8, -1)) {
                                    if (!(i = document.getElementById(
                                            e))) return;
                                    i.style['object-fit'] = t || 'fill';
                                } else if ('Array' ===
                                    Object.prototype.toString.call(e).
                                        slice(8, -1)) for (var r = 0; r <
                                e.length; r++) i = document.getElementById(
                                    e[r]), i.style['object-fit'] = t || 'fill';
                            } else for (var s = document.getElementsByTagName(
                                'video'), n = 0; n <
                                        s.length; n++) s[n].style['object-fit'] = t ||
                                'fill';
                        },
                    },
                    {
                        key: 'initNotification',
                        value: function() {
                            var e = window.Notification ||
                                window.mozNotification ||
                                window.webkitNotification;
                            e && e.requestPermission().
                                then(function(e) {
                                    console &&
                                    console.log('enable notification api: ' +
                                        ('granted' === e));
                                });
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }();
            i(21);
            var n = function() {
                function e() {r(this, e);}
                
                return s(e, null, [
                    {
                        key: 'querys',
                        value: function(e) {
                            if (!e.url) return null;
                            var t = {method: 'POST'}, i = e.url;
                            for (var r in e) if (e.hasOwnProperty(
                                    r)) switch (r) {
                                case'type':
                                    t.method = String(e[r]).toUpperCase();
                                    break;
                                case'data':
                                    var s = e[r];
                                    'string' != typeof s &&
                                    (s = JSON.stringify(e[r])), t.body = s;
                                    break;
                                case'headers':
                                    t.headers = e[r];
                            }
                            return t.headers
                                ? t.headers['Content-Type'] = e.contentType ||
                                    'text/plain'
                                : 'GET' !== t.method && (t.headers = {
                                'Content-Type': e.contentType || 'text/plain',
                            }), {url: i, params: t};
                        },
                    },
                    {
                        key: 'checkStatus',
                        value: function(e) {
                            if (e.status >= 200 && e.status < 300) return e;
                            var t = new Error(e.statusText);
                            throw t.response = e, t.status = e.status, t;
                        },
                    },
                    {
                        key: 'ajax',
                        value: function(t) {
                            var i = e.querys(t);
                            i && fetch(i.url, i.params).
                                then(e.checkStatus).
                                then(function(e) {
                                    var t = e.text();
                                    return '' !== t ? t : '{}';
                                }).
                                then(t.success).
                                catch(function(e) {
                                    e && void 0 === e.status &&
                                    (e.status = -1), t.error && t.error(e);
                                });
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            t.PlayerEvent = {
                PLAYER_EVENT: 'playerEvent',
                MEDIA_EVENT: 'mediaEvent',
                VIDEO_EVENT: 'videoEvent',
            }, t.PlayerMessage = {
                ERROR: 'error',
                NETWORK: 'network',
                PLAY_ERROR: 'playError',
                PLAY_ENDED: 'playEnded',
                PLAY_RESTART: 'playRestart',
                METADATA: 'metadata',
                SOCKET_OPEN: 'socketOpen',
                SOCKET_CLOSE: 'socketClose',
                BUFFER_WARNING: 'bufferWarning',
                DURATION_WARNING: 'durationWaring',
                DIMENSION_CHANGE: 'dimensionChange',
                AUDIO_VIDEO_SWITCH: 'audioVideoSwitch',
            };
        }, function(e, t, i) {
            'use strict';
            t.RoomEvent = {
                ROOM_EVENT: 'roomEvent',
                CONNECT_EVENT: 'connectEvent',
                CONNECT_MESSAGE_EVENT: 'conMessageEvent',
                CONNECT_RECREATE_EVENT: 'conRecreateEvent',
                CONNECT_PONG_ERROR_EVENT: 'conPongErrorEvent',
            }, t.RoomMessage = {
                JOIN_ROOM: 'joinRoom',
                BROADCAST: 'broadcast',
                CREATE_ROOM: 'createRoom',
                DESTROY_ROOM: 'destroyRm',
                QUIT_VROOM: 'quitVRm',
                JOIN_VROOM: 'joinVRoom',
                CREATE_VROOM: 'createVRoom',
                BROADCAST_V: 'broadcastVRm',
                DESTROY_VROOM: 'destroyVRm',
                WHICH_VROOM: 'inWhichVRoom',
            }, t.RoomRole = {
                AUDIENCE: 0,
                INTERACTIVE: 1,
                ANCHOR: 2,
            }, t.RoomCode = {
                OK: 0,
                EXIST_ROOM: 1101,
                EXIST_NOT_ROOM: 1107,
                EXIST_CONNECTING_LIST: 1102,
                EXIST_CONNECTED_LIST: 1103,
                AGREE_CONNECTED_LIST: 1104,
                CANCEL_EXIST_NOT_CONNECT_LIST: 1105,
                KICK_EXIST_NOT_CONNECT_LIST: 1106,
                ANCHOR_IN_LANCHED: 1109,
                LINK_COUNT_NOT_LIMIT: 1108,
                LINK_COUNT_OVER_LIMIT: 1110,
                URL_FORMAT_ERROR: 2301,
                UNAUTHORIZED: 2302,
                EXCEED_AUTHORITY: 2303,
                REQUEST_NOT_DEFINED: 2304,
                REQUEST_TOO_MANY: 2305,
                SECRET_KEY_OVERDUE: 2306,
                SECRET_TICKET_OVERDUE: 2307,
                SERVER_INTERNAL_ERROR: 3301,
                GATEWAY_TIMEOUT: 3302,
                USER_LOST: 3303,
            }, t.RoomCommand = {
                KICK: 'WSRTC_KICK_CONNECTION',
                AGREE: 'WSRTC_AGREE_CONNECTION',
                REFUSE: 'WSRTC_REFUSE_CONNECTION',
                CANCEL: 'WSRTC_CANCEL_FOR_CONNECTION',
                REQUEST: 'WSRTC_REQUEST_FOR_CONNECTION',
            };
        }, function(e, t, i) {
            'use strict';
            var r = {
                utf8: {
                    stringToBytes: function(e) {
                        return r.bin.stringToBytes(
                            unescape(encodeURIComponent(e)));
                    },
                    bytesToString: function(e) {
                        return decodeURIComponent(
                            escape(r.bin.bytesToString(e)));
                    },
                },
                bin: {
                    stringToBytes: function(e) {
                        for (var t = [], i = 0; i < e.length; i++) t.push(255 &
                            e.charCodeAt(i));
                        return t;
                    },
                    bytesToString: function(e) {
                        for (var t = [], i = 0; i < e.length; i++) t.push(
                            String.fromCharCode(e[i]));
                        return t.join('');
                    },
                },
            };
            e.exports = r;
        }, function(e, t, i) {
            'use strict';
            t.logger = {
                logLevel: 3,
                logCallback: void 0,
                setLogLevel: function(e) {this.logLevel = parseInt(e);},
                setLogCallback: function(e) {this.logCallback = e;},
                error: function(e) {
                    this.logLevel < 1 ||
                    (console.error('【Play】' + e), this.logCallback &&
                    this.logCallback('【' + type + '】' + e));
                },
                warn: function(e) {
                    this.logLevel < 2 ||
                    (console.warn('【Play】' + e), this.logCallback &&
                    this.logCallback('【' + type + '】' + e));
                },
                log: function(e) {
                    this.logLevel < 3 ||
                    (console.log('【Play】' + e), this.logCallback &&
                    this.logCallback('【' + type + '】' + e));
                },
                debug: function(e) {
                    this.logLevel < 4 ||
                    (console.log('【Play】' + e), this.logCallback &&
                    this.logCallback('【' + type + '】' + e));
                },
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(4), o = i(0), a = i(1),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e(t) {r(this, e), this.observer = t;}
                    
                    return s(e, [
                        {
                            key: 'append',
                            value: function(e, t) {
                                var i = document.createElement('video');
                                if (!i) return u.default.warn(
                                    'create video element failed', o.LOG.SKIN), i;
                                if (i.style.width = '100%', i.style.height = '100%', i.setAttribute(
                                        'autoplay', 'autoplay'), i.setAttribute(
                                        'oncontextmenu',
                                        'return false'), i.setAttribute('id', e +
                                        o.SUFFIX.VID_SUFFIX), t ===
                                    o.LOG.PUSH) for (var r = [
                                    'transform',
                                    'oTransform',
                                    'msTransform',
                                    'mozTransform',
                                    'webkitTransform'], s = 0; s <
                                                     r.length; s++) i.style[r[s]] = 'scale(-1, 1)';
                                var a = document.createElement('div');
                                if (!a) return u.default.warn(
                                    'create div element failed', o.LOG.SKIN), i;
                                a.style.width = '100%', a.style.height = '100%', a.style.overflow = 'hidden', a.setAttribute(
                                    'id', e + o.SUFFIX.DIV_SUFFIX);
                                try {
                                    a.appendChild(i), this.observer &&
                                    this.observer.trigger(n.Event.SKIN_EVENT, {
                                        type: n.SkinEvent.APPEND,
                                        code: 0,
                                        message: t,
                                        data: a,
                                    });
                                } catch (e) {}
                                return i;
                            },
                        },
                        {
                            key: 'remove',
                            value: function(e, t) {
                                var i = document.getElementById(e);
                                if (!i) return void u.default.log('no video by ' +
                                    e, o.LOG.SKIN);
                                try {
                                    i.srcObject = null;
                                    var r = i.parentNode;
                                    if (!r) return void u.default.log('no parent by ' +
                                        e, o.LOG.SKIN);
                                    r.removeChild(i);
                                    var s = r.parentNode;
                                    if (!s) return void u.default.log('no parent parent by ' +
                                        e, o.LOG.SKIN);
                                    s.removeChild(r), this.observer &&
                                    this.observer.trigger(n.Event.SKIN_EVENT, {
                                        type: n.SkinEvent.REMOVE,
                                        code: 0,
                                        message: t,
                                        data: s.id,
                                    });
                                } catch (e) {}
                                u.default.log('romove video by ' + e, o.LOG.SKIN);
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            t.PullEvent = {
                PULL_EVENT: 'pullEvent',
                PEER_EVENT: 'peerEvent',
                VIDEO_EVENT: 'videoEvent',
            }, t.PullMessage = {
                PLAY_ERROR: 'playError',
                DISPATCH_ERROR: 'dispatchError',
                RTC_SERVER_ERROR: 'rtcServerError',
                MIX_COMMAND: 'mixCommand',
                PLAY_METADATA: 'playMetadata',
                RTC_SERVER_SUCCESS: 'rtcServerSuccess',
            };
        }, function(e, t, i) {
            'use strict';
            t.PushEvent = {
                PUSH_EVENT: 'pushEvent',
                PEER_EVENT: 'peerEvent',
                VIDEO_EVENT: 'videoEvent',
            }, t.PushMessage = {
                PLAY_ERROR: 'playError',
                CAMERA_ERROR: 'cameraError',
                DISPATCH_ERROR: 'dispatchError',
                RTC_SERVER_ERROR: 'rtcServerError',
                MIX_COMMAND: 'mixCommand',
                PLAY_METADATA: 'playMetadata',
                RTC_SERVER_SUCCESS: 'rtcServerSuccess',
                STREAM_TRACK: 'streamTrace',
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = i(53), o = function() {
                function e(t, i) {
                    r(this,
                        e), this.params = void 0, this.xhrLoader = void 0, this.TIMEOUT = 2e4, this.timeoutTimer = void 0, this.errorCallback = i, this.successCallback = t;
                }
                
                return s(e, [
                    {
                        key: 'start',
                        value: function(e, t, i) {
                            this.stop(), this.parseConfig(i);
                            var r = this.xhrLoader = n.XHR.createXHR();
                            r.onerror = this.xhrLoadError.bind(
                                this), r.onloadend = this.xhrLoadEnd.bind(this);
                            var s = 'POST';
                            'GET' ===
                            String(this.params.method).toUpperCase() &&
                            (s = 'GET'), r.open(s, e,
                                !0), r.withCredentials = this.params.withCredentials, this.setHeaders(
                                s), this.parseData(
                                t), this.startTimeout(), '{}' !==
                            this.params.data
                                ? r.send(this.params.data)
                                : r.send();
                        },
                    },
                    {
                        key: 'stop',
                        value: function() {
                            this.stopTimeout(), this.xhrLoader &&
                            (this.xhrLoader.onerror = void 0, this.xhrLoader.onloadend = void 0, this.xhrLoader.abort()), this.xhrLoader = void 0;
                        },
                    },
                    {
                        key: 'startTimeout',
                        value: function() {
                            this.stopTimeout(), this.timeoutTimer = window.setTimeout(
                                this.xhrLoadTimeout.bind(this), this.TIMEOUT);
                        },
                    },
                    {
                        key: 'stopTimeout',
                        value: function() {
                            this.timeoutTimer && (window.clearTimeout(
                                this.timeoutTimer), this.timeoutTimer = void 0);
                        },
                    },
                    {
                        key: 'parseConfig',
                        value: function(e) {
                            this.params = {
                                data: '{}',
                                method: 'post',
                                headers: void 0,
                                withCredentials: !1,
                            };
                            for (var t in e) if (e.hasOwnProperty(
                                    t)) switch (t) {
                                case'method':
                                case'headers':
                                    this.params[t] = e[t];
                                    break;
                                case'withCredentials':
                                    this.params[t] = 'true' === String(e[t]);
                            }
                        },
                    },
                    {
                        key: 'setHeaders',
                        value: function(e) {
                            if (this.params.headers) {
                                var t = this.params.headers;
                                for (var i in t) t.hasOwnProperty(i) &&
                                this.xhrLoader.setRequestHeader(i, t[i]);
                            }
                            'POST' === e &&
                            this.xhrLoader.setRequestHeader('Content-Type',
                                'application/x-www-form-urlencoded');
                        },
                    },
                    {
                        key: 'parseData',
                        value: function(e) {
                            'string' != typeof e
                                ? 'Object' ===
                                Object.prototype.toString.call(e).
                                    slice(8, -1) &&
                                (this.params.data = JSON.stringify(e))
                                : this.params.data = e;
                        },
                    },
                    {
                        key: 'xhrLoadEnd',
                        value: function(e) {
                            if (this.stopTimeout(), !e ||
                                !e.currentTarget) return this.stop(), void(this.errorCallback &&
                                this.errorCallback({status: -1}, 'null'));
                            var t = e.currentTarget.status,
                                i = e.currentTarget.responseText;
                            t >= 200 && t < 300 || 304 === t
                                ? this.successCallback &&
                                this.successCallback(i, 'success')
                                : this.errorCallback &&
                                this.errorCallback({status: t},
                                    'error'), this.stop();
                        },
                    },
                    {
                        key: 'xhrLoadError',
                        value: function(e) {
                            if (this.stopTimeout(), !e ||
                                !e.currentTarget) return this.stop(), void(this.errorCallback &&
                                this.errorCallback({status: -1}, 'null'));
                            this.errorCallback &&
                            this.errorCallback({status: e.currentTarget.status},
                                'error'), this.stop();
                        },
                    },
                    {
                        key: 'xhrLoadTimeout',
                        value: function() {
                            this.stop(), this.errorCallback &&
                            this.errorCallback({status: -1}, 'null');
                        },
                    }]), e;
            }();
            t.default = o;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(4), o = i(2), a = i(74),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e(t) {
                        r(this,
                            e), this.config = {}, this.observer = t, this.mixControler = void 0, this.STATUS_TIME = 6e4, this.statusTimer = void 0;
                    }
                    
                    return s(e, [
                        {
                            key: 'start',
                            value: function(e) {
                                this.config = e || {}, this.mixControler ||
                                (this.mixControler = new u.default, this.mixControler.listenTo(
                                    n.Event.MIX_EVENT,
                                    this.onMixControlHandler.bind(
                                        this)), this.mixControler.start());
                            },
                        },
                        {
                            key: 'stopStatusTimer',
                            value: function() {
                                this.statusTimer && (window.clearInterval(
                                    this.statusTimer), this.statusTimer = void 0);
                            },
                        },
                        {
                            key: 'startStatusTimer',
                            value: function() {
                                var e = this;
                                this.stopStatusTimer(), this.statusTimer = window.setInterval(
                                    function() {
                                        e.mixStaus({roomId: e.config.roomId || ''});
                                    }, this.STATUS_TIME);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.stopStatusTimer(), this.mixControler &&
                                (this.mixControler.stop(), this.mixControler.removeToAll(), this.mixControler = void 0);
                            },
                        },
                        {
                            key: 'commonConfig',
                            value: function(e) {
                                var t = e;
                                return e.userId ||
                                (t.userId = this.config.userId || ''), e.roomId ||
                                (t.roomId = this.config.roomId ||
                                    ''), e.dispatchIP ||
                                (t.dispatchIP = this.config.dispatchIP ||
                                    o.Globals.rtcHosts[0] || ''), t;
                            },
                        },
                        {
                            key: 'mixCreate',
                            value: function(e) {
                                if (this.mixControler) {
                                    var t = this.commonConfig(e);
                                    this.mixControler.createControl(t);
                                }
                            },
                        },
                        {
                            key: 'mixModify',
                            value: function(e) {
                                if (this.mixControler) {
                                    var t = this.commonConfig(e);
                                    this.mixControler.modifyControl(t);
                                }
                            },
                        },
                        {
                            key: 'mixJoin',
                            value: function(e) {
                                this.mixControler &&
                                this.mixControler.joinControl(e);
                            },
                        },
                        {
                            key: 'mixQuit',
                            value: function(e) {
                                this.mixControler &&
                                this.mixControler.quitControl(e);
                            },
                        },
                        {
                            key: 'mixStaus',
                            value: function(e) {
                                this.mixControler &&
                                this.mixControler.statusControl(e);
                            },
                        },
                        {
                            key: 'mixDestroy',
                            value: function(e) {
                                if (this.mixControler) {
                                    var t = this.commonConfig(e);
                                    this.mixControler.destroyControl(t);
                                }
                            },
                        },
                        {
                            key: 'onMixControlHandler',
                            value: function(e) {
                                this.observer &&
                                this.observer.trigger(n.Event.MIX_EVENT, e);
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(2), l = i(4), c = i(0), h = i(7), d = i(1), f = r(d),
                v = i(3), p = r(v), g = i(11), m = r(g), y = i(68), _ = r(y),
                S = i(54), E = r(S), R = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e.config = {}, e.playerId = '', e.baseSkin = void 0, e.mergeVideoElem = void 0, e.isStop = !0, e.lastWidth = -1, e.lastHeight = -1, e.isHasVideo = !1, e.RESTART_TIME = 5e3, e.restartTimer = void 0, e.netRetryCount = 0, e.NET_RETRY_COUNT_LIMIT = 12, e.videoPlayer = void 0, e.mediaPlayer = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (f.default.debug('[' + e + '], service stop',
                                        c.LOG.PLAY), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.stop(), this.isStop = !1, this.parseConfig(
                                    e), this.appendSkin(), this.playVideo(), this.isHasVideo = !1, this.mediaPlayer = new E.default(
                                    this.config), this.mediaPlayer.listenTo(
                                    h.PlayerEvent.PLAYER_EVENT,
                                    this.onMediaEventHandler.bind(
                                        this)), this.mediaPlayer.start();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.isStop = !0, this.lastWidth = -1, this.lastHeight = -1, this.destroyRestartTimer(), this.destroyMedia(), this.destroyVideo(), this.removeSkin(), this.destroySkin(), this.mergeVideoElem = void 0;},
                        },
                        {
                            key: 'debug',
                            value: function(e) {
                                this.mediaPlayer && this.mediaPlayer.debug(e);
                            },
                        },
                        {
                            key: 'debugSourceBuffer',
                            value: function() {
                                this.mediaPlayer &&
                                this.mediaPlayer.debugSourceBuffer();
                            },
                        },
                        {
                            key: 'restart',
                            value: function() {this.stop(), this.start();},
                        },
                        {
                            key: 'resume',
                            value: function(e) {
                                this.isStop && e === this.config.url &&
                                (f.default.log('resume stream',
                                    c.LOG.PLAY), this.start(this.config));
                            },
                        },
                        {
                            key: 'destroyMedia',
                            value: function() {
                                this.mediaPlayer &&
                                (this.mediaPlayer.removeToAll(), this.mediaPlayer.stop(), this.mediaPlayer = void 0);
                            },
                        },
                        {
                            key: 'appendSkin',
                            value: function() {
                                document.getElementById(this.playerId) ||
                                (this.skin.append(this.config.userId,
                                    c.LOG.PLAY), f.default.debug('add play video of ' +
                                    this.config.userId, c.LOG.PLAY));
                            },
                        },
                        {
                            key: 'removeSkin',
                            value: function() {
                                '' !== this.playerId &&
                                this.skin.remove(this.playerId,
                                    c.LOG.PLAY), this.playerId = '';
                            },
                        },
                        {
                            key: 'destroySkin',
                            value: function() {
                                this.baseSkin && (this.baseSkin = void 0);
                            },
                        },
                        {
                            key: 'parseConfig',
                            value: function(e) {
                                e && (this.config = e), this.config.url &&
                                '' !== String(this.config.url) ||
                                f.default.warn('url param invalid',
                                    c.LOG.PLAY), void 0 === this.config.isLive &&
                                (this.config.isLive = !0), void 0 ===
                                this.config.isLiveCatch &&
                                (this.config.isLiveCatch = !0), void 0 ===
                                this.config.userId && (this.config.userId = 'web' +
                                    Math.random().
                                        toFixed(6).
                                        substring(
                                            2)), this.playerId = this.config.playerId = this.config.userId +
                                    c.SUFFIX.VID_SUFFIX;
                            },
                        },
                        {
                            key: 'playVideo',
                            value: function() {
                                var e = this.config.playerId,
                                    t = document.getElementById(e);
                                this.mergeVideoElem = this.config.videoElem = t, this.videoPlayer ||
                                (this.videoPlayer = new _.default(
                                    this.mergeVideoElem), this.videoPlayer.listenTo(
                                    h.PlayerEvent.VIDEO_EVENT,
                                    this.onVideoEventHandler.bind(
                                        this))), this.videoPlayer.start();
                            },
                        },
                        {
                            key: 'destroyVideo',
                            value: function() {
                                this.videoPlayer &&
                                (this.videoPlayer.removeToAll(), this.videoPlayer.stop(), this.videoPlayer = void 0);
                            },
                        },
                        {
                            key: 'onVideoEventHandler',
                            value: function(e) {
                                if (e && !this.quit('onVideoEventHandler')) {
                                    var t = e[c.RSP.TYPE], i = e[c.RSP.CODE],
                                        r = e[c.RSP.MESSAGE];
                                    switch (t) {
                                        case h.PlayerMessage.PLAY_ERROR:
                                            this.stop(), this.dispatchEvent(
                                                l.PlayEvent.ERROR, i, r);
                                            break;
                                        case h.PlayerMessage.PLAY_RESTART:
                                            this.restart();
                                    }
                                }
                            },
                        },
                        {
                            key: 'resetRestartTimer',
                            value: function() {
                                var e = arguments.length > 0 && void 0 !==
                                    arguments[0] && arguments[0];
                                this.destroyRestartTimer();
                                var t = e
                                    ? 2 * this.RESTART_TIME
                                    : this.RESTART_TIME;
                                this.restartTimer = window.setTimeout(
                                    this.onRestartTimerHandler.bind(this), t);
                            },
                        },
                        {
                            key: 'destroyRestartTimer',
                            value: function() {
                                this.restartTimer && (window.clearTimeout(
                                    this.restartTimer), delete this.restartTimer, this.restartTimer = void 0);
                            },
                        },
                        {
                            key: 'onRestartTimerHandler',
                            value: function() {
                                this.quit('onRestartTimerHandler') || this.restart();
                            },
                        },
                        {
                            key: 'networkRestart',
                            value: function() {
                                this.netRetryCount++, this.netRetryCount <
                                this.NET_RETRY_COUNT_LIMIT
                                    ? this.resetRestartTimer(!0)
                                    : this.dispatchEvent(l.PlayEvent.SOCKET_CLOSE,
                                        c.RSP.SUCCESS, 'network retry limit');
                            },
                        },
                        {
                            key: 'onMediaEventHandler',
                            value: function(e) {
                                if (e && !this.quit('onMediaEventHandler')) {
                                    var t = e[c.RSP.TYPE], i = e[c.RSP.CODE],
                                        r = e[c.RSP.DATA], s = e[c.RSP.MESSAGE];
                                    switch (t) {
                                        case h.PlayerMessage.SOCKET_OPEN:
                                            this.netRetryCount = 0, this.dispatchEvent(
                                                l.PlayEvent.SOCKET_OPEN, i, s, r);
                                            break;
                                        case h.PlayerMessage.METADATA:
                                            this.metadataHandler(r);
                                            break;
                                        case h.PlayerMessage.DIMENSION_CHANGE:
                                            this.dimensionChangeHandler(r);
                                            break;
                                        case h.PlayerMessage.AUDIO_VIDEO_SWITCH:
                                            this.restart();
                                            break;
                                        case h.PlayerMessage.BUFFER_WARNING:
                                            this.dispatchEvent(
                                                l.PlayEvent.BUFFER_WARNING, i, s,
                                                r);
                                            break;
                                        case h.PlayerMessage.DURATION_WARNING:
                                            this.resetRestartTimer();
                                            break;
                                        case h.PlayerMessage.NETWORK:
                                        case h.PlayerMessage.SOCKET_CLOSE:
                                            this.networkRestart();
                                            break;
                                        case h.PlayerMessage.ERROR:
                                            this.dispatchEvent(l.PlayEvent.ERROR, i,
                                                s, r);
                                            break;
                                        case h.PlayerMessage.PLAY_ENDED:
                                            this.resetRestartTimer();
                                    }
                                }
                            },
                        },
                        {
                            key: 'metadataHandler',
                            value: function(e) {
                                var t = this.config.playerId,
                                    i = this.lastWidth = parseInt(e.width),
                                    r = this.lastHeight = parseInt(e.height);
                                f.default.log('resolution, [' + t + ', ' + i + 'x' +
                                    r + ']', c.LOG.PLAY), this.dispatchEvent(
                                    l.PlayEvent.METADATA, 0, 'metadata info',
                                    {width: i, height: r});
                            },
                        },
                        {
                            key: 'dimensionChangeHandler',
                            value: function(e) {
                                var t = e.aspect1, i = e.aspect2, r = e.isAVCHeader;
                                if (r) return this.isHasVideo = !0, void(0 ===
                                this.lastWidth && 0 === this.lastHeight
                                    ? (f.default.warn('last resolution is 0x0, video data coming by ' +
                                        t + 'x' + i, c.LOG.PLAY), 0 !== t &&
                                    0 !== i && this.resetRestartTimer())
                                    : -1 !== this.lastWidth && -1 !==
                                    this.lastHeight &&
                                    f.default.log('last resolution is ' +
                                        this.lastWidth + 'x' + this.lastHeight,
                                        c.LOG.PLAY));
                                this.dispatchEvent(l.PlayEvent.RESOLUTION_CHANGE, 0,
                                    'dimension change', {
                                        isHeader: r,
                                        aspect1: t,
                                        aspect2: i,
                                    }), this.restart();
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i) {
                                var r = arguments.length > 3 &&
                                void 0 !== arguments[3]
                                    ? arguments[3]
                                    : {};
                                if (!this.quit('dispatchEvent')) {
                                    var s = '{}';
                                    r && (s = JSON.stringify(r)), f.default.log(e +
                                        ', ' + t + ', ' + i + ', ' + s,
                                        c.LOG.PLAY), this.trigger(
                                        l.Event.PLAYER_EVENT,
                                        {type: e, code: t, message: i, data: r});
                                }
                            },
                        },
                        {
                            key: 'debugVideoBuffer',
                            value: function() {
                                if (this.mergeVideoElem) {
                                    var e = this.mergeVideoElem.currentTime,
                                        t = this.mergeVideoElem.buffered;
                                    if (t.length) for (var i = void 0, r = void 0, s = 0; s <
                                    t.length; s++) i = t.start(s), r = t.end(
                                        s), console.log('videoBuffer[' + e + '][' +
                                        i + ', ' + r + ']');
                                }
                            },
                        },
                        {
                            key: 'skin',
                            get: function() {
                                return this.baseSkin ||
                                (this.baseSkin = new m.default(
                                    u.Globals.observer)), this.baseSkin;
                            },
                        }]), t;
                }(p.default);
            t.default = R;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(2), u = i(1), l = r(u), c = i(11), h = r(c),
                d = i(75), f = r(d), v = function() {
                    function e() {
                        s(this,
                            e), this.config = {}, this.playerId = '', this.previewId = '', this.baseSkin = new h.default(
                            a.Globals.observer), this.basePreview = new f.default(
                            a.Globals.observer);
                    }
                    
                    return n(e, [
                        {
                            key: 'start',
                            value: function(e) {
                                this.baseSkin && this.basePreview &&
                                (this.removeSkin(), this.removePreview(), this.config = e ||
                                    {}, this.previewId = 'preview_' + Math.random().
                                    toFixed(6).
                                    substring(
                                        2), this.playerId = this.config.playerId = this.previewId +
                                    o.SUFFIX.VID_SUFFIX, this.appendSkin(), this.basePreview.start(
                                    this.config));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.removeSkin(), this.destroyPreview(), this.destroySkin();},
                        },
                        {
                            key: 'removePreview',
                            value: function() {
                                this.basePreview && this.basePreview.stop();
                            },
                        },
                        {
                            key: 'destroyPreview',
                            value: function() {
                                this.basePreview &&
                                (this.basePreview.stop(), this.basePreview = void 0);
                            },
                        },
                        {
                            key: 'appendSkin',
                            value: function() {
                                document.getElementById(this.playerId) ||
                                (this.baseSkin.append(this.previewId,
                                    o.LOG.PREVIEW), l.default.debug('add preview video of ' +
                                    this.previewId, o.LOG.PREVIEW));
                            },
                        },
                        {
                            key: 'removeSkin',
                            value: function() {
                                '' !== this.playerId &&
                                this.baseSkin.remove(this.playerId,
                                    o.LOG.PREVIEW), this.playerId = '';
                            },
                        },
                        {
                            key: 'destroySkin',
                            value: function() {
                                this.baseSkin && (this.baseSkin = void 0);
                            },
                        }]), e;
                }();
            t.default = v;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(2), c = i(0), h = i(12), d = i(1), f = r(d),
                v = i(3), p = r(v), g = i(11), m = r(g), y = i(78), _ = r(y),
                S = i(22), E = r(S), R = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e._config = {}, e._isActive = !1, e._playerId = '', e._baseSkin = void 0, e._basePuller = void 0, e._dispatcher = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !this._isActive &&
                                    (f.default.debug('[' + e + '], service stop',
                                        c.LOG.PULL), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.stop(), this._isActive = !0, this._config = e ||
                                    {}, this._parsePullConfig() &&
                                (this._appendSkin(), l.Globals.rtcHosts.length
                                    ? this.puller.start(this._config)
                                    : this._createDispatcher());
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this._isActive = !1, this._removeSkin(), this._destroyPuller(), this._destroyDispatcher(), this._destroySkin();},
                        },
                        {
                            key: 'getPullStatus',
                            value: function(e) {
                                this._basePuller &&
                                this._basePuller.getPeerStatus(e);
                            },
                        },
                        {
                            key: 'forceJoinCommand',
                            value: function() {
                                this._basePuller &&
                                this._basePuller.forceJoinCommand();
                            },
                        },
                        {
                            key: 'mixJoinCommand',
                            value: function(e) {
                                this._basePuller &&
                                this._basePuller.mixJoinCommand(e);
                            },
                        },
                        {
                            key: 'mixQuitCommand',
                            value: function(e) {
                                this._basePuller &&
                                this._basePuller.mixQuitCommand(e);
                            },
                        },
                        {
                            key: '_destroyPuller',
                            value: function() {
                                this._basePuller &&
                                (this._basePuller.removeToAll(), this._basePuller.stop(), this._basePuller = void 0);
                            },
                        },
                        {
                            key: '_onPullEventHandler',
                            value: function(e) {
                                if (e && !this.quit('_onPullEventHandler')) {
                                    var t = e[c.RSP.TYPE], i = e[c.RSP.CODE],
                                        r = e[c.RSP.DATA] || {},
                                        s = e[c.RSP.MESSAGE];
                                    switch (r.userId = this.peerUserId, t) {
                                        case h.PullMessage.PLAY_METADATA:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.METADATA, i,
                                                s, r || {});
                                            break;
                                        case h.PullMessage.PLAY_ERROR:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.VIDEO_ERROR, i,
                                                s, r || {});
                                            break;
                                        case h.PullMessage.RTC_SERVER_ERROR:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.SERVER_ERROR, i,
                                                s, r || {});
                                            break;
                                        case h.PullMessage.RTC_SERVER_SUCCESS:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.SERVER_SUCCESS, i,
                                                s, r || {});
                                            break;
                                        case c.XHR.JOIN:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.MIX_JOIN_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.QUIT:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.MIX_QUIT_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.CREATE:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.MIX_CREATE_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.MODIFY:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.MIX_MODIFY_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.STATUS:
                                        case c.XHR.DESTROY:
                                            this._dispatchEvent(
                                                u.PullStreamEvent.MIX_STATUS_COMMAND,
                                                i, s, r || {});
                                    }
                                }
                            },
                        },
                        {
                            key: '_appendSkin',
                            value: function() {
                                document.getElementById(this._playerId) ||
                                (this.skin.append(this._config.peerUserId,
                                    c.LOG.PULL), f.default.debug('add subscribe video of ' +
                                    this._config.peerUserId, c.LOG.PULL));
                            },
                        },
                        {
                            key: '_removeSkin',
                            value: function() {
                                '' !== this._playerId &&
                                this.skin.remove(this._playerId,
                                    c.LOG.PULL), this._playerId = '';
                            },
                        },
                        {
                            key: '_destroySkin',
                            value: function() {
                                this._baseSkin && (this._baseSkin = void 0);
                            },
                        },
                        {
                            key: '_parsePullConfig',
                            value: function() {
                                if (this._config.url && this._parsePullUrl(
                                        this._config.url)) f.default.log('ready to pull ' +
                                    this._config.url, c.LOG.PULL); else {
                                    if (!this._config.channelId ||
                                        !this._config.peerUserId) return f.default.warn(
                                        'invalid pull params', c.LOG.PUSH), !1;
                                    this._config.roomId = this._config.channelId, this._config.streamName = l.Globals.appId +
                                        '_' + this._config.channelId + '/' +
                                        this._config.peerUserId, this._config.url = l.HOST.PROTOCOL_RTC +
                                        (this._config.host || l.Globals.host) +
                                        '/' +
                                        this._config.streamName, f.default.log('ready to pull ' +
                                        this._config.url, c.LOG.PULL);
                                }
                                return this._playerId = this._config.playerId = this._config.peerUserId +
                                    c.SUFFIX.VID_SUFFIX, void 0 ===
                                this._config.userRole &&
                                (this._config.userRole = 1), !0;
                            },
                        },
                        {
                            key: '_parsePullUrl',
                            value: function(e) {
                                var t = e.split('://');
                                if (t.length < 2) return !1;
                                var i = t[1].split('/');
                                return !(i.length < 4) &&
                                    (this._config.roomId = i[2], this._config.peerUserId = i[3], this._config.streamName = i[1] +
                                        '_' + i[2] + '/' + i[3], !0);
                            },
                        },
                        {
                            key: '_destroyDispatcher',
                            value: function() {
                                this._dispatcher &&
                                (this._dispatcher.stop(), this._dispatcher = void 0);
                            },
                        },
                        {
                            key: '_createDispatcher',
                            value: function() {
                                var e = this;
                                this._dispatcher ||
                                (this._dispatcher = new E.default(function(t) {
                                    e.quit('_createDispatcher') ||
                                    (t[c.RSP.CODE] !== c.RSP.SUCCESS
                                        ? e._dispatchEvent(
                                            u.PullStreamEvent.DISPATCH_ERROR,
                                            t[c.RSP.CODE], t[c.RSP.MESSAGE])
                                        : (l.Globals.rtcHosts = t[c.RSP.MESSAGE] ||
                                            [], e.puller.start(
                                            e._config)), e._destroyDispatcher());
                                })), this._dispatcher.start({
                                    roomId: this._config.roomId,
                                    userRole: this._config.userRole,
                                });
                            },
                        },
                        {
                            key: '_dispatchEvent',
                            value: function(e, t, i, r) {
                                if (!this.quit('_dispatchEvent')) {
                                    var s = '{}';
                                    r && (s = JSON.stringify(r)), f.default.log(e +
                                        ', ' + t + ', ' + i + ', ' + s,
                                        c.LOG.PULL), this.trigger(
                                        u.Event.PULL_STREAM_EVENT,
                                        {type: e, code: t, message: i, data: r});
                                }
                            },
                        },
                        {
                            key: 'skin',
                            get: function() {
                                return this._baseSkin ||
                                (this._baseSkin = new m.default(
                                    l.Globals.observer)), this._baseSkin;
                            },
                        },
                        {
                            key: 'puller',
                            get: function() {
                                return this._basePuller ||
                                (this._basePuller = new _.default, this._basePuller.listenTo(
                                    h.PullEvent.PULL_EVENT,
                                    this._onPullEventHandler.bind(
                                        this))), this._basePuller;
                            },
                        },
                        {
                            key: 'userId',
                            get: function() {return this._config.userId;},
                        },
                        {
                            key: 'peerUserId',
                            get: function() {return this._config.peerUserId;},
                        },
                        {
                            key: 'roomId',
                            get: function() {return this._config.roomId;},
                        }]), t;
                }(p.default);
            t.default = R;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(2), c = i(0), h = i(13), d = i(1), f = r(d),
                v = i(3), p = r(v), g = i(11), m = r(g), y = i(83), _ = r(y),
                S = i(22), E = r(S), R = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e.config = {}, e.isStop = !0, e.playerId = '', e.baseSkin = void 0, e.basePusher = void 0, e.dispatcher = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (f.default.debug('[' + e + '], service stop',
                                        c.LOG.PUSH), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.stop(), this.isStop = !1, this.config = e ||
                                    {}, this._parsePushConfig() &&
                                (this._appendSkin(), l.Globals.rtcHosts.length
                                    ? this.pusher.start(this.config)
                                    : this._createDispatcher());
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.isStop = !0, this._removeSkin(), this._destroyPusher(), this._destroyDispatcher(), this._destroySkin();},
                        },
                        {
                            key: 'stopAudio',
                            value: function() {
                                this.pusher && this.pusher.stopAudio();
                            },
                        },
                        {
                            key: 'stopVideo',
                            value: function() {
                                this.pusher && this.pusher.stopVideo();
                            },
                        },
                        {
                            key: 'getPushStatus',
                            value: function(e) {
                                this.pusher && this.pusher.getPeerStatus(e);
                            },
                        },
                        {
                            key: 'mixCreateCommand',
                            value: function(e) {
                                this.pusher && this.pusher.mixCreateCommand(e);
                            },
                        },
                        {
                            key: 'mixModifyCommand',
                            value: function(e) {
                                this.pusher && this.pusher.mixModifyCommand(e);
                            },
                        },
                        {
                            key: 'mixStatusCommand',
                            value: function(e) {
                                this.pusher && this.pusher.mixStatusCommand(e);
                            },
                        },
                        {
                            key: 'mixDestroyCommand',
                            value: function(e) {
                                this.pusher && this.pusher.mixDestroyCommand(e);
                            },
                        },
                        {
                            key: '_appendSkin',
                            value: function() {
                                document.getElementById(this.playerId) ||
                                (this.skin.append(this.config.userId,
                                    c.LOG.PUSH), f.default.debug('add publish video of ' +
                                    this.config.userId, c.LOG.PUSH));
                            },
                        },
                        {
                            key: '_removeSkin',
                            value: function() {
                                '' !== this.playerId &&
                                (this.skin.remove(this.playerId,
                                    c.LOG.PUSH), this.playerId = '');
                            },
                        },
                        {
                            key: '_destroySkin',
                            value: function() {
                                this.baseSkin && (this.baseSkin = void 0);
                            },
                        },
                        {
                            key: '_parsePushConfig',
                            value: function() {
                                if (this.config.url && this._parsePushUrl(
                                        this.config.url)) f.default.log('ready to push ' +
                                    this.config.url, c.LOG.PUSH); else {
                                    if (!this.config.channelId ||
                                        !this.config.userId) return f.default.warn(
                                        'invalid push params', c.LOG.PUSH), !1;
                                    this.config.roomId = this.config.channelId, this.config.streamName = l.Globals.appId +
                                        '_' + this.config.channelId + '/' +
                                        this.config.userId, this.config.url = l.HOST.PROTOCOL_RTC +
                                        (this.config.host || l.Globals.host) + '/' +
                                        this.config.streamName, f.default.log('ready to push ' +
                                        this.config.url, c.LOG.PUSH);
                                }
                                return this.playerId = this.config.playerId = this.config.userId +
                                    c.SUFFIX.VID_SUFFIX, void 0 ===
                                this.config.userRole &&
                                (this.config.userRole = 1), this.config.camConfig ||
                                (this.config.camConfig = {audio: !0, video: !0}), !0;
                            },
                        },
                        {
                            key: '_parsePushUrl',
                            value: function(e) {
                                var t = e.split('://');
                                if (t.length < 2) return !1;
                                var i = t[1].split('/');
                                return !(i.length < 4) &&
                                    (this.config.roomId = i[2], this.config.userId = i[3], this.config.streamName = i[1] +
                                        '_' + i[2] + '/' + i[3], !0);
                            },
                        },
                        {
                            key: '_destroyDispatcher',
                            value: function() {
                                this.dispatcher &&
                                (this.dispatcher.stop(), this.dispatcher = void 0);
                            },
                        },
                        {
                            key: '_createDispatcher',
                            value: function() {
                                var e = this;
                                this.dispatcher || (this.dispatcher = new E.default(
                                    function(t) {
                                        e.quit('_createDispatcher') ||
                                        (t[c.RSP.CODE] !== c.RSP.SUCCESS
                                            ? e._dispatchEvent(
                                                u.PushStreamEvent.DISPATCH_ERROR,
                                                t[c.RSP.CODE], t[c.RSP.MESSAGE])
                                            : (l.Globals.rtcHosts = t[c.RSP.MESSAGE] ||
                                                [], e.pusher.start(
                                                e.config)), e._destroyDispatcher());
                                    })), this.dispatcher.start({
                                    roomId: this.config.roomId,
                                    userRole: this.config.userRole,
                                });
                            },
                        },
                        {
                            key: '_destroyPusher',
                            value: function() {
                                this.basePusher &&
                                (this.basePusher.removeToAll(), this.basePusher.stop(), this.basePusher = void 0);
                            },
                        },
                        {
                            key: '_onPushEventHandler',
                            value: function(e) {
                                if (e && !this.quit('_onPushEventHandler')) {
                                    var t = e[c.RSP.TYPE], i = e[c.RSP.CODE],
                                        r = e[c.RSP.DATA], s = e[c.RSP.MESSAGE];
                                    switch (t) {
                                        case h.PushMessage.PLAY_METADATA:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.METADATA, i,
                                                s, r || {});
                                            break;
                                        case h.PushMessage.PLAY_ERROR:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.VIDEO_ERROR, i,
                                                s, r || {});
                                            break;
                                        case h.PushMessage.CAMERA_ERROR:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.CAMERA_ERROR, i,
                                                s, r || {});
                                            break;
                                        case h.PushMessage.RTC_SERVER_ERROR:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.SERVER_ERROR, i,
                                                s, r || {});
                                            break;
                                        case h.PushMessage.RTC_SERVER_SUCCESS:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.SERVER_SUCCESS, i,
                                                s, r || {});
                                            break;
                                        case h.PushMessage.STREAM_TRACK:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.STREAMTRACK_CHANGE,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.MIX:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_COMMAND, i,
                                                s, r || {});
                                            break;
                                        case c.XHR.JOIN:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_JOIN_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.QUIT:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_QUIT_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.CREATE:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_CREATE_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.MODIFY:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_MODIFY_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.STATUS:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_STATUS_COMMAND,
                                                i, s, r || {});
                                            break;
                                        case c.XHR.DESTROY:
                                            this._dispatchEvent(
                                                u.PushStreamEvent.MIX_DESTROY_COMMAND,
                                                i, s, r || {});
                                    }
                                }
                            },
                        },
                        {
                            key: '_dispatchEvent',
                            value: function(e, t, i, r) {
                                if (!this.quit('_dispatchEvent')) {
                                    var s = '{}';
                                    r && (s = JSON.stringify(r)), f.default.log(e +
                                        ', ' + t + ', ' + i + ', ' + s,
                                        c.LOG.PUSH), this.trigger(
                                        u.Event.PUSH_STREAM_EVENT,
                                        {type: e, code: t, message: i, data: r});
                                }
                            },
                        },
                        {
                            key: 'skin',
                            get: function() {
                                return this.baseSkin ||
                                (this.baseSkin = new m.default(
                                    l.Globals.observer)), this.baseSkin;
                            },
                        },
                        {
                            key: 'pusher',
                            get: function() {
                                return this.basePusher ||
                                (this.basePusher = new _.default, this.basePusher.listenTo(
                                    h.PushEvent.PUSH_EVENT,
                                    this._onPushEventHandler.bind(
                                        this))), this.basePusher;
                            },
                        },
                        {
                            key: 'userId',
                            get: function() {return this.config.userId || '';},
                        }]), t;
                }(p.default);
            t.default = R;
        }, function(e, t, i) {
            'use strict';
            !function() {
                var t = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                    i = {
                        rotl: function(e, t) {return e << t | e >>> 32 - t;},
                        rotr: function(e, t) {return e << 32 - t | e >>> t;},
                        endian: function(e) {
                            if (e.constructor == Number) return 16711935 &
                                i.rotl(e, 8) | 4278255360 & i.rotl(e, 24);
                            for (var t = 0; t < e.length; t++) e[t] = i.endian(
                                e[t]);
                            return e;
                        },
                        randomBytes: function(e) {
                            for (var t = []; e > 0; e--) t.push(
                                Math.floor(256 * Math.random()));
                            return t;
                        },
                        bytesToWords: function(e) {
                            for (var t = [], i = 0, r = 0; i <
                            e.length; i++, r += 8) t[r >>> 5] |= e[i] << 24 -
                                r % 32;
                            return t;
                        },
                        wordsToBytes: function(e) {
                            for (var t = [], i = 0; i <
                            32 * e.length; i += 8) t.push(e[i >>> 5] >>> 24 -
                                i % 32 & 255);
                            return t;
                        },
                        bytesToHex: function(e) {
                            for (var t = [], i = 0; i < e.length; i++) t.push(
                                (e[i] >>> 4).toString(16)), t.push(
                                (15 & e[i]).toString(16));
                            return t.join('');
                        },
                        hexToBytes: function(e) {
                            for (var t = [], i = 0; i <
                            e.length; i += 2) t.push(
                                parseInt(e.substr(i, 2), 16));
                            return t;
                        },
                        bytesToBase64: function(e) {
                            for (var i = [], r = 0; r <
                            e.length; r += 3) for (var s = e[r] << 16 |
                                e[r + 1] << 8 | e[r + 2], n = 0; n < 4; n++) 8 *
                            r + 6 * n <= 8 * e.length
                                ? i.push(t.charAt(s >>> 6 * (3 - n) & 63))
                                : i.push('=');
                            return i.join('');
                        },
                        base64ToBytes: function(e) {
                            e = e.replace(/[^A-Z0-9+\/]/gi, '');
                            for (var i = [], r = 0, s = 0; r <
                            e.length; s = ++r % 4) 0 != s &&
                            i.push((t.indexOf(e.charAt(r - 1)) &
                                Math.pow(2, -2 * s + 8) - 1) << 2 * s |
                                t.indexOf(e.charAt(r)) >>> 6 - 2 * s);
                            return i;
                        },
                    };
                e.exports = i;
            }();
        }, function(e, t, i) {
            'use strict';
            !function(e) {
                function t(e) {
                    if ('string' != typeof e &&
                        (e = String(e)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(
                            e)) throw new TypeError(
                        'Invalid character in header field name');
                    return e.toLowerCase();
                }
                
                function i(e) {
                    return 'string' != typeof e && (e = String(e)), e;
                }
                
                function r(e) {
                    var t = {
                        next: function() {
                            var t = e.shift();
                            return {done: void 0 === t, value: t};
                        },
                    };
                    return m.iterable &&
                    (t[Symbol.iterator] = function() {return t;}), t;
                }
                
                function s(e) {
                    this.map = {}, e instanceof s
                        ? e.forEach(function(e, t) {this.append(t, e);}, this)
                        : Array.isArray(e)
                            ? e.forEach(function(e) {this.append(e[0], e[1]);},
                                this)
                            : e && Object.getOwnPropertyNames(e).
                            forEach(function(t) {this.append(t, e[t]);}, this);
                }
                
                function n(e) {
                    if (e.bodyUsed) return Promise.reject(
                        new TypeError('Already read'));
                    e.bodyUsed = !0;
                }
                
                function o(e) {
                    return new Promise(function(t, i) {
                        e.onload = function() {
                            t(e.result);
                        }, e.onerror = function() {i(e.error);};
                    });
                }
                
                function a(e) {
                    var t = new FileReader, i = o(t);
                    return t.readAsArrayBuffer(e), i;
                }
                
                function u(e) {
                    var t = new FileReader, i = o(t);
                    return t.readAsText(e), i;
                }
                
                function l(e) {
                    for (var t = new Uint8Array(e), i = new Array(
                        t.length), r = 0; r <
                         t.length; r++) i[r] = String.fromCharCode(t[r]);
                    return i.join('');
                }
                
                function c(e) {
                    if (e.slice) return e.slice(0);
                    var t = new Uint8Array(e.byteLength);
                    return t.set(new Uint8Array(e)), t.buffer;
                }
                
                function h() {
                    return this.bodyUsed = !1, this._initBody = function(e) {
                        if (this._bodyInit = e, e) if ('string' ==
                            typeof e) this._bodyText = e; else if (m.blob &&
                            Blob.prototype.isPrototypeOf(
                                e)) this._bodyBlob = e; else if (m.formData &&
                            FormData.prototype.isPrototypeOf(
                                e)) this._bodyFormData = e; else if (m.searchParams &&
                            URLSearchParams.prototype.isPrototypeOf(
                                e)) this._bodyText = e.toString(); else if (m.arrayBuffer &&
                            m.blob && _(e)) this._bodyArrayBuffer = c(
                            e.buffer), this._bodyInit = new Blob(
                            [this._bodyArrayBuffer]); else {
                            if (!m.arrayBuffer ||
                                !ArrayBuffer.prototype.isPrototypeOf(e) &&
                                !S(e)) throw new Error(
                                'unsupported BodyInit type');
                            this._bodyArrayBuffer = c(e);
                        } else this._bodyText = '';
                        this.headers.get('content-type') ||
                        ('string' == typeof e ? this.headers.set('content-type',
                            'text/plain;charset=UTF-8') : this._bodyBlob &&
                        this._bodyBlob.type ? this.headers.set('content-type',
                            this._bodyBlob.type) : m.searchParams &&
                            URLSearchParams.prototype.isPrototypeOf(e) &&
                            this.headers.set('content-type',
                                'application/x-www-form-urlencoded;charset=UTF-8'));
                    }, m.blob && (this.blob = function() {
                        var e = n(this);
                        if (e) return e;
                        if (this._bodyBlob) return Promise.resolve(
                            this._bodyBlob);
                        if (this._bodyArrayBuffer) return Promise.resolve(
                            new Blob([this._bodyArrayBuffer]));
                        if (this._bodyFormData) throw new Error(
                            'could not read FormData body as blob');
                        return Promise.resolve(new Blob([this._bodyText]));
                    }, this.arrayBuffer = function() {
                        return this._bodyArrayBuffer
                            ? n(this) || Promise.resolve(this._bodyArrayBuffer)
                            : this.blob().
                                then(a);
                    }), this.text = function() {
                        var e = n(this);
                        if (e) return e;
                        if (this._bodyBlob) return u(this._bodyBlob);
                        if (this._bodyArrayBuffer) return Promise.resolve(
                            l(this._bodyArrayBuffer));
                        if (this._bodyFormData) throw new Error(
                            'could not read FormData body as text');
                        return Promise.resolve(this._bodyText);
                    }, m.formData && (this.formData = function() {
                        return this.text().
                            then(v);
                    }), this.json = function() {
                        return this.text().
                            then(JSON.parse);
                    }, this;
                }
                
                function d(e) {
                    var t = e.toUpperCase();
                    return E.indexOf(t) > -1 ? t : e;
                }
                
                function f(e, t) {
                    t = t || {};
                    var i = t.body;
                    if (e instanceof f) {
                        if (e.bodyUsed) throw new TypeError('Already read');
                        this.url = e.url, this.credentials = e.credentials, t.headers ||
                        (this.headers = new s(
                            e.headers)), this.method = e.method, this.mode = e.mode, i ||
                        null == e._bodyInit ||
                        (i = e._bodyInit, e.bodyUsed = !0);
                    } else this.url = String(e);
                    if (this.credentials = t.credentials || this.credentials ||
                            'omit', !t.headers && this.headers ||
                        (this.headers = new s(
                            t.headers)), this.method = d(t.method ||
                            this.method || 'GET'), this.mode = t.mode ||
                            this.mode || null, this.referrer = null, ('GET' ===
                            this.method || 'HEAD' === this.method) &&
                        i) throw new TypeError(
                        'Body not allowed for GET or HEAD requests');
                    this._initBody(i);
                }
                
                function v(e) {
                    var t = new FormData;
                    return e.trim().
                        split('&').
                        forEach(function(e) {
                            if (e) {
                                var i = e.split('='),
                                    r = i.shift().replace(/\+/g, ' '),
                                    s = i.join('=').replace(/\+/g, ' ');
                                t.append(decodeURIComponent(r),
                                    decodeURIComponent(s));
                            }
                        }), t;
                }
                
                function p(e) {
                    var t = new s;
                    return e.split(/\r?\n/).
                        forEach(function(e) {
                            var i = e.split(':'), r = i.shift().trim();
                            if (r) {
                                var s = i.join(':').trim();
                                t.append(r, s);
                            }
                        }), t;
                }
                
                function g(e, t) {
                    t ||
                    (t = {}), this.type = 'default', this.status = 'status' in t
                        ? t.status
                        : 200, this.ok = this.status >= 200 && this.status <
                        300, this.statusText = 'statusText' in t
                        ? t.statusText
                        : 'OK', this.headers = new s(
                        t.headers), this.url = t.url || '', this._initBody(e);
                }
                
                if (!e.fetch) {
                    var m = {
                        searchParams: 'URLSearchParams' in e,
                        iterable: 'Symbol' in e && 'iterator' in Symbol,
                        blob: 'FileReader' in e && 'Blob' in e &&
                        function() {try {return new Blob, !0;} catch (e) {return !1;}}(),
                        formData: 'FormData' in e,
                        arrayBuffer: 'ArrayBuffer' in e,
                    };
                    if (m.arrayBuffer) var y = [
                        '[object Int8Array]',
                        '[object Uint8Array]',
                        '[object Uint8ClampedArray]',
                        '[object Int16Array]',
                        '[object Uint16Array]',
                        '[object Int32Array]',
                        '[object Uint32Array]',
                        '[object Float32Array]',
                        '[object Float64Array]'], _ = function(e) {
                        return e && DataView.prototype.isPrototypeOf(e);
                    }, S = ArrayBuffer.isView || function(e) {
                        return e &&
                            y.indexOf(Object.prototype.toString.call(e)) > -1;
                    };
                    s.prototype.append = function(e, r) {
                        e = t(e), r = i(r);
                        var s = this.map[e];
                        this.map[e] = s ? s + ',' + r : r;
                    }, s.prototype.delete = function(e) {
                        delete this.map[t(e)];
                    }, s.prototype.get = function(e) {
                        return e = t(e), this.has(e)
                            ? this.map[e]
                            : null;
                    }, s.prototype.has = function(e) {
                        return this.map.hasOwnProperty(t(e));
                    }, s.prototype.set = function(e, r) {
                        this.map[t(e)] = i(r);
                    }, s.prototype.forEach = function(
                        e, t) {
                        for (var i in this.map) this.map.hasOwnProperty(i) &&
                        e.call(t, this.map[i], i, this);
                    }, s.prototype.keys = function() {
                        var e = [];
                        return this.forEach(function(t, i) {e.push(i);}), r(e);
                    }, s.prototype.values = function() {
                        var e = [];
                        return this.forEach(function(t) {e.push(t);}), r(e);
                    }, s.prototype.entries = function() {
                        var e = [];
                        return this.forEach(function(t, i) {e.push([i, t]);}), r(
                            e);
                    }, m.iterable &&
                    (s.prototype[Symbol.iterator] = s.prototype.entries);
                    var E = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
                    f.prototype.clone = function() {
                        return new f(this, {body: this._bodyInit});
                    }, h.call(f.prototype), h.call(
                        g.prototype), g.prototype.clone = function() {
                        return new g(this._bodyInit, {
                            status: this.status,
                            statusText: this.statusText,
                            headers: new s(this.headers),
                            url: this.url,
                        });
                    }, g.error = function() {
                        var e = new g(null, {status: 0, statusText: ''});
                        return e.type = 'error', e;
                    };
                    var R = [301, 302, 303, 307, 308];
                    g.redirect = function(e, t) {
                        if (-1 === R.indexOf(t)) throw new RangeError(
                            'Invalid status code');
                        return new g(null, {status: t, headers: {location: e}});
                    }, e.Headers = s, e.Request = f, e.Response = g, e.fetch = function(
                        e, t) {
                        return new Promise(function(i, r) {
                            var s = new f(e, t), n = new XMLHttpRequest;
                            n.onload = function() {
                                var e = {
                                    status: n.status,
                                    statusText: n.statusText,
                                    headers: p(n.getAllResponseHeaders() || ''),
                                };
                                e.url = 'responseURL' in n
                                    ? n.responseURL
                                    : e.headers.get('X-Request-URL');
                                var t = 'response' in n
                                    ? n.response
                                    : n.responseText;
                                i(new g(t, e));
                            }, n.onerror = function() {
                                r(new TypeError('Network request failed'));
                            }, n.ontimeout = function() {
                                r(new TypeError('Network request failed'));
                            }, n.open(s.method, s.url, !0), 'include' ===
                            s.credentials &&
                            (n.withCredentials = !0), 'responseType' in n &&
                            m.blob &&
                            (n.responseType = 'blob'), s.headers.forEach(
                                function(e, t) {
                                    n.setRequestHeader(t, e);
                                }), n.send(
                                void 0 === s._bodyInit ? null : s._bodyInit);
                        });
                    }, e.fetch.polyfill = !0;
                }
            }('undefined' != typeof self ? self : void 0);
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(2), u = i(1), l = r(u), c = i(29), h = i(14),
                d = r(h), f = function() {
                    function e(t) {
                        s(this,
                            e), this.callback = t, this.config = {}, this.reqOptions = {}, this.rspOptions = {
                            code: -1,
                            message: '',
                        }, this.isStop = !0, this.retryCount = 0, this.retryTimer = void 0, this.SCENE = 1, this.RETRY_CNT_LIMIT = 3, this.RETRY_TIMER_TIME = 5e3;
                    }
                    
                    return n(e, [
                        {
                            key: 'start',
                            value: function(e) {
                                this.isStop = !1, this.parseConfig(e ||
                                    {}), this.assembleDispatchUrl(), this.sendPostRequest(
                                    this.reqOptions, this.dispatchDone.bind(this),
                                    this.dispatchFailed.bind(this));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.destroyCheckTimer(), this.xhrLoad &&
                                (this.xhrLoad.stop(), this.xhrLoad = void 0);
                            },
                        },
                        {
                            key: 'destroyCheckTimer',
                            value: function() {
                                this.retryTimer && (window.clearTimeout(
                                    this.retryTimer), delete this.retryTimer, this.retryTimer = void 0);
                            },
                        },
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (l.default.debug('[' + e + '], service stop',
                                        o.LOG.DISPATCH), this.stop(), !0);
                            },
                        },
                        {
                            key: 'parseConfig',
                            value: function(e) {
                                this.reqOptions = {};
                                var t = {
                                    command: o.HTTP.CASCADE_DISPATCH,
                                    param: {
                                        userType: 1,
                                        host: a.Globals.host,
                                        room: a.Globals.appId + '_' + e.roomId,
                                    },
                                };
                                void 0 !== e.userRole &&
                                (t.param.userType = parseInt(
                                    e.userRole)), void 0 !== e.interflow &&
                                (t.param.interflow = parseInt(
                                    e.interflow)), this.reqOptions.request = t;
                            },
                        },
                        {
                            key: 'assembleDispatchUrl',
                            value: function() {
                                var e = void 0, t = o.HTTP.URL_CASCADE_DISPATCH;
                                e = '' === a.Globals.dispatchTestRTCHost
                                    ? a.HOST.DISPATCH_RTC_HOST
                                    : a.Globals.dispatchTestRTCHost, this.reqOptions.url = a.HOST.PROTOCOL +
                                    e +
                                    '/', this.reqOptions.url += a.Globals.userId +
                                    '/', this.reqOptions.url += a.Globals.appId +
                                    '/', this.reqOptions.url += a.Globals.version +
                                    '/', this.reqOptions.url += this.SCENE +
                                    '/', this.reqOptions.url += t +
                                    '/js?', this.reqOptions.url += 'r=' +
                                    (new Date).getTime().
                                        toString(), this.reqOptions.url += '&k=' +
                                    a.Globals.token;
                            },
                        },
                        {
                            key: 'updateResponse',
                            value: function(e,
                                            t) {this.rspOptions[o.RSP.CODE] = e, this.rspOptions[o.RSP.MESSAGE] = t;},
                        },
                        {
                            key: 'dispatchDone',
                            value: function(e) {
                                if (!this.quit('dispatchDone')) {
                                    if (!e) return void this.retryDispatch();
                                    var t = c.BLOWFISH.decrypt(e);
                                    l.default.log('response: ' + t, o.LOG.DISPATCH);
                                    var i = JSON.parse(t);
                                    if (0 !== parseInt(
                                            i[o.RSP.STATUS])) return void this.retryDispatch();
                                    var r = i[o.RSP.IP_LIST];
                                    if (!r ||
                                        !r.length) return void this.retryDispatch();
                                    this.retryCount = 0, this.destroyCheckTimer(), this.updateResponse(
                                        o.RSP.SUCCESS, r), this.callback &&
                                    this.callback(this.rspOptions);
                                }
                            },
                        },
                        {
                            key: 'dispatchFailed',
                            value: function(e) {
                                if (!this.quit('dispatchFailed')) {
                                    if (e) {
                                        var t = e[o.RSP.STATUS] || -1,
                                            i = e[o.HTTP.RESPONSE_KEY_RESPONSE_TEXT] ||
                                                '';
                                        i = c.BLOWFISH.decrypt(
                                            i), l.default.warn('[' + t + ']' + i,
                                            o.LOG.DISPATCH);
                                    }
                                    this.retryDispatch();
                                }
                            },
                        },
                        {
                            key: 'retryDispatch',
                            value: function() {
                                if (this.retryCount <
                                    this.RETRY_CNT_LIMIT) this.retryCount++, this.destroyCheckTimer(), this.retryTimer = window.setTimeout(
                                    this.retryDispatchHandler.bind(this),
                                    this.RETRY_TIMER_TIME); else {
                                    this.stop();
                                    var e = 'retry dispatch limit';
                                    l.default.warn(e,
                                        o.LOG.DISPATCH), this.updateResponse(
                                        o.RSP.ERROR, e), this.callback &&
                                    this.callback(this.rspOptions);
                                }
                            },
                        },
                        {
                            key: 'retryDispatchHandler',
                            value: function() {
                                this.sendPostRequest(this.reqOptions,
                                    this.dispatchDone.bind(this),
                                    this.dispatchFailed.bind(this));
                            },
                        },
                        {
                            key: 'sendPostRequest',
                            value: function(e, t, i) {
                                try {
                                    var r = e.url, s = e.request,
                                        n = JSON.stringify(s);
                                    l.default.log(n, o.LOG.DISPATCH);
                                    var a = c.BLOWFISH.encrypt(n);
                                    this.sendXHRRequest(r, a, t, i);
                                } catch (e) {i && i(e.toString());}
                            },
                        },
                        {
                            key: 'sendXHRRequest',
                            value: function(e, t, i, r) {
                                this.xhrLoad || (this.xhrLoad = new d.default(i,
                                    r)), this.xhrLoad.start(e, t);
                            },
                        }]), e;
                }();
            t.default = f;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), o = i(0), a = i(2);
            i(21);
            var u = i(6), l = r(u), c = i(1), h = r(c), d = function() {
                function e() {s(this, e), this.config = {};}
                
                return n(e, [
                    {
                        key: 'getQuerys',
                        value: function() {
                            var e = {
                                command: o.HTTP.DISPATCH,
                                host: a.Globals.host,
                                token: a.Globals.token,
                                appId: a.Globals.appId,
                                userId: a.Globals.userId,
                                scene: a.Globals.impScene,
                                deviceId: a.Globals.deviceId,
                                userRole: a.Globals.permissionIndex,
                            };
                            e.roomId = this.config.roomId, e.param = {}, a.Globals.isPermission ||
                            (e.userRole = this.config.userRole);
                            var t = a.HOST.PROTOCOL;
                            return '' === a.Globals.dispatchTestSSHost
                                ? t += a.HOST.DISPATCH_SS_HOST +
                                    '/sls/room/dispatch'
                                : t += a.Globals.dispatchTestSSHost +
                                    '/sls/room/dispatch', {url: t, data: e};
                        },
                    },
                    {
                        key: 'dispatch',
                        value: function(e) {
                            var t = this;
                            return this.config = e || {}, new Promise(
                                function(e, i) {
                                    var r = t.getQuerys(),
                                        s = l.default.querys(r);
                                    fetch(s.url, s.params).
                                        then(function(e) {
                                            if (e.status >= 200 &&
                                                e.status < 300) return e;
                                            var t = new Error(e.statusText);
                                            throw t.response = e, t.status = e.status, t;
                                        }).
                                        then(function(e) {return e.text();}).
                                        then(function(t) {
                                            h.default.log(t, o.LOG.ROOM);
                                            var r = JSON.parse(t) || {},
                                                s = r[o.RSP.MSG],
                                                n = parseInt(r[o.RSP.STATUS]);
                                            0 === n ? e(r[o.RSP.HOST_NAME] ||
                                                '') : i({status: n, message: s});
                                        }).
                                        catch(function(e) {i(e);});
                                });
                        },
                    }]), e;
            }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(2), c = i(1), h = r(c), d = i(8), f = i(3),
                v = r(f), p = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e.url = '', e.config = {}, e.seqArray = [], e.socket = void 0, e.activeClose = !1, e.heartCount = 1, e.lastPongTime = -1, e.heartTimer = void 0, e.ARRAY_LEN = 29, e.PONG_TIMEOUT = 6e4, e.HEARTBEAT_PERIOD = 8, e.HEARTBEAT_TIMER_TIME = 15e3, e.socketId = Math.random().
                            toFixed(4).
                            substring(2), e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                void 0 !== arguments[1] ? arguments[1] : {};
                                this.activeClose = !1, this.socket ||
                                (this.url = e, this.config = t, h.default.debug(e,
                                    u.LOG.ROOM), this.createConnect());
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.activeClose = !0, this.destroyHeartbeatTimer(), this.destroySocket(), this.seqArray.length &&
                                (this.seqArray.splice(), this.seqArray = []);
                            },
                        },
                        {
                            key: 'destroySocket',
                            value: function() {
                                this.socket &&
                                (this.socket.close(), this.socket = void 0), this.heartCount = 1, this.lastPongTime = -1;
                            },
                        },
                        {
                            key: 'createConnect',
                            value: function() {
                                this.socket || (this.socket = new WebSocket(
                                    this.url), this.socket.onopen = this.onOpenHandler.bind(
                                    this), this.socket.onerror = this.onErrorHandler.bind(
                                    this), this.socket.onclose = this.onCloseHandler.bind(
                                    this), this.socket.onmessage = this.onMessageHandler.bind(
                                    this));
                            },
                        },
                        {
                            key: 'reCreateConnect',
                            value: function() {
                                this.stop(), this.dispatchEvent(
                                    d.RoomEvent.CONNECT_RECREATE_EVENT);
                            },
                        },
                        {
                            key: 'onOpenHandler',
                            value: function() {
                                this.lastPongTime = -1, this.activeClose = !1, h.default.log('websocket.onopen[' +
                                    this.socketId + ']',
                                    u.LOG.ROOM), this.heartCount = 0, this.sendHeartbeatPackage(
                                    !0);
                            },
                        },
                        {
                            key: 'onErrorHandler',
                            value: function(e) {
                                e && e.currentTarget &&
                                h.default.warn('socket.onerror [' + this.socketId +
                                    '][' + e.currentTarget.readyState + ']',
                                    u.LOG.ROOM);
                            },
                        },
                        {
                            key: 'onCloseHandler',
                            value: function() {
                                this.destroyHeartbeatTimer(), this.activeClose
                                    ? (this.destroySocket(), h.default.log('websocket.onclose activeClose[true][' +
                                        this.socketId + ']', u.LOG.ROOM))
                                    : (this.activeClose = !0, this.destroySocket(), h.default.warn('websocket.onclose activeClose[false][' +
                                        this.socketId + ']',
                                        u.LOG.ROOM), this.reCreateConnect());
                            },
                        },
                        {
                            key: 'onMessageHandler',
                            value: function(e) {
                                if (e && e.data) {
                                    var t = e.data, i = JSON.parse(t) || {};
                                    if ((i[u.RSP.COMMAND] || '') !== u.HTTP.PONG) {
                                        h.default.log('onmessage recv: ' + t,
                                            u.LOG.ROOM);
                                        var r = parseInt(i[u.RSP.SEQ]);
                                        this.ackMessage(r), this.isMsgSeqDuplicate(
                                            r)
                                            ? h.default.log('duplicate [server:' +
                                                r + '][' +
                                                this.seqArray.toString() + ']',
                                                u.LOG.ROOM)
                                            : this.dispatchEvent(
                                                d.RoomEvent.CONNECT_MESSAGE_EVENT,
                                                'message', i);
                                    } else this.ackPongMessage(i);
                                }
                            },
                        },
                        {
                            key: 'destroyHeartbeatTimer',
                            value: function() {
                                this.heartTimer && (window.clearTimeout(
                                    this.heartTimer), this.heartTimer = void 0);
                            },
                        },
                        {
                            key: 'createHeartbeatTimer',
                            value: function() {
                                this.destroyHeartbeatTimer(), this.heartTimer = window.setTimeout(
                                    this.onHeartbeatTimerHandler.bind(this),
                                    this.HEARTBEAT_TIMER_TIME);
                            },
                        },
                        {
                            key: 'onHeartbeatTimerHandler',
                            value: function() {this.sendHeartbeatPackage();},
                        },
                        {
                            key: 'sendHeartbeatPackage',
                            value: function() {
                                var e = {
                                    command: u.HTTP.PING,
                                    host: l.Globals.host,
                                    appId: l.Globals.appId,
                                    userId: this.config.userId,
                                    scene: l.Globals.impScene,
                                    userRole: l.Globals.permissionIndex,
                                };
                                if (e.roomId = this.config.roomId, l.Globals.isPermission ||
                                    (e.userRole = this.config.userRole), (this.heartCount >
                                        this.HEARTBEAT_PERIOD || this.heartCount %
                                        this.HEARTBEAT_PERIOD == 0) &&
                                    (this.heartCount = 0, h.default.log('sendHeartbeatPackage refresh[' +
                                        this.socketId + ']',
                                        u.LOG.ROOM)), this.heartCount++, this.socket) {
                                    var t = JSON.stringify(e);
                                    1 === this.heartCount &&
                                    h.default.log(t, u.LOG.ROOM), this.socket.send(
                                        t);
                                }
                                this.createHeartbeatTimer();
                            },
                        },
                        {
                            key: 'ackMessage',
                            value: function(e) {
                                var t = {
                                    msgSeq: e,
                                    command: u.HTTP.MSG_ANSWER,
                                    host: l.Globals.host,
                                    appId: l.Globals.appId,
                                    userId: this.config.userId,
                                    scene: l.Globals.impScene,
                                }, i = JSON.stringify(t);
                                this.socket &&
                                (h.default.log('websocket.onmessage send: ' + i,
                                    u.LOG.ROOM), this.socket.send(i));
                            },
                        },
                        {
                            key: 'isMsgSeqDuplicate',
                            value: function(e) {
                                if (isNaN(e)) return h.default.warn(
                                    'message seq is unvalid', u.LOG.ROOM), !0;
                                var t = this.seqArray.length;
                                if (!t) return this.seqArray.push(e), !1;
                                var i = !1;
                                if (this.seqArray.indexOf) -1 !==
                                this.seqArray.indexOf(e) &&
                                (i = !0); else for (var r = 0; r <
                                t; r++) if (this.seqArray[r] === e) {
                                    i = !0;
                                    break;
                                }
                                return !!i || (t > this.ARRAY_LEN &&
                                this.seqArray.shift(), this.seqArray.push(e), !1);
                            },
                        },
                        {
                            key: 'ackPongMessage',
                            value: function(e) {
                                if (-1 ===
                                    this.lastPongTime) this.lastPongTime = (new Date).getTime(); else {
                                    var t = (new Date).getTime(),
                                        i = t - this.lastPongTime;
                                    if (i > this.PONG_TIMEOUT) {
                                        var r = 'pong timeout[cur:' + t + '][pre:';
                                        return r += this.lastPongTime + '][diff:' +
                                            i + ']', h.default.warn(r,
                                            u.LOG.ROOM), this.lastPongTime = t, void this.pongTimeout();
                                    }
                                    this.lastPongTime = t;
                                }
                                var s = e[u.RSP.MSG] || '',
                                    n = parseInt(e[u.RSP.STATUS]);
                                0 !== n &&
                                (this.stop(), h.default.warn('pong [' + n + '][' +
                                    s + ']', u.LOG.ROOM), this.dispatchEvent(
                                    d.RoomEvent.CONNECT_PONG_ERROR_EVENT, s,
                                    {code: n, message: s}));
                            },
                        },
                        {
                            key: 'pongTimeout',
                            value: function() {
                                this.activeClose = !0, h.default.warn(
                                    'close connection as pong timeout',
                                    u.LOG.ROOM), this.destroySocket(), this.reCreateConnect();
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                void 0 !== arguments[1]
                                    ? arguments[1]
                                    : '', i = arguments.length > 2 &&
                                void 0 !== arguments[2]
                                    ? arguments[2]
                                    : {};
                                this.trigger(d.RoomEvent.CONNECT_EVENT,
                                    {type: e, message: t, data: i});
                            },
                        }]), t;
                }(v.default);
            t.default = p;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(0), o = i(2), a = i(6),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e() {
                        r(this, e), this.url = '', this.host = '';
                    }
                    
                    return s(e, [
                        {
                            key: 'start',
                            value: function(e) {
                                this.host = e || '', this.url = o.HOST.PROTOCOL +
                                    this.host + '/sls/room';
                            },
                        },
                        {
                            key: 'commonOptions',
                            value: function() {
                                var e = {
                                    host: o.Globals.host,
                                    token: o.Globals.token,
                                    appId: o.Globals.appId,
                                    scene: o.Globals.impScene,
                                    deviceId: o.Globals.deviceId,
                                };
                                return o.Globals.isPermission &&
                                (e.ticket = o.Globals.ticket), e;
                            },
                        },
                        {
                            key: 'createRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.CREATE_ROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {}, s.param.pushUrl = o.HOST.PROTOCOL_RTC +
                                        o.Globals.host + '/' + o.Globals.appId +
                                        '/' + s.roomId + '/' +
                                        s.userId, s.param.pullUrl = s.param.pushUrl, o.Globals.isPermission ||
                                    (s.userRole = e.userRole), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'joinRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.JOIN_ROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        joinRoomId: e.roomId || '',
                                    }, s.param.pushUrl = o.HOST.PROTOCOL_RTC +
                                        o.Globals.host + '/' + o.Globals.appId +
                                        '/' + s.roomId + '/' +
                                        s.userId, s.param.pullUrl = s.param.pushUrl, o.Globals.isPermission ||
                                    (s.userRole = e.userRole), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'quitRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.QUIT_ROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        quitRoomId: e.roomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.userRole), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'destroyRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.DESTROY_ROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {}, o.Globals.isPermission ||
                                    (s.userRole = e.userRole), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'fullListRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.FULL_LIST, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {}, o.Globals.isPermission ||
                                    (s.userRole = e.userRole), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function s(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function n(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var o = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), a = i(3),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function(e) {
                    function t() {
                        return r(this, t), s(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                    }
                    
                    return n(t, e), o(t, [
                        {
                            key: 'start',
                            value: function(e) {},
                        },
                        {
                            key: 'stop',
                            value: function() {},
                        },
                        {
                            key: 'createRoom',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                            },
                        },
                        {
                            key: 'joinRoom',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                            },
                        },
                        {
                            key: 'quitRoom',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                            },
                        },
                        {
                            key: 'destroyRoom',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                            },
                        },
                        {
                            key: 'fullListRoom',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                            },
                        },
                        {
                            key: 'createVRoom',
                            value: function(e) {},
                        },
                        {
                            key: 'joinVRoom',
                            value: function(e) {},
                        },
                        {
                            key: 'quitVRoom',
                            value: function(e) {},
                        },
                        {
                            key: 'destroyVRoom',
                            value: function(e) {},
                        },
                        {
                            key: 'fullVListRoom',
                            value: function(e) {},
                        },
                        {
                            key: 'inWhichVRoom',
                            value: function(e) {},
                        }]), t;
                }(u.default);
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(8), c = i(1), h = r(c), d = i(69), f = r(d),
                v = i(3), p = r(v), g = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e._config = {}, e._isActive = !1, e._interactiver = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function(e) {
                                this._isActive = !0, this._config = e ||
                                    {}, this._interactiver ||
                                (this._interactiver = new f.default, this._interactiver.start(
                                    this._config.host));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this._isActive = !1, this._interactiver &&
                                (this._interactiver = void 0);
                            },
                        },
                        {
                            key: 'createVRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver && this._interactiver.createRoom(
                                    {
                                        vRoomId: t.vChannelId,
                                        userRole: this._config.userRole,
                                        roomId: t.roomId || this._config.roomId,
                                        userId: t.userId || this._config.userId,
                                    }).
                                    then(function(i) {
                                        if (!e._quit('createVRoom')) {
                                            h.default.log('create vRoom response: ' +
                                                i, u.LOG.ROOM);
                                            var r = JSON.parse(i) || {},
                                                s = r[u.RSP.MSG] || '',
                                                n = parseInt(r[u.RSP.STATUS]);
                                            n === u.RSP.SUCCESS
                                                ? e._dispatchVEvent(
                                                l.RoomMessage.CREATE_VROOM,
                                                u.RSP.SUCCESS, u.RSP.OK,
                                                {vRoomId: t.vChannelId})
                                                : n === l.RoomCode.EXIST_ROOM
                                                ? e.joinVRoom(t)
                                                : e._dispatchVEvent(
                                                    l.RoomMessage.CREATE_VROOM, n,
                                                    s, {vRoomId: t.vChannelId});
                                        }
                                    }).
                                    catch(function(i) {
                                        e._quit('createVRoom') ||
                                        (h.default.warn('create vRoom failed',
                                            u.LOG.ROOM), e._dispatchVEvent(
                                            l.RoomMessage.CREATE_VROOM, u.RSP.ERROR,
                                            'create vRoom failed',
                                            {vRoomId: t.vChannelId}));
                                    });
                            },
                        },
                        {
                            key: 'joinVRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver && this._interactiver.joinRoom({
                                    vRoomId: t.vChannelId,
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(i) {
                                        if (!e._quit('joinVRoom')) {
                                            h.default.log('join vRoom response: ' +
                                                i, u.LOG.ROOM);
                                            var r = JSON.parse(i) || {},
                                                s = r[u.RSP.MSG] || '',
                                                n = parseInt(r[u.RSP.STATUS]);
                                            n === u.RSP.SUCCESS
                                                ? e._dispatchVEvent(
                                                l.RoomMessage.JOIN_VROOM,
                                                u.RSP.SUCCESS, u.RSP.OK,
                                                {vRoomId: t.vChannelId})
                                                : n === l.RoomCode.EXIST_NOT_ROOM
                                                ? e.createVRoom(t)
                                                : n !==
                                                l.RoomCode.AGREE_CONNECTED_LIST
                                                    ? e._dispatchVEvent(
                                                        l.RoomMessage.JOIN_VROOM, n,
                                                        s, {vRoomId: t.vChannelId})
                                                    : e.fullVListRoom(t);
                                        }
                                    }).
                                    catch(function(i) {
                                        e._quit('joinVRoom') ||
                                        (h.default.warn('join vRoom failed',
                                            u.LOG.ROOM), e._dispatchVEvent(
                                            l.RoomMessage.JOIN_VROOM, u.RSP.ERROR,
                                            'join vRoom failed',
                                            {vRoomId: t.vChannelId}));
                                    });
                            },
                        },
                        {
                            key: 'quitVRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver && this._interactiver.quitRoom({
                                    vRoomId: t.vChannelId,
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        e._quit('quitVRoom') ||
                                        h.default.log('quit vRoom response: ' + t,
                                            u.LOG.ROOM);
                                    }).
                                    catch(function(t) {
                                        e._quit('quitVRoom') ||
                                        h.default.warn('quit vRoom failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'destroyVRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver &&
                                this._interactiver.destroyRoom({
                                    vRoomId: t.vChannelId,
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        e._quit('destroyVRoom') ||
                                        h.default.log('destroy vRoom response: ' +
                                            t, u.LOG.ROOM);
                                    }).
                                    catch(function(t) {
                                        e._quit('destroyVRoom') ||
                                        h.default.warn('destroy vRoom failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'fullVListRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver &&
                                this._interactiver.fullListRoom({
                                    vRoomId: t.vChannelId,
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        e._quit('fullVListRoom') ||
                                        h.default.log('fullList vRoom response: ' +
                                            t, u.LOG.ROOM);
                                    }).
                                    catch(function(t) {
                                        e._quit('fullVListRoom') ||
                                        h.default.warn('fullList vRoom failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'inWhichVRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0]
                                    ? arguments[0]
                                    : {};
                                this._interactiver &&
                                this._interactiver.inWhichVRoom({
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        if (!e._quit('inWhichVRoom')) {
                                            h.default.log('inWhichVRoom response: ' +
                                                t, u.LOG.ROOM);
                                            var i = JSON.parse(t) || {};
                                            if (parseInt(i[u.RSP.STATUS]) ===
                                                u.RSP.SUCCESS) {
                                                var r = i[u.RSP.RESULT] || {};
                                                if (r[u.RSP.VROOMID]) {
                                                    var s = r[u.RSP.VROOMID];
                                                    s && s.length &&
                                                    e._dispatchVEvent(
                                                        l.RoomMessage.WHICH_VROOM,
                                                        u.RSP.SUCCESS, u.RSP.OK,
                                                        {vRoomId: s});
                                                }
                                            }
                                        }
                                    }).
                                    catch(function(t) {
                                        e._quit('inWhichVRoom') ||
                                        h.default.warn('inWhichVRoom failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: '_quit',
                            value: function(e) {
                                return !this._isActive &&
                                    (h.default.debug('[' + e + '], server stop',
                                        u.LOG.ROOM), !0);
                            },
                        },
                        {
                            key: '_dispatchVEvent',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                void 0 !== arguments[1]
                                    ? arguments[1]
                                    : -1, i = arguments.length > 2 &&
                                void 0 !== arguments[2]
                                    ? arguments[2]
                                    : '', r = arguments.length > 3 &&
                                void 0 !== arguments[3]
                                    ? arguments[3]
                                    : {};
                                this._quit('_dispatchVEvent') ||
                                this.trigger(l.RoomEvent.ROOM_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        }]), t;
                }(p.default);
            t.default = g;
        }, function(e, t, i) {
            'use strict';
            (function(e) {
                function r(e) {
                    return e && e.__esModule
                        ? e
                        : {default: e};
                }
                
                function s(e, t) {
                    if (!(e instanceof t)) throw new TypeError(
                        'Cannot call a class as a function');
                }
                
                function n(e, t) {
                    if (!e) throw new ReferenceError(
                        'this hasn\'t been initialised - super() hasn\'t been called');
                    return !t || 'object' != typeof t && 'function' != typeof t
                        ? e
                        : t;
                }
                
                function o(e, t) {
                    if ('function' != typeof t && null !==
                        t) throw new TypeError('Super expression must either be null or a function, not ' +
                        typeof t);
                    e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0,
                        },
                    }), t && (Object.setPrototypeOf
                        ? Object.setPrototypeOf(e, t)
                        : e.__proto__ = t);
                }
                
                Object.defineProperty(t, '__esModule', {value: !0});
                var a = function() {
                        function e(e, t) {
                            for (var i = 0; i < t.length; i++) {
                                var r = t[i];
                                r.enumerable = r.enumerable ||
                                    !1, r.configurable = !0, 'value' in r &&
                                (r.writable = !0), Object.defineProperty(e, r.key,
                                    r);
                            }
                        }
                        
                        return function(t, i, r) {
                            return i && e(t.prototype, i), r && e(t, r), t;
                        };
                    }(), u = i(4), l = i(0), c = i(2), h = i(1), d = r(h), f = i(3),
                    v = r(f), p = i(52), g = r(p), m = function(t) {
                        function i(e) {
                            s(this, i);
                            var t = n(this,
                                (i.__proto__ || Object.getPrototypeOf(i)).call(
                                    this));
                            return t._config = {}, t._isActive = !1, t._isInitial = !0, t._initSendData = e, t._host = '', t._subscribeTopics = [], t._client = void 0, t._dispatcher = void 0, t.PATH = '/ws', t.HEARTBEAT = 15, t.UNI = '/uni/', t.MULTI = '/multi/', t.BROAD = '/broad', t.MESSAGE = {
                                BROAD: 1,
                                UNI: 2,
                                MULT: 3,
                            }, t.QOS = 1, t.RETAINED = !1, t.CLIENT_ID = 'web_client_' +
                                Math.random().toFixed(6).substring(2), t;
                        }
                        
                        return o(i, t), a(i, [
                            {
                                key: 'connect',
                                value: function(e) {
                                    var t = arguments.length > 1 &&
                                        void 0 !== arguments[1] ? arguments[1] : '',
                                        i = this, r = arguments.length > 2 &&
                                        void 0 !== arguments[2] ? arguments[2] : [],
                                        s = arguments.length > 3 &&
                                        void 0 !== arguments[3] ? arguments[3] : {};
                                    this.disconnect(), this._config = {}, this._isActive = !0, this._subscribeTopics = [], '' ===
                                    e && (e = c.HOST.SIG_PROTOCOL +
                                        (s.host || c.Globals.host) + '/' +
                                        c.Globals.appId + '/' +
                                        (s.channelId || ''));
                                    var n = void 0;
                                    c.Globals.signalHosts.length
                                        ? (n = Object.assign(s, {
                                            host: c.Globals.signalHosts[0],
                                            hosts: c.Globals.signalHosts,
                                        }), this._joinChanel(e, t, r, n))
                                        : (this._dispatcher ||
                                        (this._dispatcher = new g.default(function(o) {
                                            o[l.RSP.CODE] !== l.RSP.SUCCESS
                                                ? i._dispatchEvent(
                                                u.SignalEvent.CONNECT_FAILED,
                                                o[l.RSP.CODE], o[l.RSP.MESSAGE])
                                                : (c.Globals.signalHosts = o[l.RSP.MESSAGE] ||
                                                [], n = Object.assign(s, {
                                                    host: c.Globals.signalHosts[0],
                                                    hosts: c.Globals.signalHosts,
                                                }), i._joinChanel(e, t, r,
                                                n)), i._dispatcher &&
                                            (i._dispatcher.stop(), i._dispatcher = void 0);
                                        })), this._dispatcher.start({
                                            url: e,
                                            userid: t,
                                            host: s.host,
                                            scene: s.scene,
                                        }));
                                },
                            },
                            {
                                key: 'sendUnicastMessage',
                                value: function(e) {
                                    var t = arguments.length > 1 &&
                                    void 0 !== arguments[1] ? arguments[1] : '';
                                    if (e && this._client) {
                                        var i = this._config.uriPath + this.UNI + e;
                                        d.default.log('send message ' + t,
                                            l.LOG.SIGNAL);
                                        try {
                                            this._client.send(i, t, this.QOS,
                                                this.RETAINED);
                                        } catch (e) {
                                            this._dispatchEvent(
                                                u.SignalEvent.CONNECT_MSG_SEND,
                                                l.RSP.ERROR, e.message,
                                                {topic: i, message: t});
                                        }
                                    }
                                },
                            },
                            {
                                key: 'sendMulticastMessage',
                                value: function(e) {
                                    var t = arguments.length > 1 &&
                                    void 0 !== arguments[1] ? arguments[1] : '';
                                    if (e && this._client) {
                                        var i = this._config.uriPath + this.MULTI +
                                            e;
                                        d.default.log('send message ' + t,
                                            l.LOG.SIGNAL);
                                        try {
                                            this._client.send(i, t, this.QOS,
                                                this.RETAINED);
                                        } catch (e) {
                                            this._dispatchEvent(
                                                u.SignalEvent.CONNECT_MSG_SEND,
                                                l.RSP.ERROR, e.message,
                                                {topic: i, message: t});
                                        }
                                    }
                                },
                            },
                            {
                                key: 'sendBroadcastMessage',
                                value: function() {
                                    var e = arguments.length > 0 &&
                                    void 0 !== arguments[0] ? arguments[0] : '';
                                    if (this._client) {
                                        var t = this._config.uriPath + this.BROAD;
                                        d.default.log('send message ' + e,
                                            l.LOG.SIGNAL);
                                        try {
                                            this._client.send(t, e, this.QOS,
                                                this.RETAINED);
                                        } catch (i) {
                                            this._dispatchEvent(
                                                u.SignalEvent.CONNECT_MSG_SEND,
                                                l.RSP.ERROR, i.message,
                                                {topic: t, message: e});
                                        }
                                    }
                                },
                            },
                            {
                                key: 'subscribeTopic',
                                value: function(e) {
                                    if (this._client && e && '' !== e) {
                                        var t = this._config.uriPath + this.UNI + e;
                                        d.default.log('subscribe topic: ' + t,
                                            l.LOG.SIGNAL), this._subscribeTopics.indexOf(
                                            t) < 0 && this._subscribeTopics.push(
                                            t), this._client.subscribe(t,
                                            {qos: this.QOS});
                                    }
                                },
                            },
                            {
                                key: 'unsubscribeTopic',
                                value: function(e) {
                                    if (this._client && e && '' !== e) {
                                        var t = this._config.uriPath + this.UNI + e,
                                            i = this._subscribeTopics.indexOf(t);
                                        i >= 0 && this._subscribeTopics.splice(i,
                                            1), d.default.log('unsubscribe topic: ' +
                                            t,
                                            l.LOG.SIGNAL), this._client.unsubscribe(
                                            t);
                                    }
                                },
                            },
                            {
                                key: 'disconnect',
                                value: function() {
                                    this._isActive = !1, this._subscribeTopics = [], this._client &&
                                    (this._client.isConnected() &&
                                    this._client.disconnect(), this._client = void 0);
                                },
                            },
                            {
                                key: '_quit',
                                value: function(e) {
                                    return !this._isActive &&
                                        (d.default.debug('[' + e +
                                            '], service stop', l.LOG.SIGNAL), !0);
                                },
                            },
                            {
                                key: '_joinChanel',
                                value: function(e) {
                                    var t = arguments.length > 1 &&
                                        void 0 !== arguments[1] ? arguments[1] : '',
                                        i = this, r = arguments.length > 2 &&
                                        void 0 !== arguments[2] ? arguments[2] : [],
                                        s = arguments.length > 3 &&
                                        void 0 !== arguments[3] ? arguments[3] : {},
                                        n = e.split('://');
                                    this._config.userId = t, this._config.groups = r, this._config.uriPath = n.length
                                        ? n[1]
                                        : '', this._config.uriPath = this._parseUri(
                                        this._config.uriPath), this._addInitialTopics(), this._parseConfig(
                                        s), this._createClient();
                                    var o = {
                                        useSSL: !0,
                                        reconnect: !0,
                                        cleanSession: !1,
                                        password: c.Globals.token,
                                        keepAliveInterval: this.HEARTBEAT,
                                        onFailure: this.onConnectFailHandler.bind(
                                            this),
                                        onSuccess: this.onConnectSuccessHandler.bind(
                                            this),
                                    };
                                    if (o.userName = c.Globals.host + ':' +
                                            c.Globals.appId + '+' + c.Globals.host +
                                            '+' + t, this._config.keepalive &&
                                        (o.keepAliveInterval = this._config.keepalive), this._config.hosts) {
                                        var a = '', u = [];
                                        this._config.hosts.forEach(function(e) {
                                            a = 'wss://', e.indexOf(':') >= 0
                                                ? a += e + i.PATH
                                                : a += e + ':' + c.HOST.SIG_PORT +
                                                    i.PATH, u.push(a);
                                        }), o.uris = u;
                                    }
                                    this._client.connect(o);
                                },
                            },
                            {
                                key: '_parseUri',
                                value: function(e) {
                                    var t = e, i = e.indexOf('?');
                                    if (i >= 0 && (t = t.substring(0, i), '/' ===
                                        t[t.length - 1] &&
                                        (t = t.substring(0, t.length -
                                            1))), (i = t.indexOf('/')) >= 0) {
                                        var r = t.substring(0, i);
                                        return (r = r.replace(/\./g, '_')) +
                                            t.substr(i);
                                    }
                                    return t;
                                },
                            },
                            {
                                key: '_parseConfig',
                                value: function(e) {
                                    for (var t in e) if (e.hasOwnProperty(
                                            t)) switch (t) {
                                        case'host':
                                        case'hosts':
                                            this._config[t] = e[t];
                                            break;
                                        case'keepalive':
                                            var i = Number(e[t]);
                                            isNaN(i) ||
                                            (this._config[t] = i < 10 || i >= 60
                                                ? 30
                                                : i);
                                    }
                                },
                            },
                            {
                                key: '_addInitialTopics',
                                value: function() {
                                    var e = this, t = void 0, i = [
                                        this.BROAD,
                                        this.UNI + this._config.userId];
                                    this._config.groups.forEach(function(t) {
                                        i.push(e.MULTI + t);
                                    }), i.forEach(function(i) {
                                        t = e._config.uriPath +
                                            i, e._subscribeTopics.indexOf(t) < 0 &&
                                        e._subscribeTopics.push(t);
                                    });
                                },
                            },
                            {
                                key: '_createClient',
                                value: function() {
                                    var t = '', i = c.HOST.SIG_PORT,
                                        r = this._config.host || '';
                                    if (r.indexOf(':') >= 0) {
                                        var s = r.split(':');
                                        t = s[0], i = parseInt(s[1]);
                                    } else t = r;
                                    d.default.log('ready to create client[' +
                                        this.CLIENT_ID + ']', l.LOG.SIGNAL), e.MQTT
                                        ? this._client = new e.MQTT.Client(t, i,
                                            this.PATH, this.CLIENT_ID)
                                        : this._client = new e.Client(t, i,
                                            this.PATH,
                                            this.CLIENT_ID), this._client.onConnectionLost = this.onConnectionLostHandler.bind(
                                        this), this._client.onMessageArrived = this.onMessageArrivedHandler.bind(
                                        this);
                                },
                            },
                            {
                                key: '_subscribe',
                                value: function(e) {
                                    e && this._client &&
                                    (this._subscribeTopics.indexOf(e) < 0 &&
                                    this._subscribeTopics.push(
                                        e), d.default.log('subscribe topic: ' + e,
                                        l.LOG.SIGNAL), this._client.subscribe(e,
                                        {qos: this.QOS}));
                                },
                            },
                            {
                                key: 'onConnectFailHandler',
                                value: function(e) {
                                    this._client &&
                                    !this._quit('onConnectFailHandler') &&
                                    (d.default.error('connect failed[' +
                                        e.errorCode + ']:' + e.errorMessage,
                                        l.LOG.SIGNAL), this.disconnect(), this._dispatchEvent(
                                        u.SignalEvent.CONNECT_FAILED, e.errorCode,
                                        e.errorMessage));
                                },
                            },
                            {
                                key: 'onConnectSuccessHandler',
                                value: function() {
                                    var e = this;
                                    if (this._client &&
                                        !this._quit('onConnectSuccessHandler') &&
                                        (this._host = this._client.host, this._subscribeTopics.forEach(
                                            function(t) {
                                                e._subscribe(t);
                                            }), d.default.log('connect ' +
                                            this._host + ' success',
                                            l.LOG.SIGNAL), this._isInitial &&
                                        (this._isInitial = !1, this._dispatchEvent(
                                            u.SignalEvent.CONNECT_SUCCESS,
                                            l.RSP.SUCCESS,
                                            l.RSP.OK)), this._initSendData)) {
                                        var t = 0,
                                            i = this._initSendData.userId || '',
                                            r = this._initSendData.message || '';
                                        void 0 !== this._initSendData.type &&
                                        (t = parseInt(
                                            this._initSendData.type)), t ===
                                        this.MESSAGE.UNI ? this.sendUnicastMessage(
                                            i, r) : t === this.MESSAGE.BROAD &&
                                            this.sendBroadcastMessage(
                                                r), this._initSendData = void 0;
                                    }
                                },
                            },
                            {
                                key: 'onConnectionLostHandler',
                                value: function(e) {
                                    if (!this._quit('onConnectSuccessHandler')) {
                                        var t = 'connect lost, [';
                                        t += e.errorCode + '][' + e.errorMessage +
                                            ']', d.default.warn(t, l.LOG.SIGNAL);
                                    }
                                },
                            },
                            {
                                key: 'onMessageArrivedHandler',
                                value: function(e) {
                                    if (!this._quit('onMessageArrivedHandler')) {
                                        var t = 'recv message:' + e.payloadString +
                                            ' from topic:' + e.topic;
                                        d.default.log(t,
                                            l.LOG.SIGNAL), this._dispatchEvent(
                                            u.SignalEvent.CONNECT_MSG_RECEIVE,
                                            l.RSP.SUCCESS, e.payloadString, {
                                                topic: e.topic,
                                                message: e.payloadString,
                                            });
                                    }
                                },
                            },
                            {
                                key: 'onMessageDeliveredHandler',
                                value: function(e) {
                                    if (!this._quit(
                                            'onMessageDeliveredHandler')) {e.payloadString, e.topic;}
                                },
                            },
                            {
                                key: 'onTraceHandler',
                                value: function(e) {
                                    this._quit('onTraceHandler') ||
                                    d.default.debug(e.severity + ':' + e.message,
                                        l.LOG.SIGNAL);
                                },
                            },
                            {
                                key: '_dispatchEvent',
                                value: function(e) {
                                    var t = arguments.length > 1 &&
                                        void 0 !== arguments[1] ? arguments[1] : 0,
                                        i = arguments.length > 2 &&
                                        void 0 !== arguments[2] ? arguments[2] : '',
                                        r = arguments.length > 3 &&
                                        void 0 !== arguments[3] ? arguments[3] : {};
                                    this.trigger(u.Event.SIGNAL_EVENT,
                                        {type: e, code: t, message: i, data: r});
                                },
                            },
                            {
                                key: 'MSG',
                                get: function() {return this.MESSAGE;},
                            },
                            {
                                key: 'userId',
                                get: function() {return this._config.userId || '';},
                            }]), i;
                    }(v.default);
                t.default = m;
            }).call(t, i(30));
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            var s = i(44), n = r(s), o = i(45), a = r(o), u = i(38), l = r(u);
            t.MD5 = function() {
                return {
                    md5: function(e) {
                        return (0, n.default)(e + 'licDJ%^782ja');
                    },
                };
            }(), t.SHA1 = function() {
                return {
                    sha1: function(e) {
                        return (0, a.default)(e);
                    },
                };
            }(), t.BLOWFISH = function() {
                return {
                    encrypt: function(e) {
                        return this._blowfish ||
                        (this._blowfish = new l.default(
                            'JLSDKJqwokm@69137$j*76%%6jfjl8372691826#hfjsdf23sd')), this._blowfish.encrypt(
                            e);
                    },
                    decrypt: function(e) {
                        this._blowfish = new l.default(
                            'JLSDKJqwokm@69137$j*76%%6jfjl8372691826#hfjsdf23sd');
                        var t = this._blowfish.decrypt(e);
                        if (!t || !t.length) return '';
                        var i = !1, r = t.length - 1;
                        do {
                            if (0 !== t.charCodeAt(r)) {
                                r !== t.length - 1 && (i = !0);
                                break;
                            }
                        } while (r--);
                        return i ? t.substring(0, r + 1) : t;
                    },
                };
            }();
        }, function(e, t, i) {
            'use strict';
            (function(e, r) {
                var s, n, o = 'function' == typeof Symbol &&
                'symbol' == typeof Symbol.iterator
                    ? function(e) {return typeof e;}
                    : function(e) {
                        return e && 'function' == typeof Symbol &&
                        e.constructor === Symbol && e !== Symbol.prototype
                            ? 'symbol'
                            : typeof e;
                    };
                !function(e, a) {
                    'object' === o(t) && 'object' === o(r)
                        ? r.exports.MQTT = a()
                        : (s = a, void 0 !==
                        (n = 'function' == typeof s ? s.call(t, i, t, r) : s) &&
                        (r.exports = n));
                }(0, function() {
                    return function(t) {
                        function i(t, i) {
                            var r = i, s = t[i], o = s >> 4, a = s &= 15;
                            i += 1;
                            var u, l = 0, d = 1;
                            do {
                                if (i == t.length) return [null, r];
                                u = t[i++], l += (127 & u) * d, d *= 128;
                            } while (0 != (128 & u));
                            var f = i + l;
                            if (f > t.length) return [null, r];
                            var v = new _(o);
                            switch (o) {
                                case h.CONNACK:
                                    1 & t[i++] &&
                                    (v.sessionPresent = !0), v.returnCode = t[i++];
                                    break;
                                case h.PUBLISH:
                                    var p = a >> 1 & 3, g = n(t, i);
                                    i += 2;
                                    var m = c(t, i, g);
                                    i += g, p > 0 &&
                                    (v.messageIdentifier = n(t, i), i += 2);
                                    var y = new e.MQTT.Message(
                                        t.subarray(i, f));
                                    1 == (1 & a) && (y.retained = !0), 8 ==
                                    (8 & a) &&
                                    (y.duplicate = !0), y.qos = p, y.destinationName = m, v.payloadMessage = y;
                                    break;
                                case h.PUBACK:
                                case h.PUBREC:
                                case h.PUBREL:
                                case h.PUBCOMP:
                                case h.UNSUBACK:
                                    v.messageIdentifier = n(t, i);
                                    break;
                                case h.SUBACK:
                                    v.messageIdentifier = n(t,
                                        i), i += 2, v.returnCode = t.subarray(i,
                                        f);
                            }
                            return [v, f];
                        }
                        
                        function r(e, t, i) {
                            return t[i++] = e >> 8, t[i++] = e % 256, i;
                        }
                        
                        function s(e, t, i, s) {
                            return s = r(t, i, s), l(e, i, s), s + t;
                        }
                        
                        function n(e, t) {return 256 * e[t] + e[t + 1];}
                        
                        function a(e) {
                            var t = new Array(1), i = 0;
                            do {
                                var r = e % 128;
                                e >>= 7, e > 0 && (r |= 128), t[i++] = r;
                            } while (e > 0 && i < 4);
                            return t;
                        }
                        
                        function u(e) {
                            for (var t = 0, i = 0; i < e.length; i++) {
                                var r = e.charCodeAt(i);
                                r > 2047 ? (55296 <= r && r <= 56319 &&
                                (i++, t++), t += 3) : r > 127 ? t += 2 : t++;
                            }
                            return t;
                        }
                        
                        function l(e, t, i) {
                            for (var r = i, s = 0; s < e.length; s++) {
                                var n = e.charCodeAt(s);
                                if (55296 <= n && n <= 56319) {
                                    var o = e.charCodeAt(++s);
                                    if (isNaN(o)) throw new Error(
                                        g(v.MALFORMED_UNICODE, [n, o]));
                                    n = o - 56320 + (n - 55296 << 10) + 65536;
                                }
                                n <= 127
                                    ? t[r++] = n
                                    : n <= 2047
                                    ? (t[r++] = n >> 6 & 31 | 192, t[r++] = 63 &
                                        n | 128)
                                    : n <= 65535
                                        ? (t[r++] = n >> 12 & 15 |
                                            224, t[r++] = n >> 6 & 63 |
                                            128, t[r++] = 63 & n | 128)
                                        : (t[r++] = n >> 18 & 7 |
                                            240, t[r++] = n >> 12 & 63 |
                                            128, t[r++] = n >> 6 & 63 |
                                            128, t[r++] = 63 & n | 128);
                            }
                            return t;
                        }
                        
                        function c(e, t, i) {
                            for (var r, s = '', n = t; n < t + i;) {
                                var o = e[n++];
                                if (o < 128) r = o; else {
                                    var a = e[n++] - 128;
                                    if (a < 0) throw new Error(
                                        g(v.MALFORMED_UTF, [
                                            o.toString(16),
                                            a.toString(16),
                                            '']));
                                    if (o < 224) r = 64 * (o - 192) + a; else {
                                        var u = e[n++] - 128;
                                        if (u < 0) throw new Error(
                                            g(v.MALFORMED_UTF, [
                                                o.toString(16),
                                                a.toString(16),
                                                u.toString(16)]));
                                        if (o < 240) r = 4096 * (o - 224) + 64 *
                                            a + u; else {
                                            var l = e[n++] - 128;
                                            if (l < 0) throw new Error(
                                                g(v.MALFORMED_UTF, [
                                                    o.toString(16),
                                                    a.toString(16),
                                                    u.toString(16),
                                                    l.toString(16)]));
                                            if (!(o < 248)) throw new Error(
                                                g(v.MALFORMED_UTF, [
                                                    o.toString(16),
                                                    a.toString(16),
                                                    u.toString(16),
                                                    l.toString(16)]));
                                            r = 262144 * (o - 240) + 4096 * a +
                                                64 * u + l;
                                        }
                                    }
                                }
                                r > 65535 &&
                                (r -= 65536, s += String.fromCharCode(55296 +
                                    (r >> 10)), r = 56320 +
                                    (1023 & r)), s += String.fromCharCode(r);
                            }
                            return s;
                        }
                        
                        var h = {
                                CONNECT: 1,
                                CONNACK: 2,
                                PUBLISH: 3,
                                PUBACK: 4,
                                PUBREC: 5,
                                PUBREL: 6,
                                PUBCOMP: 7,
                                SUBSCRIBE: 8,
                                SUBACK: 9,
                                UNSUBSCRIBE: 10,
                                UNSUBACK: 11,
                                PINGREQ: 12,
                                PINGRESP: 13,
                                DISCONNECT: 14,
                            }, d = function(e, t) {
                                for (var i in e) if (e.hasOwnProperty(i)) {
                                    if (!t.hasOwnProperty(i)) {
                                        var r = 'Unknown property, ' + i +
                                            '. Valid properties are:';
                                        for (var s in t) t.hasOwnProperty(s) &&
                                        (r = r + ' ' + s);
                                        throw new Error(r);
                                    }
                                    if (o(e[i]) !== t[i]) throw new Error(
                                        g(v.INVALID_TYPE, [o(e[i]), i]));
                                }
                            }, f = function(e, t) {
                                return function() {
                                    return e.apply(t, arguments);
                                };
                            }, v = {
                                OK: {code: 0, text: 'AMQJSC0000I OK.'},
                                CONNECT_TIMEOUT: {
                                    code: 1,
                                    text: 'AMQJSC0001E Connect timed out.',
                                },
                                SUBSCRIBE_TIMEOUT: {
                                    code: 2,
                                    text: 'AMQJS0002E Subscribe timed out.',
                                },
                                UNSUBSCRIBE_TIMEOUT: {
                                    code: 3,
                                    text: 'AMQJS0003E Unsubscribe timed out.',
                                },
                                PING_TIMEOUT: {
                                    code: 4,
                                    text: 'AMQJS0004E Ping timed out.',
                                },
                                INTERNAL_ERROR: {
                                    code: 5,
                                    text: 'AMQJS0005E Internal error. Error Message: {0}, Stack trace: {1}',
                                },
                                CONNACK_RETURNCODE: {
                                    code: 6,
                                    text: 'AMQJS0006E Bad Connack return code:{0} {1}.',
                                },
                                SOCKET_ERROR: {
                                    code: 7,
                                    text: 'AMQJS0007E Socket error:{0}.',
                                },
                                SOCKET_CLOSE: {
                                    code: 8,
                                    text: 'AMQJS0008I Socket closed.',
                                },
                                MALFORMED_UTF: {
                                    code: 9,
                                    text: 'AMQJS0009E Malformed UTF data:{0} {1} {2}.',
                                },
                                UNSUPPORTED: {
                                    code: 10,
                                    text: 'AMQJS0010E {0} is not supported by this browser.',
                                },
                                INVALID_STATE: {
                                    code: 11,
                                    text: 'AMQJS0011E Invalid state {0}.',
                                },
                                INVALID_TYPE: {
                                    code: 12,
                                    text: 'AMQJS0012E Invalid type {0} for {1}.',
                                },
                                INVALID_ARGUMENT: {
                                    code: 13,
                                    text: 'AMQJS0013E Invalid argument {0} for {1}.',
                                },
                                UNSUPPORTED_OPERATION: {
                                    code: 14,
                                    text: 'AMQJS0014E Unsupported operation.',
                                },
                                INVALID_STORED_DATA: {
                                    code: 15,
                                    text: 'AMQJS0015E Invalid data in local storage key={0} value={1}.',
                                },
                                INVALID_MQTT_MESSAGE_TYPE: {
                                    code: 16,
                                    text: 'AMQJS0016E Invalid MQTT message type {0}.',
                                },
                                MALFORMED_UNICODE: {
                                    code: 17,
                                    text: 'AMQJS0017E Malformed Unicode string:{0} {1}.',
                                },
                                BUFFER_FULL: {
                                    code: 18,
                                    text: 'AMQJS0018E Message buffer is full, maximum buffer size: {0}.',
                                },
                            }, p = {
                                0: 'Connection Accepted',
                                1: 'Connection Refused: unacceptable protocol version',
                                2: 'Connection Refused: identifier rejected',
                                3: 'Connection Refused: server unavailable',
                                4: 'Connection Refused: bad user name or password',
                                5: 'Connection Refused: not authorized',
                            }, g = function(e, t) {
                                var i = e.text;
                                if (t) for (var r, s, n = 0; n <
                                t.length; n++) if (r = '{' + n +
                                        '}', (s = i.indexOf(r)) > 0) {
                                    var o = i.substring(0, s),
                                        a = i.substring(s + r.length);
                                    i = o + t[n] + a;
                                }
                                return i;
                            }, m = [0, 6, 77, 81, 73, 115, 100, 112, 3],
                            y = [0, 4, 77, 81, 84, 84, 4], _ = function(e, t) {
                                this.type = e;
                                for (var i in t) t.hasOwnProperty(i) &&
                                (this[i] = t[i]);
                            };
                        _.prototype.encode = function() {
                            var e, t = (15 & this.type) << 4, i = 0, n = [],
                                o = 0;
                            switch (void 0 !== this.messageIdentifier &&
                            (i += 2), this.type) {
                                case h.CONNECT:
                                    switch (this.mqttVersion) {
                                        case 3:
                                            i += m.length + 3;
                                            break;
                                        case 4:
                                            i += y.length + 3;
                                    }
                                    i += u(this.clientId) + 2, void 0 !==
                                    this.willMessage &&
                                    (i += u(this.willMessage.destinationName) +
                                        2, e = this.willMessage.payloadBytes, e instanceof
                                    Uint8Array ||
                                    (e = new Uint8Array(c)), i += e.byteLength +
                                        2), void 0 !== this.userName &&
                                    (i += u(this.userName) + 2), void 0 !==
                                    this.password &&
                                    (i += u(this.password) + 2);
                                    break;
                                case h.SUBSCRIBE:
                                    t |= 2;
                                    for (var l = 0; l <
                                    this.topics.length; l++) n[l] = u(
                                        this.topics[l]), i += n[l] + 2;
                                    i += this.requestedQos.length;
                                    break;
                                case h.UNSUBSCRIBE:
                                    t |= 2;
                                    for (var l = 0; l <
                                    this.topics.length; l++) n[l] = u(
                                        this.topics[l]), i += n[l] + 2;
                                    break;
                                case h.PUBREL:
                                    t |= 2;
                                    break;
                                case h.PUBLISH:
                                    this.payloadMessage.duplicate &&
                                    (t |= 8), t = t |= this.payloadMessage.qos <<
                                        1, this.payloadMessage.retained &&
                                    (t |= 1), o = u(
                                        this.payloadMessage.destinationName), i += o +
                                        2;
                                    var c = this.payloadMessage.payloadBytes;
                                    i += c.byteLength, c instanceof ArrayBuffer
                                        ? c = new Uint8Array(c)
                                        : c instanceof Uint8Array ||
                                        (c = new Uint8Array(c.buffer));
                                    break;
                                case h.DISCONNECT:
                            }
                            var d = a(i), f = d.length + 1,
                                v = new ArrayBuffer(i + f),
                                p = new Uint8Array(v);
                            if (p[0] = t, p.set(d, 1), this.type ==
                                h.PUBLISH) f = s(
                                this.payloadMessage.destinationName, o, p,
                                f); else if (this.type == h.CONNECT) {
                                switch (this.mqttVersion) {
                                    case 3:
                                        p.set(m, f), f += m.length;
                                        break;
                                    case 4:
                                        p.set(y, f), f += y.length;
                                }
                                var g = 0;
                                this.cleanSession && (g = 2), void 0 !==
                                this.willMessage &&
                                (g |= 4, g |= this.willMessage.qos <<
                                    3, this.willMessage.retained &&
                                (g |= 32)), void 0 !== this.userName &&
                                (g |= 128), void 0 !== this.password &&
                                (g |= 64), p[f++] = g, f = r(
                                    this.keepAliveInterval, p, f);
                            }
                            switch (void 0 !== this.messageIdentifier &&
                            (f = r(this.messageIdentifier, p, f)), this.type) {
                                case h.CONNECT:
                                    f = s(this.clientId, u(this.clientId), p,
                                        f), void 0 !== this.willMessage &&
                                    (f = s(this.willMessage.destinationName,
                                        u(this.willMessage.destinationName), p,
                                        f), f = r(e.byteLength, p, f), p.set(e,
                                        f), f += e.byteLength), void 0 !==
                                    this.userName &&
                                    (f = s(this.userName, u(this.userName), p,
                                        f)), void 0 !== this.password &&
                                    (f = s(this.password, u(this.password), p,
                                        f));
                                    break;
                                case h.PUBLISH:
                                    p.set(c, f);
                                    break;
                                case h.SUBSCRIBE:
                                    for (var l = 0; l <
                                    this.topics.length; l++) f = s(
                                        this.topics[l], n[l], p,
                                        f), p[f++] = this.requestedQos[l];
                                    break;
                                case h.UNSUBSCRIBE:
                                    for (var l = 0; l <
                                    this.topics.length; l++) f = s(
                                        this.topics[l], n[l], p, f);
                            }
                            return v;
                        };
                        var S = function(
                            e, t, i) {
                            this._client = e, this._window = t, this._keepAliveInterval = 1e3 *
                                i, this.isReset = !1;
                            var r = new _(h.PINGREQ).encode(), s = function(e) {
                                return function() {
                                    return n.apply(e);
                                };
                            }, n = function() {
                                this.isReset
                                    ? (this.isReset = !1, this._client._trace(
                                    'Pinger.doPing',
                                    'send PINGREQ'), this._client.socket.send(
                                    r), this.timeout = this._window.setTimeout(
                                    s(this), this._keepAliveInterval))
                                    : (this._client._trace('Pinger.doPing',
                                    'Timed out'), this._client._disconnected(
                                    v.PING_TIMEOUT.code, g(v.PING_TIMEOUT)));
                            };
                            this.reset = function() {
                                this.isReset = !0, this._window.clearTimeout(
                                    this.timeout), this._keepAliveInterval >
                                0 && (this.timeout = setTimeout(s(this),
                                    this._keepAliveInterval));
                            }, this.cancel = function() {
                                this._window.clearTimeout(this.timeout);
                            };
                        }, E = function(e, t, i, r, s) {
                            this._window = t, i || (i = 30);
                            this.timeout = setTimeout(function(e, t, i) {
                                return function() {
                                    return e.apply(t, i);
                                };
                            }(r, e, s), 1e3 * i), this.cancel = function() {
                                this._window.clearTimeout(this.timeout);
                            };
                        }, R = function(e, i, r, s, n) {
                            if (!('WebSocket' in t && null !==
                                    t.WebSocket)) throw new Error(
                                g(v.UNSUPPORTED, ['WebSocket']));
                            if (!('localStorage' in t && null !==
                                    t.localStorage)) throw new Error(
                                g(v.UNSUPPORTED, ['localStorage']));
                            if (!('ArrayBuffer' in t && null !==
                                    t.ArrayBuffer)) throw new Error(
                                g(v.UNSUPPORTED, ['ArrayBuffer']));
                            this._trace('Paho.MQTT.Client', e, i, r, s,
                                n), this.host = i, this.port = r, this.path = s, this.uri = e, this.clientId = n, this._wsuri = null, this._localKey = i +
                                ':' + r + ('/mqtt' != s ? ':' + s : '') + ':' +
                                n +
                                ':', this._msg_queue = [], this._buffered_msg_queue = [], this._sentMessages = {}, this._receivedMessages = {}, this._notify_msg_sent = {}, this._message_identifier = 1, this._sequence = 0;
                            for (var o in localStorage) 0 !==
                            o.indexOf('Sent:' + this._localKey) &&
                            0 !== o.indexOf('Received:' + this._localKey) ||
                            this.restore(o);
                        };
                        R.prototype.host = null, R.prototype.port = null, R.prototype.path = null, R.prototype.uri = null, R.prototype.clientId = null, R.prototype.socket = null, R.prototype.connected = !1, R.prototype.maxMessageIdentifier = 65536, R.prototype.connectOptions = null, R.prototype.hostIndex = null, R.prototype.onConnected = null, R.prototype.onConnectionLost = null, R.prototype.onMessageDelivered = null, R.prototype.onMessageArrived = null, R.prototype.traceFunction = null, R.prototype._msg_queue = null, R.prototype._buffered_msg_queue = null, R.prototype._connectTimeout = null, R.prototype.sendPinger = null, R.prototype.receivePinger = null, R.prototype._reconnectInterval = 1, R.prototype._reconnecting = !1, R.prototype._reconnectTimeout = null, R.prototype.disconnectedPublishing = !1, R.prototype.disconnectedBufferSize = 5e3, R.prototype.receiveBuffer = null, R.prototype._traceBuffer = null, R.prototype._MAX_TRACE_ENTRIES = 100, R.prototype.connect = function(e) {
                            var t = this._traceMask(e, 'password');
                            if (this._trace('Client.connect', t, this.socket,
                                    this.connected), this.connected) throw new Error(
                                g(v.INVALID_STATE, ['already connected']));
                            if (this.socket) throw new Error(
                                g(v.INVALID_STATE, ['already connected']));
                            this._reconnecting &&
                            (this._reconnectTimeout.cancel(), this._reconnectTimeout = null, this._reconnecting = !1), this.connectOptions = e, this._reconnectInterval = 1, this._reconnecting = !1, e.uris
                                ? (this.hostIndex = 0, this._doConnect(
                                    e.uris[0]))
                                : this._doConnect(this.uri);
                        }, R.prototype.subscribe = function(e, t) {
                            if (this._trace('Client.subscribe', e,
                                    t), !this.connected) throw new Error(
                                g(v.INVALID_STATE, ['not connected']));
                            var i = new _(h.SUBSCRIBE);
                            i.topics = [e], void 0 !== t.qos
                                ? i.requestedQos = [t.qos]
                                : i.requestedQos = [0], t.onSuccess &&
                            (i.onSuccess = function(e) {
                                t.onSuccess({
                                    invocationContext: t.invocationContext,
                                    grantedQos: e,
                                });
                            }), t.onFailure && (i.onFailure = function(e) {
                                t.onFailure({
                                    invocationContext: t.invocationContext,
                                    errorCode: e,
                                    errorMessage: g(e),
                                });
                            }), t.timeout &&
                            (i.timeOut = new E(this, window, t.timeout,
                                t.onFailure, [
                                    {
                                        invocationContext: t.invocationContext,
                                        errorCode: v.SUBSCRIBE_TIMEOUT.code,
                                        errorMessage: g(v.SUBSCRIBE_TIMEOUT),
                                    }])), this._requires_ack(
                                i), this._schedule_message(i);
                        }, R.prototype.unsubscribe = function(
                            e, t) {
                            if (this._trace('Client.unsubscribe', e,
                                    t), !this.connected) throw new Error(
                                g(v.INVALID_STATE, ['not connected']));
                            var i = new _(h.UNSUBSCRIBE);
                            i.topics = [e], t.onSuccess &&
                            (i.callback = function() {
                                t.onSuccess(
                                    {invocationContext: t.invocationContext});
                            }), t.timeout &&
                            (i.timeOut = new E(this, window, t.timeout,
                                t.onFailure, [
                                    {
                                        invocationContext: t.invocationContext,
                                        errorCode: v.UNSUBSCRIBE_TIMEOUT.code,
                                        errorMessage: g(v.UNSUBSCRIBE_TIMEOUT),
                                    }])), this._requires_ack(
                                i), this._schedule_message(i);
                        }, R.prototype.send = function(e) {
                            this._trace('Client.send', e);
                            var t = new _(h.PUBLISH);
                            if (t.payloadMessage = e, this.connected) e.qos > 0
                                ? this._requires_ack(t)
                                : this.onMessageDelivered &&
                                (this._notify_msg_sent[t] = this.onMessageDelivered(
                                    t.payloadMessage)), this._schedule_message(
                                t); else {
                                if (!this._reconnecting ||
                                    !this.disconnectedPublishing) throw new Error(
                                    g(v.INVALID_STATE, ['not connected']));
                                if (Object.keys(this._sentMessages).length +
                                    this._buffered_msg_queue.length >
                                    this.disconnectedBufferSize) throw new Error(
                                    g(v.BUFFER_FULL,
                                        [this.disconnectedBufferSize]));
                                e.qos > 0
                                    ? this._requires_ack(t)
                                    : (t.sequence = ++this._sequence, this._buffered_msg_queue.push(
                                    t));
                            }
                        }, R.prototype.disconnect = function() {
                            if (this._trace(
                                    'Client.disconnect'), this._reconnecting &&
                                (this._reconnectTimeout.cancel(), this._reconnectTimeout = null, this._reconnecting = !1), !this.socket) throw new Error(
                                g(v.INVALID_STATE,
                                    ['not connecting or connected']));
                            var e = new _(h.DISCONNECT);
                            this._notify_msg_sent[e] = f(this._disconnected,
                                this), this._schedule_message(e);
                        }, R.prototype.getTraceLog = function() {
                            if (null !== this._traceBuffer) {
                                this._trace('Client.getTraceLog',
                                    new Date), this._trace(
                                    'Client.getTraceLog in flight messages',
                                    this._sentMessages.length);
                                for (var e in this._sentMessages) this._trace(
                                    '_sentMessages ', e, this._sentMessages[e]);
                                for (var e in this._receivedMessages) this._trace(
                                    '_receivedMessages ', e,
                                    this._receivedMessages[e]);
                                return this._traceBuffer;
                            }
                        }, R.prototype.startTrace = function() {
                            null === this._traceBuffer &&
                            (this._traceBuffer = []), this._trace(
                                'Client.startTrace', new Date, '@VERSION@');
                        }, R.prototype.stopTrace = function() {delete this._traceBuffer;}, R.prototype._doConnect = function(e) {
                            if (this.connectOptions.useSSL) {
                                var t = e.split(':');
                                t[0] = 'wss', e = t.join(':');
                            }
                            this._wsuri = e, this.connected = !1, this.connectOptions.mqttVersion <
                            4
                                ? this.socket = new WebSocket(e, ['mqttv3.1'])
                                : this.socket = new WebSocket(e,
                                    ['mqtt']), this.socket.binaryType = 'arraybuffer', this.socket.onopen = f(
                                this._on_socket_open,
                                this), this.socket.onmessage = f(
                                this._on_socket_message,
                                this), this.socket.onerror = f(
                                this._on_socket_error,
                                this), this.socket.onclose = f(
                                this._on_socket_close,
                                this), this.sendPinger = new S(this, window,
                                this.connectOptions.keepAliveInterval), this.receivePinger = new S(
                                this, window,
                                this.connectOptions.keepAliveInterval), this._connectTimeout &&
                            (this._connectTimeout.cancel(), this._connectTimeout = null), this._connectTimeout = new E(
                                this, window, this.connectOptions.timeout,
                                this._disconnected,
                                [v.CONNECT_TIMEOUT.code, g(v.CONNECT_TIMEOUT)]);
                        }, R.prototype._schedule_message = function(e) {
                            this._msg_queue.push(e), this.connected &&
                            this._process_queue();
                        }, R.prototype.store = function(
                            e, t) {
                            var i = {
                                type: t.type,
                                messageIdentifier: t.messageIdentifier,
                                version: 1,
                            };
                            switch (t.type) {
                                case h.PUBLISH:
                                    t.pubRecReceived &&
                                    (i.pubRecReceived = !0), i.payloadMessage = {};
                                    for (var r = '', s = t.payloadMessage.payloadBytes, n = 0; n <
                                    s.length; n++) s[n] <= 15 ? r = r + '0' +
                                        s[n].toString(16) : r += s[n].toString(
                                        16);
                                    i.payloadMessage.payloadHex = r, i.payloadMessage.qos = t.payloadMessage.qos, i.payloadMessage.destinationName = t.payloadMessage.destinationName, t.payloadMessage.duplicate &&
                                    (i.payloadMessage.duplicate = !0), t.payloadMessage.retained &&
                                    (i.payloadMessage.retained = !0), 0 ===
                                    e.indexOf('Sent:') &&
                                    (void 0 === t.sequence &&
                                    (t.sequence = ++this._sequence), i.sequence = t.sequence);
                                    break;
                                default:
                                    throw Error(
                                        g(v.INVALID_STORED_DATA, [key, i]));
                            }
                            localStorage.setItem(e + this._localKey +
                                t.messageIdentifier, JSON.stringify(i));
                        }, R.prototype.restore = function(t) {
                            var i = localStorage.getItem(t), r = JSON.parse(i),
                                s = new _(r.type, r);
                            switch (r.type) {
                                case h.PUBLISH:
                                    for (var n = r.payloadMessage.payloadHex, o = new ArrayBuffer(n.length /
                                        2), a = new Uint8Array(
                                        o), u = 0; n.length >= 2;) {
                                        var l = parseInt(n.substring(0, 2), 16);
                                        n = n.substring(2, n.length), a[u++] = l;
                                    }
                                    var c = new e.MQTT.Message(a);
                                    c.qos = r.payloadMessage.qos, c.destinationName = r.payloadMessage.destinationName, r.payloadMessage.duplicate &&
                                    (c.duplicate = !0), r.payloadMessage.retained &&
                                    (c.retained = !0), s.payloadMessage = c;
                                    break;
                                default:
                                    throw Error(
                                        g(v.INVALID_STORED_DATA, [t, i]));
                            }
                            0 === t.indexOf('Sent:' + this._localKey)
                                ? (s.payloadMessage.duplicate = !0, this._sentMessages[s.messageIdentifier] = s)
                                : 0 ===
                                t.indexOf('Received:' + this._localKey) &&
                                (this._receivedMessages[s.messageIdentifier] = s);
                        }, R.prototype._process_queue = function() {
                            for (var e = null, t = this._msg_queue.reverse(); e = t.pop();) this._socket_send(
                                e), this._notify_msg_sent[e] &&
                            (this._notify_msg_sent[e](), delete this._notify_msg_sent[e]);
                        }, R.prototype._requires_ack = function(e) {
                            var t = Object.keys(this._sentMessages).length;
                            if (t >
                                this.maxMessageIdentifier) throw Error('Too many messages:' +
                                t);
                            for (; void 0 !==
                                   this._sentMessages[this._message_identifier];) this._message_identifier++;
                            e.messageIdentifier = this._message_identifier, this._sentMessages[e.messageIdentifier] = e, e.type ===
                            h.PUBLISH &&
                            this.store('Sent:', e), this._message_identifier ===
                            this.maxMessageIdentifier &&
                            (this._message_identifier = 1);
                        }, R.prototype._on_socket_open = function() {
                            var e = new _(h.CONNECT, this.connectOptions);
                            e.clientId = this.clientId, this._socket_send(e);
                        }, R.prototype._on_socket_message = function(e) {
                            this._trace('Client._on_socket_message', e.data);
                            for (var t = this._deframeMessages(
                                e.data), i = 0; i <
                                 t.length; i += 1) this._handleMessage(t[i]);
                        }, R.prototype._deframeMessages = function(e) {
                            var t = new Uint8Array(e), r = [];
                            if (this.receiveBuffer) {
                                var s = new Uint8Array(this.receiveBuffer.length +
                                    t.length);
                                s.set(this.receiveBuffer), s.set(t,
                                    this.receiveBuffer.length), t = s, delete this.receiveBuffer;
                            }
                            try {
                                for (var n = 0; n < t.length;) {
                                    var o = i(t, n), a = o[0];
                                    if (n = o[1], null === a) break;
                                    r.push(a);
                                }
                                n < t.length &&
                                (this.receiveBuffer = t.subarray(n));
                            } catch (e) {
                                var u = 'undefined' == e.hasOwnProperty('stack')
                                    ? e.stack.toString()
                                    : 'No Error Stack Available';
                                return void this._disconnected(
                                    v.INTERNAL_ERROR.code,
                                    g(v.INTERNAL_ERROR, [e.message, u]));
                            }
                            return r;
                        }, R.prototype._handleMessage = function(e) {
                            this._trace('Client._handleMessage', e);
                            try {
                                switch (e.type) {
                                    case h.CONNACK:
                                        if (this._connectTimeout.cancel(), this._reconnectTimeout &&
                                            this._reconnectTimeout.cancel(), this.connectOptions.cleanSession) {
                                            for (var t in this._sentMessages) {
                                                var i = this._sentMessages[t];
                                                localStorage.removeItem('Sent:' +
                                                    this._localKey +
                                                    i.messageIdentifier);
                                            }
                                            this._sentMessages = {};
                                            for (var t in this._receivedMessages) {
                                                var r = this._receivedMessages[t];
                                                localStorage.removeItem('Received:' +
                                                    this._localKey +
                                                    r.messageIdentifier);
                                            }
                                            this._receivedMessages = {};
                                        }
                                        if (0 !== e.returnCode) {
                                            this._disconnected(
                                                v.CONNACK_RETURNCODE.code,
                                                g(v.CONNACK_RETURNCODE, [
                                                    e.returnCode,
                                                    p[e.returnCode]]));
                                            break;
                                        }
                                        this.connected = !0, this.connectOptions.uris &&
                                        (this.hostIndex = this.connectOptions.uris.length);
                                        var s = [];
                                        for (var n in this._sentMessages) this._sentMessages.hasOwnProperty(
                                            n) && s.push(this._sentMessages[n]);
                                        if (this._buffered_msg_queue.length >
                                            0) for (var o = null, a = this._buffered_msg_queue.reverse(); o = a.pop();) s.push(
                                            o), this.onMessageDelivered &&
                                        (this._notify_msg_sent[o] = this.onMessageDelivered(
                                            o.payloadMessage));
                                        for (var s = s.sort(function(e, t) {
                                            return e.sequence - t.sequence;
                                        }), u = 0, l = s.length; u < l; u++) {
                                            var i = s[u];
                                            if (i.type == h.PUBLISH &&
                                                i.pubRecReceived) {
                                                var c = new _(h.PUBREL,
                                                    {messageIdentifier: i.messageIdentifier});
                                                this._schedule_message(c);
                                            } else this._schedule_message(i);
                                        }
                                        this.connectOptions.onSuccess &&
                                        this.connectOptions.onSuccess(
                                            {invocationContext: this.connectOptions.invocationContext});
                                        var d = !1;
                                        this._reconnecting &&
                                        (d = !0, this._reconnectInterval = 1, this._reconnecting = !1), this._connected(
                                            d,
                                            this._wsuri), this._process_queue();
                                        break;
                                    case h.PUBLISH:
                                        this._receivePublish(e);
                                        break;
                                    case h.PUBACK:
                                        var i = this._sentMessages[e.messageIdentifier];
                                        i &&
                                        (delete this._sentMessages[e.messageIdentifier], localStorage.removeItem('Sent:' +
                                            this._localKey +
                                            e.messageIdentifier), this.onMessageDelivered &&
                                        this.onMessageDelivered(
                                            i.payloadMessage));
                                        break;
                                    case h.PUBREC:
                                        var i = this._sentMessages[e.messageIdentifier];
                                        if (i) {
                                            i.pubRecReceived = !0;
                                            var c = new _(h.PUBREL,
                                                {messageIdentifier: e.messageIdentifier});
                                            this.store('Sent:',
                                                i), this._schedule_message(c);
                                        }
                                        break;
                                    case h.PUBREL:
                                        var r = this._receivedMessages[e.messageIdentifier];
                                        localStorage.removeItem('Received:' +
                                            this._localKey +
                                            e.messageIdentifier), r &&
                                        (this._receiveMessage(
                                            r), delete this._receivedMessages[e.messageIdentifier]);
                                        var f = new _(h.PUBCOMP,
                                            {messageIdentifier: e.messageIdentifier});
                                        this._schedule_message(f);
                                        break;
                                    case h.PUBCOMP:
                                        var i = this._sentMessages[e.messageIdentifier];
                                        delete this._sentMessages[e.messageIdentifier], localStorage.removeItem('Sent:' +
                                            this._localKey +
                                            e.messageIdentifier), this.onMessageDelivered &&
                                        this.onMessageDelivered(
                                            i.payloadMessage);
                                        break;
                                    case h.SUBACK:
                                        var i = this._sentMessages[e.messageIdentifier];
                                        i && (i.timeOut &&
                                        i.timeOut.cancel(), 128 ===
                                        e.returnCode[0]
                                            ? i.onFailure &&
                                            i.onFailure(e.returnCode)
                                            : i.onSuccess && i.onSuccess(
                                            e.returnCode), delete this._sentMessages[e.messageIdentifier]);
                                        break;
                                    case h.UNSUBACK:
                                        var i = this._sentMessages[e.messageIdentifier];
                                        i && (i.timeOut &&
                                        i.timeOut.cancel(), i.callback &&
                                        i.callback(), delete this._sentMessages[e.messageIdentifier]);
                                        break;
                                    case h.PINGRESP:
                                        this.sendPinger.reset();
                                        break;
                                    case h.DISCONNECT:
                                        this._disconnected(
                                            v.INVALID_MQTT_MESSAGE_TYPE.code,
                                            g(v.INVALID_MQTT_MESSAGE_TYPE,
                                                [e.type]));
                                        break;
                                    default:
                                        this._disconnected(
                                            v.INVALID_MQTT_MESSAGE_TYPE.code,
                                            g(v.INVALID_MQTT_MESSAGE_TYPE,
                                                [e.type]));
                                }
                            } catch (e) {
                                var m = 'undefined' == e.hasOwnProperty('stack')
                                    ? e.stack.toString()
                                    : 'No Error Stack Available';
                                return void this._disconnected(
                                    v.INTERNAL_ERROR.code,
                                    g(v.INTERNAL_ERROR, [e.message, m]));
                            }
                        }, R.prototype._on_socket_error = function(e) {
                            this._reconnecting ||
                            this._disconnected(v.SOCKET_ERROR.code,
                                g(v.SOCKET_ERROR, [e.data]));
                        }, R.prototype._on_socket_close = function() {
                            this._reconnecting ||
                            this._disconnected(v.SOCKET_CLOSE.code,
                                g(v.SOCKET_CLOSE));
                        }, R.prototype._socket_send = function(e) {
                            if (1 == e.type) {
                                var t = this._traceMask(e, 'password');
                                this._trace('Client._socket_send', t);
                            } else this._trace('Client._socket_send', e);
                            this.socket.send(
                                e.encode()), this.sendPinger.reset();
                        }, R.prototype._receivePublish = function(e) {
                            switch (e.payloadMessage.qos) {
                                case'undefined':
                                case 0:
                                    this._receiveMessage(e);
                                    break;
                                case 1:
                                    var t = new _(h.PUBACK,
                                        {messageIdentifier: e.messageIdentifier});
                                    this._schedule_message(
                                        t), this._receiveMessage(e);
                                    break;
                                case 2:
                                    this._receivedMessages[e.messageIdentifier] = e, this.store(
                                        'Received:', e);
                                    var i = new _(h.PUBREC,
                                        {messageIdentifier: e.messageIdentifier});
                                    this._schedule_message(i);
                                    break;
                                default:
                                    throw Error('Invaild qos=' +
                                        wireMmessage.payloadMessage.qos);
                            }
                        }, R.prototype._receiveMessage = function(e) {
                            this.onMessageArrived &&
                            this.onMessageArrived(e.payloadMessage);
                        }, R.prototype._connected = function(
                            e, t) {
                            this.onConnected && this.onConnected(e, t);
                        }, R.prototype._reconnect = function() {
                            this._trace('Client._reconnect'), this.connected ||
                            (this._reconnecting = !0, this.sendPinger.cancel(), this.receivePinger.cancel(), this._reconnectInterval <
                            128 && (this._reconnectInterval = 2 *
                                this._reconnectInterval), this.connectOptions.uris
                                ? (this.hostIndex++, this.hostIndex >=
                                this.connectOptions.uris.length &&
                                (this.hostIndex = 0), this._doConnect(
                                    this.connectOptions.uris[this.hostIndex]))
                                : this._doConnect(this.uri));
                        }, R.prototype._disconnected = function(
                            e, t) {
                            if (this._trace('Client._disconnected', e,
                                    t), void 0 !== e &&
                                this._reconnecting) return void(this._reconnectTimeout = new E(
                                this, window, this._reconnectInterval,
                                this._reconnect));
                            if (this.sendPinger.cancel(), this.receivePinger.cancel(), this._connectTimeout &&
                                (this._connectTimeout.cancel(), this._connectTimeout = null), this._msg_queue = [], this._buffered_msg_queue = [], this._notify_msg_sent = {}, this.socket &&
                                (this.socket.onopen = null, this.socket.onmessage = null, this.socket.onerror = null, this.socket.onclose = null, 1 ===
                                this.socket.readyState &&
                                this.socket.close(), delete this.socket), this.connectOptions.uris &&
                                this.hostIndex <
                                this.connectOptions.uris.length -
                                1) this.hostIndex++, this._doConnect(
                                this.connectOptions.uris[this.hostIndex]); else if (void 0 ===
                                e && (e = v.OK.code, t = g(
                                    v.OK)), this.connected) {
                                if (this.connected = !1, this.onConnectionLost &&
                                    this.onConnectionLost({
                                        errorCode: e,
                                        errorMessage: t,
                                        reconnect: this.connectOptions.reconnect,
                                        uri: this._wsuri,
                                    }), e !== v.OK.code &&
                                    this.connectOptions.reconnect) return this._reconnectInterval = 1, void this._reconnect();
                            } else 4 === this.connectOptions.mqttVersion &&
                            !1 === this.connectOptions.mqttVersionExplicit
                                ? (this._trace(
                                    'Failed to connect V4, dropping back to V3'), this.connectOptions.mqttVersion = 3, this.connectOptions.uris
                                    ? (this.hostIndex = 0, this._doConnect(
                                        this.connectOptions.uris[0]))
                                    : this._doConnect(this.uri))
                                : this.connectOptions.onFailure &&
                                this.connectOptions.onFailure({
                                    invocationContext: this.connectOptions.invocationContext,
                                    errorCode: e,
                                    errorMessage: t,
                                });
                        }, R.prototype._trace = function() {
                            if (this.traceFunction) {
                                for (var e in arguments) void 0 !==
                                arguments[e] && arguments.splice(e, 1,
                                    JSON.stringify(arguments[e]));
                                var t = Array.prototype.slice.call(arguments).
                                    join('');
                                this.traceFunction(
                                    {severity: 'Debug', message: t});
                            }
                            if (null !==
                                this._traceBuffer) for (var e = 0, i = arguments.length; e <
                            i; e++) this._traceBuffer.length ==
                            this._MAX_TRACE_ENTRIES &&
                            this._traceBuffer.shift(), 0 === e
                                ? this._traceBuffer.push(arguments[e])
                                : void 0 === arguments[e]
                                    ? this._traceBuffer.push(arguments[e])
                                    : this._traceBuffer.push('  ' +
                                        JSON.stringify(arguments[e]));
                        }, R.prototype._traceMask = function(e, t) {
                            var i = {};
                            for (var r in e) e.hasOwnProperty(r) &&
                            (i[r] = r == t ? '******' : e[r]);
                            return i;
                        };
                        var b = function(e, t, i, r) {
                            var s;
                            if ('string' != typeof e) throw new Error(
                                g(v.INVALID_TYPE, [
                                    void 0 === e
                                        ? 'undefined'
                                        : o(e),
                                    'host']));
                            if (2 == arguments.length) {
                                r = t, s = e;
                                var n = s.match(
                                    /^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/);
                                if (!n) throw new Error(
                                    g(v.INVALID_ARGUMENT, [e, 'host']));
                                e = n[4] || n[2], t = parseInt(n[7]), i = n[8];
                            } else {
                                if (3 == arguments.length &&
                                    (r = i, i = '/mqtt'), 'number' !=
                                    typeof t || t < 0) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === t
                                            ? 'undefined'
                                            : o(t),
                                        'port']));
                                if ('string' != typeof i) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === i
                                            ? 'undefined'
                                            : o(i),
                                        'path']));
                                var a = -1 !== e.indexOf(':') && '[' !==
                                    e.slice(0, 1) && ']' !== e.slice(-1);
                                s = 'ws://' + (a ? '[' + e + ']' : e) + ':' +
                                    t + i;
                            }
                            for (var u = 0, l = 0; l < r.length; l++) {
                                var c = r.charCodeAt(l);
                                55296 <= c && c <= 56319 && l++, u++;
                            }
                            if ('string' != typeof r ||
                                u > 65535) throw new Error(
                                g(v.INVALID_ARGUMENT, [r, 'clientId']));
                            var h = new R(s, e, t, i, r);
                            this._getHost = function() {return e;}, this._setHost = function() {
                                throw new Error(g(v.UNSUPPORTED_OPERATION));
                            }, this._getPort = function() {return t;}, this._setPort = function() {
                                throw new Error(g(v.UNSUPPORTED_OPERATION));
                            }, this._getPath = function() {return i;}, this._setPath = function() {
                                throw new Error(g(v.UNSUPPORTED_OPERATION));
                            }, this._getURI = function() {return s;}, this._setURI = function() {
                                throw new Error(g(v.UNSUPPORTED_OPERATION));
                            }, this._getClientId = function() {return h.clientId;}, this._setClientId = function() {
                                throw new Error(g(v.UNSUPPORTED_OPERATION));
                            }, this._getOnConnected = function() {return h.onConnected;}, this._setOnConnected = function(e) {
                                if ('function' != typeof e) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === e
                                            ? 'undefined'
                                            : o(e),
                                        'onConnected']));
                                h.onConnected = e;
                            }, this._getDisconnectedPublishing = function() {return h.disconnectedPublishing;}, this._setDisconnectedPublishing = function(e) {h.disconnectedPublishing = e;}, this._getDisconnectedBufferSize = function() {return h.disconnectedBufferSize;}, this._setDisconnectedBufferSize = function(e) {h.disconnectedBufferSize = e;}, this._getOnConnectionLost = function() {return h.onConnectionLost;}, this._setOnConnectionLost = function(e) {
                                if ('function' != typeof e) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === e
                                            ? 'undefined'
                                            : o(e),
                                        'onConnectionLost']));
                                h.onConnectionLost = e;
                            }, this._getOnMessageDelivered = function() {return h.onMessageDelivered;}, this._setOnMessageDelivered = function(e) {
                                if ('function' != typeof e) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === e
                                            ? 'undefined'
                                            : o(e),
                                        'onMessageDelivered']));
                                h.onMessageDelivered = e;
                            }, this._getOnMessageArrived = function() {return h.onMessageArrived;}, this._setOnMessageArrived = function(e) {
                                if ('function' != typeof e) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === e
                                            ? 'undefined'
                                            : o(e),
                                        'onMessageArrived']));
                                h.onMessageArrived = e;
                            }, this._getTrace = function() {return h.traceFunction;}, this._setTrace = function(e) {
                                if ('function' != typeof e) throw new Error(
                                    g(v.INVALID_TYPE, [
                                        void 0 === e
                                            ? 'undefined'
                                            : o(e),
                                        'onTrace']));
                                h.traceFunction = e;
                            }, this.connect = function(e) {
                                if (e = e || {}, d(e, {
                                        timeout: 'number',
                                        userName: 'string',
                                        password: 'string',
                                        willMessage: 'object',
                                        keepAliveInterval: 'number',
                                        cleanSession: 'boolean',
                                        useSSL: 'boolean',
                                        invocationContext: 'object',
                                        onSuccess: 'function',
                                        onFailure: 'function',
                                        hosts: 'object',
                                        ports: 'object',
                                        reconnect: 'boolean',
                                        mqttVersion: 'number',
                                        mqttVersionExplicit: 'boolean',
                                        uris: 'object',
                                    }), void 0 === e.keepAliveInterval &&
                                    (e.keepAliveInterval = 60), e.mqttVersion >
                                    4 || e.mqttVersion < 3) throw new Error(
                                    g(v.INVALID_ARGUMENT, [
                                        e.mqttVersion,
                                        'connectOptions.mqttVersion']));
                                if (void 0 === e.mqttVersion
                                        ? (e.mqttVersionExplicit = !1, e.mqttVersion = 4)
                                        : e.mqttVersionExplicit = !0, void 0 !==
                                    e.password &&
                                    void 0 === e.userName) throw new Error(
                                    g(v.INVALID_ARGUMENT, [
                                        e.password,
                                        'connectOptions.password']));
                                if (e.willMessage) {
                                    if (!(e.willMessage instanceof
                                            T)) throw new Error(
                                        g(v.INVALID_TYPE, [
                                            e.willMessage,
                                            'connectOptions.willMessage']));
                                    if (e.willMessage.stringPayload = null, void 0 ===
                                        e.willMessage.destinationName) throw new Error(
                                        g(v.INVALID_TYPE, [
                                            o(e.willMessage.destinationName),
                                            'connectOptions.willMessage.destinationName']));
                                }
                                if (void 0 === e.cleanSession &&
                                    (e.cleanSession = !0), e.hosts) {
                                    if (!(e.hosts instanceof
                                            Array)) throw new Error(
                                        g(v.INVALID_ARGUMENT,
                                            [e.hosts, 'connectOptions.hosts']));
                                    if (e.hosts.length < 1) throw new Error(
                                        g(v.INVALID_ARGUMENT,
                                            [e.hosts, 'connectOptions.hosts']));
                                    for (var t = !1, r = 0; r <
                                    e.hosts.length; r++) {
                                        if ('string' !=
                                            typeof e.hosts[r]) throw new Error(
                                            g(v.INVALID_TYPE, [
                                                o(e.hosts[r]),
                                                'connectOptions.hosts[' + r +
                                                ']']));
                                        if (/^(wss?):\/\/((\[(.+)\])|([^\/]+?))(:(\d+))?(\/.*)$/.test(
                                                e.hosts[r])) {
                                            if (0 ===
                                                r) t = !0; else if (!t) throw new Error(
                                                g(v.INVALID_ARGUMENT, [
                                                    e.hosts[r],
                                                    'connectOptions.hosts[' +
                                                    r + ']']));
                                        } else if (t) throw new Error(
                                            g(v.INVALID_ARGUMENT, [
                                                e.hosts[r],
                                                'connectOptions.hosts[' + r +
                                                ']']));
                                    }
                                    if (t) e.uris = e.hosts; else {
                                        if (!e.ports) throw new Error(
                                            g(v.INVALID_ARGUMENT, [
                                                e.ports,
                                                'connectOptions.ports']));
                                        if (!(e.ports instanceof
                                                Array)) throw new Error(
                                            g(v.INVALID_ARGUMENT, [
                                                e.ports,
                                                'connectOptions.ports']));
                                        if (e.hosts.length !==
                                            e.ports.length) throw new Error(
                                            g(v.INVALID_ARGUMENT, [
                                                e.ports,
                                                'connectOptions.ports']));
                                        e.uris = [];
                                        for (var r = 0; r <
                                        e.hosts.length; r++) {
                                            if ('number' != typeof e.ports[r] ||
                                                e.ports[r] < 0) throw new Error(
                                                g(v.INVALID_TYPE, [
                                                    o(e.ports[r]),
                                                    'connectOptions.ports[' +
                                                    r + ']']));
                                            var n = e.hosts[r], a = e.ports[r],
                                                u = -1 !== n.indexOf(':');
                                            s = 'ws://' +
                                                (u ? '[' + n + ']' : n) + ':' +
                                                a + i, e.uris.push(s);
                                        }
                                    }
                                }
                                h.connect(e);
                            }, this.subscribe = function(e, t) {
                                if ('string' !=
                                    typeof e) throw new Error('Invalid argument:' +
                                    e);
                                if (t = t || {}, d(t, {
                                        qos: 'number',
                                        invocationContext: 'object',
                                        onSuccess: 'function',
                                        onFailure: 'function',
                                        timeout: 'number',
                                    }), t.timeout &&
                                    !t.onFailure) throw new Error(
                                    'subscribeOptions.timeout specified with no onFailure callback.');
                                if (void 0 !== t.qos && 0 !== t.qos &&
                                    1 !== t.qos && 2 !== t.qos) throw new Error(
                                    g(v.INVALID_ARGUMENT,
                                        [t.qos, 'subscribeOptions.qos']));
                                h.subscribe(e, t);
                            }, this.unsubscribe = function(e, t) {
                                if ('string' !=
                                    typeof e) throw new Error('Invalid argument:' +
                                    e);
                                if (t = t || {}, d(t, {
                                        invocationContext: 'object',
                                        onSuccess: 'function',
                                        onFailure: 'function',
                                        timeout: 'number',
                                    }), t.timeout &&
                                    !t.onFailure) throw new Error(
                                    'unsubscribeOptions.timeout specified with no onFailure callback.');
                                h.unsubscribe(e, t);
                            }, this.send = function(e, t, i, r) {
                                var s;
                                if (0 === arguments.length) throw new Error(
                                    'Invalid argument.length');
                                if (1 == arguments.length) {
                                    if (!(e instanceof T) && 'string' !=
                                        typeof e) throw new Error('Invalid argument:' +
                                        (void 0 === e ? 'undefined' : o(e)));
                                    if (s = e, void 0 ===
                                        s.destinationName) throw new Error(
                                        g(v.INVALID_ARGUMENT, [
                                            s.destinationName,
                                            'Message.destinationName']));
                                    h.send(s);
                                } else s = new T(
                                    t), s.destinationName = e, arguments.length >=
                                3 && (s.qos = i), arguments.length >= 4 &&
                                (s.retained = r), h.send(s);
                            }, this.publish = function(e, t, i, r) {
                                console.log('Publising message to: ', e);
                                var s;
                                if (0 === arguments.length) throw new Error(
                                    'Invalid argument.length');
                                if (1 == arguments.length) {
                                    if (!(e instanceof T) && 'string' !=
                                        typeof e) throw new Error('Invalid argument:' +
                                        (void 0 === e ? 'undefined' : o(e)));
                                    if (s = e, void 0 ===
                                        s.destinationName) throw new Error(
                                        g(v.INVALID_ARGUMENT, [
                                            s.destinationName,
                                            'Message.destinationName']));
                                    h.send(s);
                                } else s = new T(
                                    t), s.destinationName = e, arguments.length >=
                                3 && (s.qos = i), arguments.length >= 4 &&
                                (s.retained = r), h.send(s);
                            }, this.disconnect = function() {h.disconnect();}, this.getTraceLog = function() {return h.getTraceLog();}, this.startTrace = function() {h.startTrace();}, this.stopTrace = function() {h.stopTrace();}, this.isConnected = function() {return h.connected;};
                        };
                        b.prototype = {
                            get host() {return this._getHost();},
                            set host(e) {this._setHost(e);},
                            get port() {return this._getPort();},
                            set port(e) {this._setPort(e);},
                            get path() {return this._getPath();},
                            set path(e) {this._setPath(e);},
                            get clientId() {return this._getClientId();},
                            set clientId(e) {this._setClientId(e);},
                            get onConnected() {return this._getOnConnected();},
                            set onConnected(e) {this._setOnConnected(e);},
                            get disconnectedPublishing() {return this._getDisconnectedPublishing();},
                            set disconnectedPublishing(e) {
                                this._setDisconnectedPublishing(e);
                            },
                            get disconnectedBufferSize() {return this._getDisconnectedBufferSize();},
                            set disconnectedBufferSize(e) {
                                this._setDisconnectedBufferSize(e);
                            },
                            get onConnectionLost() {return this._getOnConnectionLost();},
                            set onConnectionLost(e) {
                                this._setOnConnectionLost(e);
                            },
                            get onMessageDelivered() {return this._getOnMessageDelivered();},
                            set onMessageDelivered(e) {
                                this._setOnMessageDelivered(e);
                            },
                            get onMessageArrived() {return this._getOnMessageArrived();},
                            set onMessageArrived(e) {
                                this._setOnMessageArrived(e);
                            },
                            get trace() {return this._getTrace();},
                            set trace(e) {this._setTrace(e);},
                        };
                        var T = function(e) {
                            var t;
                            if (!('string' == typeof e || e instanceof
                                    ArrayBuffer || e instanceof Int8Array ||
                                    e instanceof Uint8Array || e instanceof
                                    Int16Array || e instanceof Uint16Array ||
                                    e instanceof Int32Array || e instanceof
                                    Uint32Array || e instanceof Float32Array ||
                                    e instanceof Float64Array)) throw g(
                                v.INVALID_ARGUMENT, [e, 'newPayload']);
                            t = e, this._getPayloadString = function() {
                                return 'string' == typeof t ? t : c(t, 0,
                                    t.length);
                            }, this._getPayloadBytes = function() {
                                if ('string' == typeof t) {
                                    var e = new ArrayBuffer(u(t)),
                                        i = new Uint8Array(e);
                                    return l(t, i, 0), i;
                                }
                                return t;
                            };
                            var i;
                            this._getDestinationName = function() {return i;}, this._setDestinationName = function(e) {
                                if ('string' != typeof e) throw new Error(
                                    g(v.INVALID_ARGUMENT,
                                        [e, 'newDestinationName']));
                                i = e;
                            };
                            var r = 0;
                            this._getQos = function() {return r;}, this._setQos = function(e) {
                                if (0 !== e && 1 !== e && 2 !==
                                    e) throw new Error('Invalid argument:' + e);
                                r = e;
                            };
                            var s = !1;
                            this._getRetained = function() {return s;}, this._setRetained = function(e) {
                                if ('boolean' != typeof e) throw new Error(
                                    g(v.INVALID_ARGUMENT, [e, 'newRetained']));
                                s = e;
                            };
                            var n = !1;
                            this._getDuplicate = function() {return n;}, this._setDuplicate = function(e) {n = e;};
                        };
                        return T.prototype = {
                            get payloadString() {return this._getPayloadString();},
                            get payloadBytes() {return this._getPayloadBytes();},
                            get destinationName() {return this._getDestinationName();},
                            set destinationName(e) {
                                this._setDestinationName(e);
                            },
                            get topic() {return this._getDestinationName();},
                            set topic(e) {this._setDestinationName(e);},
                            get qos() {return this._getQos();},
                            set qos(e) {this._setQos(e);},
                            get retained() {return this._getRetained();},
                            set retained(e) {this._setRetained(e);},
                            get duplicate() {return this._getDuplicate();},
                            set duplicate(e) {this._setDuplicate(e);},
                        }, {Client: b, Message: T};
                    }(window);
                });
            }).call(t, i(30), i(47)(e));
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(86), a = r(o), u = i(51), l = r(u), c = i(87), h = r(c),
                d = function() {
                    function e() {
                        s(this,
                            e), this._camera = void 0, this._notificater = void 0;
                    }
                    
                    return n(e, null, [
                        {
                            key: 'parseSPS',
                            value: function(e) {
                                return l.default.parseSPS(new Uint8Array(e));
                            },
                        },
                        {
                            key: 'aspectDetect',
                            value: function(e, t) {
                                this._camera ||
                                (this._camera = new a.default), this._camera.setLogCallback(
                                    t), this._camera.detect(e);
                            },
                        },
                        {
                            key: 'notify',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._notificater ||
                                (this._notificater = new h.default), this._notificater.notify(e.title ||
                                    '', e);
                            },
                        }]), e;
                }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(6), u = r(a), l = i(1), c = r(l),
                h = function() {
                    function e() {s(this, e);}
                    
                    return n(e, null, [
                        {
                            key: 'fetch',
                            value: function(e) {
                                var t = 'POST' === String(e.type).toUpperCase(),
                                    i = {
                                        url: e.url || '',
                                        type: t ? 'POST' : 'GET',
                                        error: e.error || function(t) {
                                            c.default.warn('[' + e.url + ']' +
                                                t.toString(), o.LOG.AUTH);
                                        },
                                        success: e.success || function(t) {
                                            c.default.log('[' + e.url + ']' +
                                                t.toString(), o.LOG.AUTH);
                                        },
                                    };
                                e.data && 'POST' === i.type &&
                                (i.data = e.data), u.default.ajax(i);
                            },
                        }]), e;
                }();
            t.default = h;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(2), u = i(5), l = r(u), c = i(1), h = r(c),
                d = i(48), f = r(d), v = i(3), p = r(v), g = function() {
                    function e(t) {
                        s(this,
                            e), this._auther = void 0, this._callback = t, this._isAccessControl = !1;
                    }
                    
                    return n(e, [
                        {
                            key: 'start',
                            value: function(e) {
                                h.default.log('ILive_V2.2.1.20180601',
                                    'Version'), a.Globals.observer
                                    ? a.Globals.observer.removeToAll()
                                    : a.Globals.observer = new p.default(
                                        100), this._parseInitConfig(e ||
                                    {}), this._isAccessControl
                                    ? '' === a.Globals.token ||
                                    a.Globals.isPermission &&
                                    '' === a.Globals.ticket
                                        ? this._callback({
                                            code: o.RSP.ERROR,
                                            message: 'unvalid authenticate',
                                        })
                                        : this._callback({
                                            code: o.RSP.SUCCESS,
                                            message: a.Globals.token,
                                        })
                                    : this._getToken();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this._auther &&
                                (this._auther.stop(), this._auther = void 0), this._callback &&
                                (this._callback = void 0);
                            },
                        },
                        {
                            key: '_getToken',
                            value: function() {
                                var e = this;
                                this._auther || (this._auther = new f.default(
                                    function(t) {
                                        0 === t[o.RSP.CODE] &&
                                        (a.Globals.token = t[o.RSP.MESSAGE]), e._callback &&
                                        e._callback({
                                            code: t[o.RSP.CODE],
                                            message: t[o.RSP.MESSAGE],
                                        });
                                    })), this._auther.start();
                            },
                        },
                        {
                            key: '_parseInitConfig',
                            value: function(e) {
                                for (var t in e) if (e.hasOwnProperty(
                                        t)) switch (t) {
                                    case'host':
                                    case'token':
                                    case'ticket':
                                    case'appId':
                                    case'appKey':
                                    case'userId':
                                    case'sdkType':
                                    case'deviceId':
                                    case'impScene':
                                    case'vimpScene':
                                        a.Globals[t] = e[t];
                                        break;
                                    case'userRole':
                                    case'permissionIndex':
                                        var i = parseInt(e[t]);
                                        isNaN(i) || (a.Globals[t] = i);
                                        break;
                                    case'ssTestHost':
                                    case'rtcTestHost':
                                    case'dispatchTestSSHost':
                                    case'dispatchTestRTCHost':
                                    case'dispatchTestSignalHost':
                                        a.Globals[t] = e[t];
                                        break;
                                    case'logConfig':
                                        var r = e[t] || {};
                                        r.id &&
                                        h.default.setLogPanel(r.id), r.level &&
                                        h.default.setLogLevel(
                                            r.level), r.callback &&
                                        h.default.setLogCallback(r.callback);
                                        break;
                                    case'isPermission':
                                        a.Globals[t] = !('false' === String(e[t]));
                                        break;
                                    case'isAccessControl':
                                        this._isAccessControl = !('false' ===
                                            String(e[t]));
                                }
                                if ('' === a.Globals.deviceId &&
                                    (a.Globals.deviceId = 'web-' +
                                        l.default.uuid()), 'true' === String(
                                        e.enableNotification)) try {l.default.initNotification();} catch (e) {}
                            },
                        }]), e;
                }();
            t.default = g;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(0), c = i(1), h = r(c), d = i(3), f = r(d),
                v = i(15), p = r(v), g = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e.emitter = new f.default(100), e.emitter.listenTo(
                            u.Event.MIX_EVENT, e.onEmitterHandler.bind(
                                e)), e.mixManager = new p.default(e.emitter), e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function(e) {
                                this.config = e || {}, this.config.channelId &&
                                (this.config.roomId = this.config.channelId), this.mixManager &&
                                this.mixManager.start(this.config);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.emitter &&
                                (this.emitter.removeToAll(), this.emitter = void 0), this.mixManager &&
                                (this.mixManager.stop(), this.mixManager = void 0);
                            },
                        },
                        {
                            key: 'create',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixCreate(e);
                            },
                        },
                        {
                            key: 'modify',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixModify(e);
                            },
                        },
                        {
                            key: 'join',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixJoin(e);
                            },
                        },
                        {
                            key: 'quit',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixQuit(e);
                            },
                        },
                        {
                            key: 'status',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixStaus(e);
                            },
                        },
                        {
                            key: 'destroy',
                            value: function(e) {
                                this.mixManager && this.mixManager.mixDestroy(e);
                            },
                        },
                        {
                            key: 'onEmitterHandler',
                            value: function(e) {
                                e && (h.default.log(JSON.stringify(e),
                                    l.LOG.MIX), this.trigger(u.Event.MIX_EVENT, e));
                            },
                        }]), t;
                }(f.default);
            t.default = g;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(8), c = i(1), h = r(c), d = i(0), f = i(2),
                v = i(19), p = r(v), g = i(18), m = r(g), y = i(16), _ = r(y),
                S = i(17), E = r(S), R = i(3), b = r(R), T = i(28), C = r(T),
                O = i(70), P = r(O), I = i(71), k = r(I), w = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e._config = {}, e._isActive = !1, e._pushClass = void 0, e._playClass = void 0, e._pullers = [], e._lastUsers = [], e._isDirectLink = !1, e._isMixControl = !1, e._vChannelId = '', e._vPullers = [], e._lastVUsers = [], e._signalClass = void 0, e._previewClass = void 0, e._licRoomClass = void 0, e._roomRole = l.RoomRole.AUDIENCE, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'init',
                            value: function() {},
                        },
                        {
                            key: 'stop',
                            value: function() {this._isActive = !1, this.stopPreview(), this._releaseLicRoom(), this._destroySignal(), this._destroyStream(), this._unAllPull(), this._unAllVPull();},
                        },
                        {
                            key: 'startPreview',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this.stopPreview(), this._previewClass = new E.default, this._previewClass.start(
                                    e);
                            },
                        },
                        {
                            key: 'stopPreview',
                            value: function() {
                                this._previewClass &&
                                (this._previewClass.stop(), this._previewClass = void 0);
                            },
                        },
                        {
                            key: 'createChannel',
                            value: function(e, t, i) {
                                this.destroyChannel(), this._isActive = !0, this._config = Object.assign(
                                    i, {
                                        userRole: 0,
                                        userId: t,
                                        channelId: e,
                                    }), this._config.roomId = e, this._roomRole = l.RoomRole.ANCHOR, this._isMixControl = !1, this._config.streamConfig &&
                                (this._isMixControl = 'true' === String(
                                    this._config.streamConfig.isMix)), this._createLicRoom(
                                    e, t, i);
                            },
                        },
                        {
                            key: 'destroyChannel',
                            value: function() {this._destroyLicRoom(), this._destroySignal(), this._destroyStream(), this._unAllPull(), this._unAllVPull();},
                        },
                        {
                            key: 'joinChannel',
                            value: function(e, t, i) {
                                this.quitChannel(), this._isActive = !0, this._config = Object.assign(
                                    i, {
                                        userRole: 1,
                                        userId: t,
                                        channelId: e,
                                    }), this._config.roomId = e, this._roomRole = l.RoomRole.AUDIENCE, this._isMixControl = !1, this._config.streamConfig &&
                                (this._config.streamConfig.isMix = !1), this._isDirectLink = 'true' ===
                                    String(
                                        this._config.isDirectLink), this._isDirectLink
                                    ? this.changeRole(l.RoomRole.INTERACTIVE)
                                    : this._createStream(this._config.channelId,
                                        this._config.userId, this._config);
                            },
                        },
                        {
                            key: 'quitChannel',
                            value: function() {this._quitLicRoom(), this._destroySignal(), this._destroyStream(), this._unAllPull(), this._unAllVPull();},
                        },
                        {
                            key: 'changeRole',
                            value: function(e) {
                                this._roomRole !== l.RoomRole.ANCHOR &&
                                (e === l.RoomRole.INTERACTIVE &&
                                this._roomRole === l.RoomRole.AUDIENCE
                                    ? this._config.channelId &&
                                    this._config.userId &&
                                    (this._roomRole = e, this._joinLicRoom())
                                    : e === l.RoomRole.AUDIENCE &&
                                    this._roomRole === l.RoomRole.INTERACTIVE &&
                                    this._config.channelId && this._config.userId &&
                                    (this._roomRole = e, this._quitLicRoom(), this._destroySignal(), this._unAllPull(), this._unAllVPull(), this._destroyPushStream(), this._createStream(
                                        this._config.channelId, this._config.userId,
                                        this._config)));
                            },
                        },
                        {
                            key: 'sendMessage',
                            value: function(e, t) {
                                var i = (arguments.length > 2 &&
                                void 0 !== arguments[2] && arguments[2], t);
                                if ('Object' === Object.prototype.toString.call(t).
                                        slice(8, -1) &&
                                    (i = JSON.stringify(t)), !this._signalClass &&
                                    this._roomRole !== l.RoomRole.ANCHOR) {
                                    var r = {
                                        type: 2,
                                        message: i,
                                        userId: e,
                                    };
                                    this._createSignal(this._config.channelId,
                                        this._config.userId, this._config, r);
                                }
                                this._signalClass &&
                                this._signalClass.sendUnicastMessage(e, i);
                            },
                        },
                        {
                            key: 'broadcastMessage',
                            value: function(e) {
                                var t = e;
                                if ('Object' === Object.prototype.toString.call(e).
                                        slice(8, -1) &&
                                    (t = JSON.stringify(e)), !this._signalClass &&
                                    this._roomRole !== l.RoomRole.ANCHOR) {
                                    var i = {
                                        type: 1,
                                        message: t,
                                    };
                                    this._createSignal(this._config.channelId,
                                        this._config.userId, this._config, i);
                                }
                                this._signalClass &&
                                this._signalClass.sendBroadcastMessage(t);
                            },
                        },
                        {
                            key: 'createVChannel',
                            value: function(e) {
                                this._licRoomClass && e && e.vChannelId &&
                                (this._vChannelId = e.vChannelId, this._licRoomClass.createVRoom(
                                    e));
                            },
                        },
                        {
                            key: 'joinVChannel',
                            value: function(e) {
                                this._licRoomClass && e && e.vChannelId &&
                                (this._vChannelId = e.vChannelId, this._licRoomClass.joinVRoom(
                                    e));
                            },
                        },
                        {
                            key: 'quitVChannel',
                            value: function(e) {
                                this._licRoomClass && e && e.vChannelId &&
                                this._licRoomClass.quitVRoom(e);
                            },
                        },
                        {
                            key: 'destroyVChannel',
                            value: function(e) {
                                this._licRoomClass && e && e.vChannelId &&
                                this._licRoomClass.destroyVRoom(e);
                            },
                        },
                        {
                            key: 'fullVChannel',
                            value: function(e) {
                                this._licRoomClass && e && e.vChannelId &&
                                this._licRoomClass.fullVListRoom(e);
                            },
                        },
                        {
                            key: 'inWhichVChannel',
                            value: function(e) {
                                this._licRoomClass &&
                                this._licRoomClass.inWhichVRoom(e);
                            },
                        },
                        {
                            key: 'debug',
                            value: function(e) {
                                this._playClass && this._playClass.debug(e);
                            },
                        },
                        {
                            key: 'debugSourceBuffer',
                            value: function() {
                                this._playClass &&
                                this._playClass.debugSourceBuffer();
                            },
                        },
                        {
                            key: 'stopAudio',
                            value: function() {
                                this._pushClass && this._pushClass.stopAudio();
                            },
                        },
                        {
                            key: 'stopVideo',
                            value: function() {
                                this._pushClass && this._pushClass.stopVideo();
                            },
                        },
                        {
                            key: '_quit',
                            value: function(e) {
                                return !this._isActive &&
                                    (h.default.debug('[' + e + ']server stop',
                                        d.LOG.ROOM), !0);
                            },
                        },
                        {
                            key: '_createLicRoom',
                            value: function(e, t, i) {
                                this._destroyLicRoom(), this._licRoomClass = new P.default, this._licRoomClass.listenTo(
                                    l.RoomEvent.ROOM_EVENT,
                                    this._onRoomEventHandler.bind(this));
                                var r = Object.assign(i,
                                    {userRole: 0, userId: t, roomId: e});
                                this._licRoomClass.start(
                                    r), this._licRoomClass.createRoom(r);
                            },
                        },
                        {
                            key: '_destroyLicRoom',
                            value: function() {
                                this._licRoomClass &&
                                (this._licRoomClass.removeToAll(), this._licRoomClass.destroyRoom(
                                    {
                                        userId: this._config.userId,
                                        roomId: this._config.channelId,
                                    }), '' !== this._vChannelId &&
                                this.quitVChannel(
                                    {vChannelId: this._vChannelId}), this._licRoomClass.stop(), this._licRoomClass = void 0);
                            },
                        },
                        {
                            key: '_joinLicRoom',
                            value: function() {
                                this._destroyPlayStream(), this._createPushStream(
                                    this._config.channelId, this._config.userId,
                                    this._config), this._quitLicRoom(), this._licRoomClass = new k.default, this._licRoomClass.listenTo(
                                    l.RoomEvent.ROOM_EVENT,
                                    this._onRoomEventHandler.bind(this));
                                var e = Object.assign(this._config,
                                    {userRole: 1, roomId: this._config.channelId});
                                this._licRoomClass.start(
                                    e), this._licRoomClass.joinRoom(e);
                            },
                        },
                        {
                            key: '_quitLicRoom',
                            value: function() {
                                this._licRoomClass &&
                                (this._licRoomClass.removeToAll(), this._licRoomClass.quitRoom(
                                    {
                                        userId: this._config.userId,
                                        roomId: this._config.channelId,
                                    }), '' !== this._vChannelId &&
                                this.quitVChannel(
                                    {vChannelId: this._vChannelId}), this._licRoomClass.stop(), this._licRoomClass = void 0);
                            },
                        },
                        {
                            key: '_fullListRoom',
                            value: function() {
                                this._licRoomClass &&
                                this._licRoomClass.fullListRoom({
                                    roomId: this._config.roomId,
                                    userId: this._config.userId,
                                });
                            },
                        },
                        {
                            key: '_releaseLicRoom',
                            value: function() {
                                this._roomRole !== l.RoomRole.ANCHOR
                                    ? this._quitLicRoom()
                                    : this._destroyLicRoom();
                            },
                        },
                        {
                            key: '_onRoomEventHandler',
                            value: function(e) {
                                if (e && !this._quit('_onRoomEventHandler')) {
                                    var t = e[d.RSP.TYPE], i = e[d.RSP.CODE],
                                        r = e[d.RSP.DATA], s = e[d.RSP.MESSAGE];
                                    switch (t) {
                                        case l.RoomMessage.BROADCAST:
                                            r
                                                ? this._updateBroadcast(r)
                                                : this._unAllPull();
                                            break;
                                        case l.RoomMessage.JOIN_ROOM:
                                        case l.RoomMessage.CREATE_ROOM:
                                            i === d.RSP.SUCCESS &&
                                            (this._isDirectLink ||
                                                this._signalClass ||
                                                this._createSignal(
                                                    this._config.channelId,
                                                    this._config.userId,
                                                    this._config)), t ===
                                            l.RoomMessage.JOIN_ROOM
                                                ? this._dispatchEvent(
                                                    u.LinkEvent.JOIN, i, s, r)
                                                : this._dispatchEvent(
                                                    u.LinkEvent.CREATE, i, s, r);
                                            break;
                                        case l.RoomMessage.DESTROY_ROOM:
                                            (r ? r[d.RSP.ROOMID] : '') ===
                                            this._config.channelId &&
                                            (this._dispatchEvent(
                                                u.LinkEvent.DESTROY, i, s,
                                                r), this.stop());
                                            break;
                                        case l.RoomMessage.JOIN_VROOM:
                                            i !== d.RSP.SUCCESS &&
                                            this._dispatchEvent(u.LinkEvent.JOIN_V,
                                                i, s, r);
                                            break;
                                        case l.RoomMessage.CREATE_VROOM:
                                            i !== d.RSP.SUCCESS &&
                                            this._dispatchEvent(
                                                u.LinkEvent.CREATE_V, i, s, r);
                                            break;
                                        case l.RoomMessage.BROADCAST_V:
                                            this._updateVBroadcast(r);
                                            break;
                                        case l.RoomMessage.DESTROY_VROOM:
                                            this._unAllVPull(), this._isMixControl &&
                                            this._roomRole === l.RoomRole.ANCHOR &&
                                            this._dispatchEvent(
                                                u.LinkEvent.MIX_LAYOUT,
                                                d.RSP.SUCCESS, d.RSP.OK,
                                                {group: []});
                                    }
                                }
                            },
                        },
                        {
                            key: '_pull',
                            value: function(e) {
                                var t = this, i = arguments.length > 1 && void 0 !==
                                    arguments[1] && arguments[1],
                                    r = i ? this._vPullers : this._pullers;
                                if (r.map(function(e) {return e.peerUserId;}).
                                        indexOf(e.userId) < 0) {
                                    var s = new m.default,
                                        n = this._config.streamConfig || {},
                                        o = 'true' === String(n.isMix),
                                        a = 0 === this._config.userRole ? 0 : 1,
                                        l = e.pullUrl || '';
                                    '' === l && (l = f.HOST.PROTOCOL_RTC +
                                        (this._config.host || f.Globals.host) +
                                        '/' + f.Globals.appId + '/' +
                                        this._config.roomId + '/' +
                                        e.userId), s.listenTo(
                                        u.Event.PULL_STREAM_EVENT, function(e) {
                                            if (e && !t._quit(
                                                    'PULL_STREAM_EVENT')) {
                                                var i = e[d.RSP.TYPE],
                                                    r = e[d.RSP.CODE],
                                                    n = e[d.RSP.DATA] || {},
                                                    o = e[d.RSP.MESSAGE];
                                                switch (i) {
                                                    case u.PullStreamEvent.VIDEO_ERROR:
                                                    case u.PullStreamEvent.SERVER_ERROR:
                                                        t._dispatchEvent(
                                                            u.LinkEvent.PULL_EVENT,
                                                            r, o, Object.assign(n, {
                                                                type: i,
                                                                userId: s.peerUserId,
                                                            }));
                                                }
                                            }
                                        }), s.start({
                                        url: l,
                                        userRole: a,
                                        userId: this._config.userId,
                                        isMix: !i && o,
                                    }), r.push(s);
                                } else h.default.debug(e.userId +
                                    ' already in pulling', d.LOG.ROOM);
                            },
                        },
                        {
                            key: '_unPull',
                            value: function(e) {
                                var t = arguments.length > 1 && void 0 !==
                                    arguments[1] && arguments[1],
                                    i = t ? this._vPullers : this._pullers;
                                if (i.map(function(e) {return e.peerUserId;}).
                                        indexOf(e.userId) <
                                    0) h.default.debug(e.userId +
                                    ' no need to unpull as not in pulling',
                                    d.LOG.ROOM); else {
                                    h.default.log('ready to unpull ' + e.userId +
                                        ' stream', d.LOG.ROOM);
                                    for (var r = void 0, s = i, n = 0; n <
                                    s.length; n++) if (r = s[n], e.userId ===
                                        r.peerUserId) {
                                        r.removeToAll(), r.stop(), i.splice(n,
                                            1), r = void 0;
                                        break;
                                    }
                                }
                            },
                        },
                        {
                            key: '_unAllPull',
                            value: function() {
                                this._pullers.forEach(
                                    function(e) {e.stop();}), this._pullers.splice(0,
                                    this._pullers.length), this._pullers = [], this._lastUsers = [], this._roomRole ===
                                l.RoomRole.ANCHOR &&
                                this._dispatchEvent(u.LinkEvent.BROADCAST,
                                    d.RSP.SUCCESS, 'broadcast', {users: []});
                            },
                        },
                        {
                            key: '_unAllVPull',
                            value: function() {
                                this._vPullers.forEach(
                                    function(e) {e.stop();}), this._vPullers.splice(
                                    0,
                                    this._vPullers.length), this._vPullers = [], this._lastVUsers = [];
                            },
                        },
                        {
                            key: '_updateBroadcast',
                            value: function(e) {
                                var t = this;
                                if (e.length <= 0) return void this._unAllPull();
                                var i = this._lastUsers.slice(0,
                                    this._lastUsers.length),
                                    r = i.map(function(e) {return e.userId;});
                                this._lastUsers = e;
                                var s = this._lastUsers.map(
                                    function(e) {return e.userId;}), n = [];
                                i.forEach(function(e) {
                                    e.userId && e.userId !== t._config.userId &&
                                    s.indexOf(e.userId) < 0 && n.push(e);
                                }), n.forEach(function(e) {t._unPull(e);});
                                var o = [];
                                if (e.forEach(function(e) {
                                        e.userId && e.userId !== t._config.userId &&
                                        r.indexOf(e.userId) < 0 && o.push(e);
                                    }), o.forEach(function(e) {
                                        t._pull(e);
                                    }), this._roomRole === l.RoomRole.ANCHOR) {
                                    var a = [];
                                    this._lastUsers.forEach(function(e) {
                                        e.userId && e.userId !== t._config.userId &&
                                        a.push(e.userId);
                                    }), this._dispatchEvent(u.LinkEvent.BROADCAST,
                                        d.RSP.SUCCESS, 'broadcast', {users: a});
                                }
                            },
                        },
                        {
                            key: '_updateVBroadcast',
                            value: function(e) {
                                var t = this;
                                if (e.length <=
                                    0) return this._unAllVPull(), void(this._isMixControl &&
                                    this._roomRole === l.RoomRole.ANCHOR &&
                                    this._dispatchEvent(u.LinkEvent.MIX_LAYOUT,
                                        d.RSP.SUCCESS, d.RSP.OK,
                                        {group: [this._lastUsers]}));
                                var i = this._lastVUsers.slice(0,
                                    this._lastVUsers.length),
                                    r = i.map(function(e) {return e.userId;});
                                this._lastVUsers = e;
                                var s = this._lastVUsers.map(
                                    function(e) {return e.userId;}), n = [];
                                i.forEach(function(e) {
                                    e.userId && s.indexOf(e.userId) < 0 && n.push(e);
                                }), n.forEach(function(e) {t._unPull(e, !0);});
                                var o = [];
                                if (e.forEach(function(e) {
                                        e.userId && e.userId !== t._config.userId &&
                                        r.indexOf(e.userId) < 0 && o.push(e);
                                    }), o.forEach(function(e) {
                                        t._pull(e, !0);
                                    }), this._isMixControl && this._roomRole ===
                                    l.RoomRole.ANCHOR) {
                                    var a = this._sortVRoomByGroup(
                                        this._lastVUsers);
                                    a.unshift(this._lastUsers), this._dispatchEvent(
                                        u.LinkEvent.MIX_LAYOUT, d.RSP.SUCCESS,
                                        d.RSP.OK, {group: a});
                                }
                            },
                        },
                        {
                            key: '_sortVRoomByGroup',
                            value: function(e) {
                                var t = void 0, i = -1, r = [], s = [];
                                return e.forEach(function(e) {
                                    e[d.RSP.ROOMID] &&
                                    (i = r.indexOf(e[d.RSP.ROOMID]), i < 0
                                        ? (r.push(e[d.RSP.ROOMID]), s.push([e]))
                                        : i < s.length && s[i] &&
                                        (t = s[i], t.push(e)));
                                }), s;
                            },
                        },
                        {
                            key: '_createSignal',
                            value: function(e, t, i, r) {
                                this._destroySignal(), this._signalClass = new C.default(
                                    r), this._signalClass.listenTo(
                                    u.Event.SIGNAL_EVENT,
                                    this._onSignalEventHandler.bind(this));
                                var s = f.HOST.SIG_PROTOCOL +
                                    (i.host || f.Globals.host) + '/' +
                                    f.Globals.appId + '/' + e;
                                this._signalClass.connect(s, t, i.groups || [],
                                    {host: i.host, scene: i.scene});
                            },
                        },
                        {
                            key: '_destroySignal',
                            value: function() {
                                this._signalClass &&
                                (this._signalClass.removeToAll(), this._signalClass.disconnect(), this._signalClass = void 0);
                            },
                        },
                        {
                            key: '_onSignalEventHandler',
                            value: function(e) {
                                if (e && !this._quit('_onSignalEventHandler')) {
                                    var t = e[d.RSP.TYPE], i = e[d.RSP.CODE],
                                        r = e[d.RSP.DATA], s = e[d.RSP.MESSAGE];
                                    switch (t) {
                                        case u.SignalEvent.CONNECT_SUCCESS:
                                            this._roomRole !== l.RoomRole.ANCHOR &&
                                            'true' ===
                                            String(this._config.isDirectLink) ||
                                            this._roomRole === l.RoomRole.ANCHOR &&
                                            this._createStream(
                                                this._config.channelId,
                                                this._config.userId, this._config);
                                            break;
                                        case u.SignalEvent.CONNECT_FAILED:
                                            this._roomRole !== l.RoomRole.ANCHOR
                                                ? this._dispatchEvent(
                                                u.LinkEvent.JOIN, i, s, r)
                                                : this._dispatchEvent(
                                                u.LinkEvent.CREATE, i, s, r);
                                            break;
                                        case u.SignalEvent.CONNECT_MSG_SEND:
                                            i !== d.RSP.SUCCESS &&
                                            this._dispatchEvent(
                                                u.LinkEvent.SIG_EVENT, i, s,
                                                Object.assign(r, {type: t}));
                                            break;
                                        case u.SignalEvent.CONNECT_MSG_RECEIVE:
                                            this._dispatchEvent(
                                                u.LinkEvent.SIG_EVENT,
                                                d.RSP.SUCCESS, s,
                                                Object.assign(r, {type: t}));
                                    }
                                }
                            },
                        },
                        {
                            key: '_createStream',
                            value: function(e, t, i) {
                                this._roomRole === l.RoomRole.ANCHOR
                                    ? this._createPushStream(e, t, i)
                                    : this._roomRole === l.RoomRole.AUDIENCE &&
                                    this._createPlayStream(t, i);
                            },
                        },
                        {
                            key: '_destroyStream',
                            value: function() {this._destroyPushStream(), this._destroyPlayStream();},
                        },
                        {
                            key: '_createPushStream',
                            value: function(e, t, i) {
                                this._destroyPushStream(), this._pushClass = new p.default, this._pushClass.listenTo(
                                    u.Event.PUSH_STREAM_EVENT,
                                    this._onPushEventHandler.bind(this));
                                var r = i.streamConfig || {},
                                    s = 'true' === String(r.isSei),
                                    n = 'true' === String(r.isMix),
                                    o = 'true' === String(r.isMixCheck),
                                    a = f.HOST.PROTOCOL_RTC +
                                        (i.host || f.Globals.host) + '/' +
                                        f.Globals.appId + '/' + e + '/' + t,
                                    c = this._roomRole === l.RoomRole.ANCHOR
                                        ? 0
                                        : 1;
                                this._pushClass.start({
                                    url: a,
                                    userRole: c,
                                    isSei: s,
                                    isMix: n,
                                    isMixCheck: o,
                                    mixConfig: r.mixConfig || {},
                                    camConfig: r.camConfig || {audio: !0, video: !0},
                                });
                            },
                        },
                        {
                            key: '_destroyPushStream',
                            value: function() {
                                this._pushClass &&
                                (this._pushClass.removeToAll(), this._pushClass.stop(), this._pushClass = void 0);
                            },
                        },
                        {
                            key: '_onPushEventHandler',
                            value: function(e) {
                                if (e && !this._quit('_onPushEventHandler')) {
                                    var t = e[d.RSP.TYPE], i = e[d.RSP.CODE],
                                        r = e[d.RSP.DATA] || {},
                                        s = e[d.RSP.MESSAGE];
                                    switch (t) {
                                        case u.PushStreamEvent.SERVER_SUCCESS:
                                            this._fullListRoom(), this.inWhichVChannel(
                                                {
                                                    roomId: this._config.roomId,
                                                    userId: this._config.userId,
                                                });
                                            break;
                                        case u.PushStreamEvent.MIX_COMMAND:
                                            i === d.RSP.SUCCESS && this._pullers &&
                                            this._pullers.forEach(
                                                function(e) {e.forceJoinCommand();});
                                            break;
                                        case u.PushStreamEvent.VIDEO_ERROR:
                                        case u.PushStreamEvent.CAMERA_ERROR:
                                        case u.PushStreamEvent.SERVER_ERROR:
                                        case u.PushStreamEvent.STREAMTRACK_CHANGE:
                                            this._dispatchEvent(
                                                u.LinkEvent.PUSH_EVENT, i, s,
                                                Object.assign(r, {type: t}));
                                    }
                                }
                            },
                        },
                        {
                            key: '_createPlayStream',
                            value: function(e, t) {
                                this._destroyPlayStream(), this._playClass = new _.default, this._playClass.listenTo(
                                    u.Event.PLAYER_EVENT,
                                    this._onPlayEventHandler.bind(this));
                                var i = t.playConfig || {},
                                    r = !('false' === String(i.isLiveCatch)), s = 6;
                                if (i.liveDelayTime) {
                                    var n = parseInt(i.liveDelayTime);
                                    isNaN(n) || (s = n);
                                }
                                var o = f.HOST.PROTOCOL + (i.url || '') + '.flv';
                                this._playClass.start({
                                    url: o,
                                    isLive: !0,
                                    userId: e,
                                    isLiveCatch: r,
                                    liveDelayTime: s,
                                    seiConfig: i.seiConfig || {},
                                    enableAudioStrategy: i.enableAudioStrategy,
                                });
                            },
                        },
                        {
                            key: '_destroyPlayStream',
                            value: function() {
                                this._playClass &&
                                (this._playClass.removeToAll(), this._playClass.stop(), this._playClass = void 0);
                            },
                        },
                        {
                            key: '_onPlayEventHandler',
                            value: function(e) {
                                if (e && !this._quit('_onPlayEventHandler')) {
                                    var t = e[d.RSP.TYPE], i = e[d.RSP.CODE],
                                        r = e[d.RSP.DATA] || {},
                                        s = e[d.RSP.MESSAGE];
                                    switch (t) {
                                        case u.PlayEvent.ERROR:
                                        case u.PlayEvent.SOCKET_CLOSE:
                                        case u.PlayEvent.BUFFER_WARNING:
                                            this._dispatchEvent(
                                                u.LinkEvent.PLAY_EVENT, i, s,
                                                Object.assign(r, {type: t}));
                                    }
                                }
                            },
                        },
                        {
                            key: '_dispatchEvent',
                            value: function(e, t, i, r) {
                                if (!this._quit('_dispatchEvent')) {
                                    var s = '{}';
                                    r && (s = JSON.stringify(r)), h.default.log(e +
                                        ', ' + t + ', ' + i + ', ' + s,
                                        d.LOG.ROOM), this.trigger(
                                        u.Event.CHANNEL_EVENT,
                                        {type: e, code: t, message: i, data: r});
                                }
                            },
                        }]), t;
                }(b.default);
            t.default = w;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(4), o = i(28),
                a = function(e) {return e && e.__esModule ? e : {default: e};}(
                    o), u = function() {
                    function e() {r(this, e);}
                    
                    return s(e, [
                        {
                            key: 'createChannel',
                            value: function(e) {
                                var t = new a.default;
                                return e && t.listenTo(n.Event.SIGNAL_EVENT, e), t;
                            },
                        },
                        {
                            key: 'joinChannel',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                    void 0 !== arguments[1] ? arguments[1] : '',
                                    i = arguments.length > 2 &&
                                    void 0 !== arguments[2] ? arguments[2] : '',
                                    r = arguments.length > 3 &&
                                    void 0 !== arguments[3] ? arguments[3] : [],
                                    s = arguments.length > 4 &&
                                    void 0 !== arguments[4] ? arguments[4] : {};
                                e && e.connect(t, i, r, s);
                            },
                        },
                        {
                            key: 'quitChannel',
                            value: function(e) {e && e.disconnect();},
                        },
                        {
                            key: 'sendUnicastMessage',
                            value: function(e, t, i) {
                                if (e) {
                                    var r = i;
                                    'Object' === Object.prototype.toString.call(i).
                                        slice(8, -1) &&
                                    (r = JSON.stringify(i)), e.sendUnicastMessage(t,
                                        r);
                                }
                            },
                        },
                        {
                            key: 'sendMulticastMessage',
                            value: function(e, t, i) {
                                if (e) {
                                    var r = i;
                                    'Object' === Object.prototype.toString.call(i).
                                        slice(8, -1) &&
                                    (r = JSON.stringify(i)), e.sendMulticastMessage(
                                        t, r);
                                }
                            },
                        },
                        {
                            key: 'sendBroadcastMessage',
                            value: function(e, t) {
                                if (e) {
                                    var i = t;
                                    'Object' === Object.prototype.toString.call(t).
                                        slice(8, -1) &&
                                    (i = JSON.stringify(t)), e.sendBroadcastMessage(
                                        i);
                                }
                            },
                        }]), e;
                }();
            t.default = u;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {
                var t = e.length;
                if (t % 4 > 0) throw new Error(
                    'Invalid string. Length must be a multiple of 4');
                return '=' === e[t - 2] ? 2 : '=' === e[t - 1] ? 1 : 0;
            }
            
            function s(e) {return 3 * e.length / 4 - r(e);}
            
            function n(e) {
                var t, i, s, n, o, a = e.length;
                n = r(e), o = new h(3 * a / 4 - n), i = n > 0 ? a - 4 : a;
                var u = 0;
                for (t = 0; t < i; t += 4) s = c[e.charCodeAt(t)] << 18 |
                    c[e.charCodeAt(t + 1)] << 12 | c[e.charCodeAt(t + 2)] << 6 |
                    c[e.charCodeAt(t + 3)], o[u++] = s >> 16 &
                    255, o[u++] = s >> 8 & 255, o[u++] = 255 & s;
                return 2 === n ? (s = c[e.charCodeAt(t)] << 2 |
                    c[e.charCodeAt(t + 1)] >> 4, o[u++] = 255 & s) : 1 === n &&
                    (s = c[e.charCodeAt(t)] << 10 | c[e.charCodeAt(t + 1)] <<
                        4 | c[e.charCodeAt(t + 2)] >> 2, o[u++] = s >> 8 &
                        255, o[u++] = 255 & s), o;
            }
            
            function o(e) {
                return l[e >> 18 & 63] + l[e >> 12 & 63] + l[e >> 6 & 63] +
                    l[63 & e];
            }
            
            function a(e, t, i) {
                for (var r, s = [], n = t; n < i; n += 3) r = (e[n] << 16) +
                    (e[n + 1] << 8) + e[n + 2], s.push(o(r));
                return s.join('');
            }
            
            function u(e) {
                for (var t, i = e.length, r = i %
                    3, s = '', n = [], o = 0, u = i - r; o <
                     u; o += 16383) n.push(
                    a(e, o, o + 16383 > u ? u : o + 16383));
                return 1 === r ? (t = e[i - 1], s += l[t >> 2], s += l[t << 4 &
                63], s += '==') : 2 === r &&
                    (t = (e[i - 2] << 8) + e[i - 1], s += l[t >>
                    10], s += l[t >> 4 & 63], s += l[t << 2 &
                    63], s += '='), n.push(s), n.join('');
            }
            
            t.byteLength = s, t.toByteArray = n, t.fromByteArray = u;
            for (var l = [], c = [], h = 'undefined' != typeof Uint8Array
                ? Uint8Array
                : Array, d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/', f = 0, v = d.length; f <
                 v; ++f) l[f] = d[f], c[d.charCodeAt(f)] = f;
            c['-'.charCodeAt(0)] = 62, c['_'.charCodeAt(0)] = 63;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {
                if (0 == e.length) throw'0 length key';
                this.bf_P = this.Fbf_P(), this.bf_S0 = this.Fbf_S0(), this.bf_S1 = this.Fbf_S1(), this.bf_S2 = this.Fbf_S2(), this.bf_S3 = this.Fbf_S3(), this.escape = function(e) {
                    for (var t = '', i = 0; i < e.length; i++) {
                        var r = e.charCodeAt(i), s = Math.floor(r / 16),
                            n = r % 16;
                        s += s < 10 ? 48 : 55, n += n < 10
                            ? 48
                            : 55, t += String.fromCharCode(s) +
                            String.fromCharCode(n);
                    }
                    return t;
                }, this.wordbyte0 = function(e) {
                    return Math.floor(Math.floor(Math.floor(e / 256) / 256) /
                        256) % 256;
                }, this.wordbyte1 = function(e) {
                    return Math.floor(Math.floor(e / 256) / 256) % 256;
                }, this.wordbyte2 = function(e) {
                    return Math.floor(e / 256) % 256;
                }, this.wordbyte3 = function(e) {
                    return e % 256;
                }, this.xor = function(e, t) {
                    var i = e ^ t;
                    return i < 0 && (i = 4294967296 + i), i;
                }, this.key = e.length > 56 ? e.substr(0, 56) : e;
                for (var t = 0, i = 0; i < 18; ++i) {
                    var r = 256 * (256 *
                        (256 * this.key.charCodeAt(t % this.key.length) +
                            this.key.charCodeAt((t + 1) % this.key.length)) +
                        this.key.charCodeAt((t + 2) % this.key.length)) +
                        this.key.charCodeAt((t + 3) % this.key.length);
                    this.bf_P[i] = this.xor(this.bf_P[i], r), t = (t + 4) %
                        this.key.length;
                }
                this.xl_par = 0, this.xr_par = 0;
                for (var i = 0; i <
                18; i += 2) this.encipher(), this.bf_P[i] = this.xl_par, this.bf_P[i +
                1] = this.xr_par;
                for (t = 0; t <
                256; t += 2) this.encipher(), this.bf_S0[t] = this.xl_par, this.bf_S0[t +
                1] = this.xr_par;
                for (t = 0; t <
                256; t += 2) this.encipher(), this.bf_S1[t] = this.xl_par, this.bf_S1[t +
                1] = this.xr_par;
                for (t = 0; t <
                256; t += 2) this.encipher(), this.bf_S2[t] = this.xl_par, this.bf_S2[t +
                1] = this.xr_par;
                for (t = 0; t <
                256; t += 2) this.encipher(), this.bf_S3[t] = this.xl_par, this.bf_S3[t +
                1] = this.xr_par;
                this.unescape = function(e) {
                    var t = '';
                    for (i = 0; i < e.length; i++) {
                        var r = e.charCodeAt(i++), s = e.charCodeAt(i);
                        r -= r < 58 ? 48 : r > 96 ? 87 : 55, s -= s < 58
                            ? 48
                            : s > 96
                                ? 87
                                : 55, t += String.fromCharCode(16 * r + s);
                    }
                    return t;
                };
            }
            
            r.prototype.Fbf_P = function() {
                return [
                    608135816,
                    2242054355,
                    320440878,
                    57701188,
                    2752067618,
                    698298832,
                    137296536,
                    3964562569,
                    1160258022,
                    953160567,
                    3193202383,
                    887688300,
                    3232508343,
                    3380367581,
                    1065670069,
                    3041331479,
                    2450970073,
                    2306472731];
            }, r.prototype.Fbf_S0 = function() {
                return [
                    3509652390,
                    2564797868,
                    805139163,
                    3491422135,
                    3101798381,
                    1780907670,
                    3128725573,
                    4046225305,
                    614570311,
                    3012652279,
                    134345442,
                    2240740374,
                    1667834072,
                    1901547113,
                    2757295779,
                    4103290238,
                    227898511,
                    1921955416,
                    1904987480,
                    2182433518,
                    2069144605,
                    3260701109,
                    2620446009,
                    720527379,
                    3318853667,
                    677414384,
                    3393288472,
                    3101374703,
                    2390351024,
                    1614419982,
                    1822297739,
                    2954791486,
                    3608508353,
                    3174124327,
                    2024746970,
                    1432378464,
                    3864339955,
                    2857741204,
                    1464375394,
                    1676153920,
                    1439316330,
                    715854006,
                    3033291828,
                    289532110,
                    2706671279,
                    2087905683,
                    3018724369,
                    1668267050,
                    732546397,
                    1947742710,
                    3462151702,
                    2609353502,
                    2950085171,
                    1814351708,
                    2050118529,
                    680887927,
                    999245976,
                    1800124847,
                    3300911131,
                    1713906067,
                    1641548236,
                    4213287313,
                    1216130144,
                    1575780402,
                    4018429277,
                    3917837745,
                    3693486850,
                    3949271944,
                    596196993,
                    3549867205,
                    258830323,
                    2213823033,
                    772490370,
                    2760122372,
                    1774776394,
                    2652871518,
                    566650946,
                    4142492826,
                    1728879713,
                    2882767088,
                    1783734482,
                    3629395816,
                    2517608232,
                    2874225571,
                    1861159788,
                    326777828,
                    3124490320,
                    2130389656,
                    2716951837,
                    967770486,
                    1724537150,
                    2185432712,
                    2364442137,
                    1164943284,
                    2105845187,
                    998989502,
                    3765401048,
                    2244026483,
                    1075463327,
                    1455516326,
                    1322494562,
                    910128902,
                    469688178,
                    1117454909,
                    936433444,
                    3490320968,
                    3675253459,
                    1240580251,
                    122909385,
                    2157517691,
                    634681816,
                    4142456567,
                    3825094682,
                    3061402683,
                    2540495037,
                    79693498,
                    3249098678,
                    1084186820,
                    1583128258,
                    426386531,
                    1761308591,
                    1047286709,
                    322548459,
                    995290223,
                    1845252383,
                    2603652396,
                    3431023940,
                    2942221577,
                    3202600964,
                    3727903485,
                    1712269319,
                    422464435,
                    3234572375,
                    1170764815,
                    3523960633,
                    3117677531,
                    1434042557,
                    442511882,
                    3600875718,
                    1076654713,
                    1738483198,
                    4213154764,
                    2393238008,
                    3677496056,
                    1014306527,
                    4251020053,
                    793779912,
                    2902807211,
                    842905082,
                    4246964064,
                    1395751752,
                    1040244610,
                    2656851899,
                    3396308128,
                    445077038,
                    3742853595,
                    3577915638,
                    679411651,
                    2892444358,
                    2354009459,
                    1767581616,
                    3150600392,
                    3791627101,
                    3102740896,
                    284835224,
                    4246832056,
                    1258075500,
                    768725851,
                    2589189241,
                    3069724005,
                    3532540348,
                    1274779536,
                    3789419226,
                    2764799539,
                    1660621633,
                    3471099624,
                    4011903706,
                    913787905,
                    3497959166,
                    737222580,
                    2514213453,
                    2928710040,
                    3937242737,
                    1804850592,
                    3499020752,
                    2949064160,
                    2386320175,
                    2390070455,
                    2415321851,
                    4061277028,
                    2290661394,
                    2416832540,
                    1336762016,
                    1754252060,
                    3520065937,
                    3014181293,
                    791618072,
                    3188594551,
                    3933548030,
                    2332172193,
                    3852520463,
                    3043980520,
                    413987798,
                    3465142937,
                    3030929376,
                    4245938359,
                    2093235073,
                    3534596313,
                    375366246,
                    2157278981,
                    2479649556,
                    555357303,
                    3870105701,
                    2008414854,
                    3344188149,
                    4221384143,
                    3956125452,
                    2067696032,
                    3594591187,
                    2921233993,
                    2428461,
                    544322398,
                    577241275,
                    1471733935,
                    610547355,
                    4027169054,
                    1432588573,
                    1507829418,
                    2025931657,
                    3646575487,
                    545086370,
                    48609733,
                    2200306550,
                    1653985193,
                    298326376,
                    1316178497,
                    3007786442,
                    2064951626,
                    458293330,
                    2589141269,
                    3591329599,
                    3164325604,
                    727753846,
                    2179363840,
                    146436021,
                    1461446943,
                    4069977195,
                    705550613,
                    3059967265,
                    3887724982,
                    4281599278,
                    3313849956,
                    1404054877,
                    2845806497,
                    146425753,
                    1854211946];
            }, r.prototype.Fbf_S1 = function() {
                return [
                    1266315497,
                    3048417604,
                    3681880366,
                    3289982499,
                    290971e4,
                    1235738493,
                    2632868024,
                    2414719590,
                    3970600049,
                    1771706367,
                    1449415276,
                    3266420449,
                    422970021,
                    1963543593,
                    2690192192,
                    3826793022,
                    1062508698,
                    1531092325,
                    1804592342,
                    2583117782,
                    2714934279,
                    4024971509,
                    1294809318,
                    4028980673,
                    1289560198,
                    2221992742,
                    1669523910,
                    35572830,
                    157838143,
                    1052438473,
                    1016535060,
                    1802137761,
                    1753167236,
                    1386275462,
                    3080475397,
                    2857371447,
                    1040679964,
                    2145300060,
                    2390574316,
                    1461121720,
                    2956646967,
                    4031777805,
                    4028374788,
                    33600511,
                    2920084762,
                    1018524850,
                    629373528,
                    3691585981,
                    3515945977,
                    2091462646,
                    2486323059,
                    586499841,
                    988145025,
                    935516892,
                    3367335476,
                    2599673255,
                    2839830854,
                    265290510,
                    3972581182,
                    2759138881,
                    3795373465,
                    1005194799,
                    847297441,
                    406762289,
                    1314163512,
                    1332590856,
                    1866599683,
                    4127851711,
                    750260880,
                    613907577,
                    1450815602,
                    3165620655,
                    3734664991,
                    3650291728,
                    3012275730,
                    3704569646,
                    1427272223,
                    778793252,
                    1343938022,
                    2676280711,
                    2052605720,
                    1946737175,
                    3164576444,
                    3914038668,
                    3967478842,
                    3682934266,
                    1661551462,
                    3294938066,
                    4011595847,
                    840292616,
                    3712170807,
                    616741398,
                    312560963,
                    711312465,
                    1351876610,
                    322626781,
                    1910503582,
                    271666773,
                    2175563734,
                    1594956187,
                    70604529,
                    3617834859,
                    1007753275,
                    1495573769,
                    4069517037,
                    2549218298,
                    2663038764,
                    504708206,
                    2263041392,
                    3941167025,
                    2249088522,
                    1514023603,
                    1998579484,
                    1312622330,
                    694541497,
                    2582060303,
                    2151582166,
                    1382467621,
                    776784248,
                    2618340202,
                    3323268794,
                    2497899128,
                    2784771155,
                    503983604,
                    4076293799,
                    907881277,
                    423175695,
                    432175456,
                    1378068232,
                    4145222326,
                    3954048622,
                    3938656102,
                    3820766613,
                    2793130115,
                    2977904593,
                    26017576,
                    3274890735,
                    3194772133,
                    1700274565,
                    1756076034,
                    4006520079,
                    3677328699,
                    720338349,
                    1533947780,
                    354530856,
                    688349552,
                    3973924725,
                    1637815568,
                    332179504,
                    3949051286,
                    53804574,
                    2852348879,
                    3044236432,
                    1282449977,
                    3583942155,
                    3416972820,
                    4006381244,
                    1617046695,
                    2628476075,
                    3002303598,
                    1686838959,
                    431878346,
                    2686675385,
                    1700445008,
                    1080580658,
                    1009431731,
                    832498133,
                    3223435511,
                    2605976345,
                    2271191193,
                    2516031870,
                    1648197032,
                    4164389018,
                    2548247927,
                    300782431,
                    375919233,
                    238389289,
                    3353747414,
                    2531188641,
                    2019080857,
                    1475708069,
                    455242339,
                    2609103871,
                    448939670,
                    3451063019,
                    1395535956,
                    2413381860,
                    1841049896,
                    1491858159,
                    885456874,
                    4264095073,
                    4001119347,
                    1565136089,
                    3898914787,
                    1108368660,
                    540939232,
                    1173283510,
                    2745871338,
                    3681308437,
                    4207628240,
                    3343053890,
                    4016749493,
                    1699691293,
                    1103962373,
                    3625875870,
                    2256883143,
                    3830138730,
                    1031889488,
                    3479347698,
                    1535977030,
                    4236805024,
                    3251091107,
                    2132092099,
                    1774941330,
                    1199868427,
                    1452454533,
                    157007616,
                    2904115357,
                    342012276,
                    595725824,
                    1480756522,
                    206960106,
                    497939518,
                    591360097,
                    863170706,
                    2375253569,
                    3596610801,
                    1814182875,
                    2094937945,
                    3421402208,
                    1082520231,
                    3463918190,
                    2785509508,
                    435703966,
                    3908032597,
                    1641649973,
                    2842273706,
                    3305899714,
                    1510255612,
                    2148256476,
                    2655287854,
                    3276092548,
                    4258621189,
                    236887753,
                    3681803219,
                    274041037,
                    1734335097,
                    3815195456,
                    3317970021,
                    1899903192,
                    1026095262,
                    4050517792,
                    356393447,
                    2410691914,
                    3873677099,
                    3682840055];
            }, r.prototype.Fbf_S2 = function() {
                return [
                    3913112168,
                    2491498743,
                    4132185628,
                    2489919796,
                    1091903735,
                    1979897079,
                    3170134830,
                    3567386728,
                    3557303409,
                    857797738,
                    1136121015,
                    1342202287,
                    507115054,
                    2535736646,
                    337727348,
                    3213592640,
                    1301675037,
                    2528481711,
                    1895095763,
                    1721773893,
                    3216771564,
                    62756741,
                    2142006736,
                    835421444,
                    2531993523,
                    1442658625,
                    3659876326,
                    2882144922,
                    676362277,
                    1392781812,
                    170690266,
                    3921047035,
                    1759253602,
                    3611846912,
                    1745797284,
                    664899054,
                    1329594018,
                    3901205900,
                    3045908486,
                    2062866102,
                    2865634940,
                    3543621612,
                    3464012697,
                    1080764994,
                    553557557,
                    3656615353,
                    3996768171,
                    991055499,
                    499776247,
                    1265440854,
                    648242737,
                    3940784050,
                    980351604,
                    3713745714,
                    1749149687,
                    3396870395,
                    4211799374,
                    3640570775,
                    1161844396,
                    3125318951,
                    1431517754,
                    545492359,
                    4268468663,
                    3499529547,
                    1437099964,
                    2702547544,
                    3433638243,
                    2581715763,
                    2787789398,
                    1060185593,
                    1593081372,
                    2418618748,
                    4260947970,
                    69676912,
                    2159744348,
                    86519011,
                    2512459080,
                    3838209314,
                    1220612927,
                    3339683548,
                    133810670,
                    1090789135,
                    1078426020,
                    1569222167,
                    845107691,
                    3583754449,
                    4072456591,
                    1091646820,
                    628848692,
                    1613405280,
                    3757631651,
                    526609435,
                    236106946,
                    48312990,
                    2942717905,
                    3402727701,
                    1797494240,
                    859738849,
                    992217954,
                    4005476642,
                    2243076622,
                    3870952857,
                    3732016268,
                    765654824,
                    3490871365,
                    2511836413,
                    1685915746,
                    3888969200,
                    1414112111,
                    2273134842,
                    3281911079,
                    4080962846,
                    172450625,
                    2569994100,
                    980381355,
                    4109958455,
                    2819808352,
                    2716589560,
                    2568741196,
                    3681446669,
                    3329971472,
                    1835478071,
                    660984891,
                    3704678404,
                    4045999559,
                    3422617507,
                    3040415634,
                    1762651403,
                    1719377915,
                    3470491036,
                    2693910283,
                    3642056355,
                    3138596744,
                    1364962596,
                    2073328063,
                    1983633131,
                    926494387,
                    3423689081,
                    2150032023,
                    4096667949,
                    1749200295,
                    3328846651,
                    309677260,
                    2016342300,
                    1779581495,
                    3079819751,
                    111262694,
                    1274766160,
                    443224088,
                    298511866,
                    1025883608,
                    3806446537,
                    1145181785,
                    168956806,
                    3641502830,
                    3584813610,
                    1689216846,
                    3666258015,
                    3200248200,
                    1692713982,
                    2646376535,
                    4042768518,
                    1618508792,
                    1610833997,
                    3523052358,
                    4130873264,
                    2001055236,
                    3610705100,
                    2202168115,
                    4028541809,
                    2961195399,
                    1006657119,
                    2006996926,
                    3186142756,
                    1430667929,
                    3210227297,
                    1314452623,
                    4074634658,
                    4101304120,
                    2273951170,
                    1399257539,
                    3367210612,
                    3027628629,
                    1190975929,
                    2062231137,
                    2333990788,
                    2221543033,
                    2438960610,
                    1181637006,
                    548689776,
                    2362791313,
                    3372408396,
                    3104550113,
                    3145860560,
                    296247880,
                    1970579870,
                    3078560182,
                    3769228297,
                    1714227617,
                    3291629107,
                    3898220290,
                    166772364,
                    1251581989,
                    493813264,
                    448347421,
                    195405023,
                    2709975567,
                    677966185,
                    3703036547,
                    1463355134,
                    2715995803,
                    1338867538,
                    1343315457,
                    2802222074,
                    2684532164,
                    233230375,
                    2599980071,
                    2000651841,
                    3277868038,
                    1638401717,
                    4028070440,
                    3237316320,
                    6314154,
                    819756386,
                    300326615,
                    590932579,
                    1405279636,
                    3267499572,
                    3150704214,
                    2428286686,
                    3959192993,
                    3461946742,
                    1862657033,
                    1266418056,
                    963775037,
                    2089974820,
                    2263052895,
                    1917689273,
                    448879540,
                    3550394620,
                    3981727096,
                    150775221,
                    3627908307,
                    1303187396,
                    508620638,
                    2975983352,
                    2726630617,
                    1817252668,
                    1876281319,
                    1457606340,
                    908771278,
                    3720792119,
                    3617206836,
                    2455994898,
                    1729034894,
                    1080033504];
            }, r.prototype.Fbf_S3 = function() {
                return [
                    976866871,
                    3556439503,
                    2881648439,
                    1522871579,
                    1555064734,
                    1336096578,
                    3548522304,
                    2579274686,
                    3574697629,
                    3205460757,
                    3593280638,
                    3338716283,
                    3079412587,
                    564236357,
                    2993598910,
                    1781952180,
                    1464380207,
                    3163844217,
                    3332601554,
                    1699332808,
                    1393555694,
                    1183702653,
                    3581086237,
                    1288719814,
                    691649499,
                    2847557200,
                    2895455976,
                    3193889540,
                    2717570544,
                    1781354906,
                    1676643554,
                    2592534050,
                    3230253752,
                    1126444790,
                    2770207658,
                    2633158820,
                    2210423226,
                    2615765581,
                    2414155088,
                    3127139286,
                    673620729,
                    2805611233,
                    1269405062,
                    4015350505,
                    3341807571,
                    4149409754,
                    1057255273,
                    2012875353,
                    2162469141,
                    2276492801,
                    2601117357,
                    993977747,
                    3918593370,
                    2654263191,
                    753973209,
                    36408145,
                    2530585658,
                    25011837,
                    3520020182,
                    2088578344,
                    530523599,
                    2918365339,
                    1524020338,
                    1518925132,
                    3760827505,
                    3759777254,
                    1202760957,
                    3985898139,
                    3906192525,
                    674977740,
                    4174734889,
                    2031300136,
                    2019492241,
                    3983892565,
                    4153806404,
                    3822280332,
                    352677332,
                    2297720250,
                    60907813,
                    90501309,
                    3286998549,
                    1016092578,
                    2535922412,
                    2839152426,
                    457141659,
                    509813237,
                    4120667899,
                    652014361,
                    1966332200,
                    2975202805,
                    55981186,
                    2327461051,
                    676427537,
                    3255491064,
                    2882294119,
                    3433927263,
                    1307055953,
                    942726286,
                    933058658,
                    2468411793,
                    3933900994,
                    4215176142,
                    1361170020,
                    2001714738,
                    2830558078,
                    3274259782,
                    1222529897,
                    1679025792,
                    2729314320,
                    3714953764,
                    1770335741,
                    151462246,
                    3013232138,
                    1682292957,
                    1483529935,
                    471910574,
                    1539241949,
                    458788160,
                    3436315007,
                    1807016891,
                    3718408830,
                    978976581,
                    1043663428,
                    3165965781,
                    1927990952,
                    4200891579,
                    2372276910,
                    3208408903,
                    3533431907,
                    1412390302,
                    2931980059,
                    4132332400,
                    1947078029,
                    3881505623,
                    4168226417,
                    2941484381,
                    1077988104,
                    1320477388,
                    886195818,
                    18198404,
                    3786409e3,
                    2509781533,
                    112762804,
                    3463356488,
                    1866414978,
                    891333506,
                    18488651,
                    661792760,
                    1628790961,
                    3885187036,
                    3141171499,
                    876946877,
                    2693282273,
                    1372485963,
                    791857591,
                    2686433993,
                    3759982718,
                    3167212022,
                    3472953795,
                    2716379847,
                    445679433,
                    3561995674,
                    3504004811,
                    3574258232,
                    54117162,
                    3331405415,
                    2381918588,
                    3769707343,
                    4154350007,
                    1140177722,
                    4074052095,
                    668550556,
                    3214352940,
                    367459370,
                    261225585,
                    2610173221,
                    4209349473,
                    3468074219,
                    3265815641,
                    314222801,
                    3066103646,
                    3808782860,
                    282218597,
                    3406013506,
                    3773591054,
                    379116347,
                    1285071038,
                    846784868,
                    2669647154,
                    3771962079,
                    3550491691,
                    2305946142,
                    453669953,
                    1268987020,
                    3317592352,
                    3279303384,
                    3744833421,
                    2610507566,
                    3859509063,
                    266596637,
                    3847019092,
                    517658769,
                    3462560207,
                    3443424879,
                    370717030,
                    4247526661,
                    2224018117,
                    4143653529,
                    4112773975,
                    2788324899,
                    2477274417,
                    1456262402,
                    2901442914,
                    1517677493,
                    1846949527,
                    2295493580,
                    3734397586,
                    2176403920,
                    1280348187,
                    1908823572,
                    3871786941,
                    846861322,
                    1172426758,
                    3287448474,
                    3383383037,
                    1655181056,
                    3139813346,
                    901632758,
                    1897031941,
                    2986607138,
                    3066810236,
                    3447102507,
                    1393639104,
                    373351379,
                    950779232,
                    625454576,
                    3124240540,
                    4148612726,
                    2007998917,
                    544563296,
                    2244738638,
                    2330496472,
                    2058025392,
                    1291430526,
                    424198748,
                    50039436,
                    29584100,
                    3605783033,
                    2429876329,
                    2791104160,
                    1057563949,
                    3255363231,
                    3075367218,
                    3463963227,
                    1469046755,
                    985887462];
            }, r.prototype.encrypt = function(e) {
                for (var t = 0; t < e.length % 8; t++) e += '\0';
                for (var i = '', t = 0; t < e.length; t += 8) {
                    var r = e.substr(t, 4), s = e.substr(t + 4, 4),
                        n = r.charCodeAt(3) | r.charCodeAt(2) << 8 |
                            r.charCodeAt(1) << 16 | r.charCodeAt(0) << 24;
                    n < 0 && (n = 4294967296 + n);
                    var o = s.charCodeAt(3) | s.charCodeAt(2) << 8 |
                        s.charCodeAt(1) << 16 | s.charCodeAt(0) << 24;
                    o < 0 && (o = 4294967296 +
                        o), this.xl_par = n, this.xr_par = o, this.encipher(), i += this.wordescape(
                        this.xl_par) + this.wordescape(this.xr_par);
                }
                return i;
            }, r.prototype.decrypt = function(e) {
                for (var t = 0; t < e.length % 16; t++) e += '\0';
                for (var i = '', t = 0; t < e.length; t += 16) {
                    var r = this.unescape(e.substr(t, 8)),
                        s = this.unescape(e.substr(t + 8, 8)),
                        n = r.charCodeAt(3) | r.charCodeAt(2) << 8 |
                            r.charCodeAt(1) << 16 | r.charCodeAt(0) << 24;
                    n < 0 && (n = 4294967296 + n);
                    var o = s.charCodeAt(3) | s.charCodeAt(2) << 8 |
                        s.charCodeAt(1) << 16 | s.charCodeAt(0) << 24;
                    o < 0 && (o = 4294967296 +
                        o), this.xl_par = n, this.xr_par = o, this.decipher(), i += this.wordescape(
                        this.xl_par) + this.wordescape(this.xr_par);
                }
                return this.unescape(i);
            }, r.prototype.wordescape = function(e) {
                for (var t = '', i = new Array(this.wordbyte3(e),
                    this.wordbyte2(e), this.wordbyte1(e),
                    this.wordbyte0(e)), r = 3; r >= 0; r--) {
                    var s = Math.floor(i[r] / 16), n = i[r] % 16;
                    s += s < 10 ? 48 : 55, n += n < 10
                        ? 48
                        : 55, t += String.fromCharCode(s) +
                        String.fromCharCode(n);
                }
                return t;
            }, r.prototype.wordunescape = function(e) {
                for (var t = 0, i = 6; i >= 0; i -= 2) {
                    var r = e.charCodeAt(i), s = e.charCodeAt(i + 1);
                    r -= r < 58 ? 48 : 55, s -= s < 58 ? 48 : 55, t = 256 * t +
                        (16 * r + s);
                }
                return t;
            }, r.prototype.round = function(e, t, i) {
                var r = this;
                return r.xor(e, r.xor(r.xor(r.bf_S0[r.wordbyte0(t)] +
                    r.bf_S1[r.wordbyte1(t)], r.bf_S2[r.wordbyte2(t)]) +
                    r.bf_S3[r.wordbyte3(t)], r.bf_P[i]));
            }, r.prototype.encipher = function() {
                var e = this, t = e.xl_par, i = e.xr_par;
                t = e.xor(t, e.bf_P[0]), i = e.round(i, t, 1), t = e.round(t, i,
                    2), i = e.round(i, t, 3), t = e.round(t, i, 4), i = e.round(
                    i, t, 5), t = e.round(t, i, 6), i = e.round(i, t,
                    7), t = e.round(t, i, 8), i = e.round(i, t, 9), t = e.round(
                    t, i, 10), i = e.round(i, t, 11), t = e.round(t, i,
                    12), i = e.round(i, t, 13), t = e.round(t, i,
                    14), i = e.round(i, t, 15), t = e.round(t, i,
                    16), i = e.xor(i, e.bf_P[17]), e.xl_par = i, e.xr_par = t;
            }, r.prototype.decipher = function() {
                var e = this, t = e.xl_par, i = e.xr_par;
                t = e.xor(t, e.bf_P[17]), i = e.round(i, t, 16), t = e.round(t,
                    i, 15), i = e.round(i, t, 14), t = e.round(t, i,
                    13), i = e.round(i, t, 12), t = e.round(t, i,
                    11), i = e.round(i, t, 10), t = e.round(t, i,
                    9), i = e.round(i, t, 8), t = e.round(t, i, 7), i = e.round(
                    i, t, 6), t = e.round(t, i, 5), i = e.round(i, t,
                    4), t = e.round(t, i, 3), i = e.round(i, t, 2), t = e.round(
                    t, i, 1), i = e.xor(i,
                    e.bf_P[0]), e.xl_par = i, e.xr_par = t;
            }, e.exports = r;
        }, function(e, t, i) {
            'use strict';
            (function(e) {
                function r() {
                    return n.TYPED_ARRAY_SUPPORT
                        ? 2147483647
                        : 1073741823;
                }
                
                function s(e, t) {
                    if (r() < t) throw new RangeError(
                        'Invalid typed array length');
                    return n.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(
                        t), e.__proto__ = n.prototype) : (null === e &&
                    (e = new n(t)), e.length = t), e;
                }
                
                function n(e, t, i) {
                    if (!(n.TYPED_ARRAY_SUPPORT || this instanceof
                            n)) return new n(e, t, i);
                    if ('number' == typeof e) {
                        if ('string' == typeof t) throw new Error(
                            'If encoding is specified then the first argument must be a string');
                        return l(this, e);
                    }
                    return o(this, e, t, i);
                }
                
                function o(e, t, i, r) {
                    if ('number' == typeof t) throw new TypeError(
                        '"value" argument must not be a number');
                    return 'undefined' != typeof ArrayBuffer &&
                    t instanceof ArrayBuffer
                        ? d(e, t, i, r)
                        : 'string' == typeof t
                            ? c(e, t, i)
                            : f(e, t);
                }
                
                function a(e) {
                    if ('number' != typeof e) throw new TypeError(
                        '"size" argument must be a number');
                    if (e < 0) throw new RangeError(
                        '"size" argument must not be negative');
                }
                
                function u(e, t, i, r) {
                    return a(t), t <= 0
                        ? s(e, t)
                        : void 0 !== i
                            ? 'string' == typeof r
                                ? s(e, t).fill(i, r)
                                : s(e, t).fill(i)
                            : s(e, t);
                }
                
                function l(e, t) {
                    if (a(t), e = s(e, t < 0 ? 0 : 0 |
                            v(t)), !n.TYPED_ARRAY_SUPPORT) for (var i = 0; i <
                    t; ++i) e[i] = 0;
                    return e;
                }
                
                function c(e, t, i) {
                    if ('string' == typeof i && '' !== i ||
                        (i = 'utf8'), !n.isEncoding(i)) throw new TypeError(
                        '"encoding" must be a valid string encoding');
                    var r = 0 | g(t, i);
                    e = s(e, r);
                    var o = e.write(t, i);
                    return o !== r && (e = e.slice(0, o)), e;
                }
                
                function h(e, t) {
                    var i = t.length < 0 ? 0 : 0 | v(t.length);
                    e = s(e, i);
                    for (var r = 0; r < i; r += 1) e[r] = 255 & t[r];
                    return e;
                }
                
                function d(e, t, i, r) {
                    if (t.byteLength, i < 0 ||
                        t.byteLength < i) throw new RangeError(
                        '\'offset\' is out of bounds');
                    if (t.byteLength < i + (r || 0)) throw new RangeError(
                        '\'length\' is out of bounds');
                    return t = void 0 === i && void 0 === r
                        ? new Uint8Array(t)
                        : void 0 === r
                            ? new Uint8Array(t, i)
                            : new Uint8Array(t, i, r), n.TYPED_ARRAY_SUPPORT
                        ? (e = t, e.__proto__ = n.prototype)
                        : e = h(e, t), e;
                }
                
                function f(e, t) {
                    if (n.isBuffer(t)) {
                        var i = 0 | v(t.length);
                        return e = s(e, i), 0 === e.length ? e : (t.copy(e, 0,
                            0, i), e);
                    }
                    if (t) {
                        if ('undefined' != typeof ArrayBuffer &&
                            t.buffer instanceof ArrayBuffer ||
                            'length' in t) return 'number' != typeof t.length ||
                        J(t.length) ? s(e, 0) : h(e, t);
                        if ('Buffer' === t.type && Z(t.data)) return h(e,
                            t.data);
                    }
                    throw new TypeError(
                        'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
                }
                
                function v(e) {
                    if (e >=
                        r()) throw new RangeError('Attempt to allocate Buffer larger than maximum size: 0x' +
                        r().toString(16) + ' bytes');
                    return 0 | e;
                }
                
                function p(e) {return +e != e && (e = 0), n.alloc(+e);}
                
                function g(e, t) {
                    if (n.isBuffer(e)) return e.length;
                    if ('undefined' != typeof ArrayBuffer &&
                        'function' == typeof ArrayBuffer.isView &&
                        (ArrayBuffer.isView(e) || e instanceof
                            ArrayBuffer)) return e.byteLength;
                    'string' != typeof e && (e = '' + e);
                    var i = e.length;
                    if (0 === i) return 0;
                    for (var r = !1; ;) switch (t) {
                        case'ascii':
                        case'latin1':
                        case'binary':
                            return i;
                        case'utf8':
                        case'utf-8':
                        case void 0:
                            return F(e).length;
                        case'ucs2':
                        case'ucs-2':
                        case'utf16le':
                        case'utf-16le':
                            return 2 * i;
                        case'hex':
                            return i >>> 1;
                        case'base64':
                            return X(e).length;
                        default:
                            if (r) return F(e).length;
                            t = ('' + t).toLowerCase(), r = !0;
                    }
                }
                
                function m(e, t, i) {
                    var r = !1;
                    if ((void 0 === t || t < 0) && (t = 0), t >
                        this.length) return '';
                    if ((void 0 === i || i > this.length) &&
                        (i = this.length), i <= 0) return '';
                    if (i >>>= 0, t >>>= 0, i <= t) return '';
                    for (e || (e = 'utf8'); ;) switch (e) {
                        case'hex':
                            return A(this, t, i);
                        case'utf8':
                        case'utf-8':
                            return I(this, t, i);
                        case'ascii':
                            return w(this, t, i);
                        case'latin1':
                        case'binary':
                            return M(this, t, i);
                        case'base64':
                            return P(this, t, i);
                        case'ucs2':
                        case'ucs-2':
                        case'utf16le':
                        case'utf-16le':
                            return L(this, t, i);
                        default:
                            if (r) throw new TypeError('Unknown encoding: ' +
                                e);
                            e = (e + '').toLowerCase(), r = !0;
                    }
                }
                
                function y(e, t, i) {
                    var r = e[t];
                    e[t] = e[i], e[i] = r;
                }
                
                function _(e, t, i, r, s) {
                    if (0 === e.length) return -1;
                    if ('string' == typeof i
                            ? (r = i, i = 0)
                            : i > 2147483647
                                ? i = 2147483647
                                : i < -2147483648 &&
                                (i = -2147483648), i = +i, isNaN(i) &&
                        (i = s ? 0 : e.length - 1), i < 0 &&
                        (i = e.length + i), i >= e.length) {
                        if (s) return -1;
                        i = e.length - 1;
                    } else if (i < 0) {
                        if (!s) return -1;
                        i = 0;
                    }
                    if ('string' == typeof t && (t = n.from(t, r)), n.isBuffer(
                            t)) return 0 === t.length ? -1 : S(e, t, i, r, s);
                    if ('number' ==
                        typeof t) return t &= 255, n.TYPED_ARRAY_SUPPORT &&
                    'function' == typeof Uint8Array.prototype.indexOf
                        ? s
                            ? Uint8Array.prototype.indexOf.call(e, t, i)
                            : Uint8Array.prototype.lastIndexOf.call(e, t, i)
                        : S(e, [t], i, r, s);
                    throw new TypeError('val must be string, number or Buffer');
                }
                
                function S(e, t, i, r, s) {
                    function n(e, t) {
                        return 1 === o
                            ? e[t]
                            : e.readUInt16BE(t * o);
                    }
                    
                    var o = 1, a = e.length, u = t.length;
                    if (void 0 !== r &&
                        ('ucs2' === (r = String(r).toLowerCase()) || 'ucs-2' ===
                            r || 'utf16le' === r || 'utf-16le' === r)) {
                        if (e.length < 2 || t.length < 2) return -1;
                        o = 2, a /= 2, u /= 2, i /= 2;
                    }
                    var l;
                    if (s) {
                        var c = -1;
                        for (l = i; l < a; l++) if (n(e, l) ===
                            n(t, -1 === c ? 0 : l - c)) {
                            if (-1 === c && (c = l), l - c + 1 === u) return c *
                                o;
                        } else -1 !== c && (l -= l - c), c = -1;
                    } else for (i + u > a && (i = a - u), l = i; l >= 0; l--) {
                        for (var h = !0, d = 0; d < u; d++) if (n(e, l + d) !==
                            n(t, d)) {
                            h = !1;
                            break;
                        }
                        if (h) return l;
                    }
                    return -1;
                }
                
                function E(e, t, i, r) {
                    i = Number(i) || 0;
                    var s = e.length - i;
                    r ? (r = Number(r)) > s && (r = s) : r = s;
                    var n = t.length;
                    if (n % 2 != 0) throw new TypeError('Invalid hex string');
                    r > n / 2 && (r = n / 2);
                    for (var o = 0; o < r; ++o) {
                        var a = parseInt(t.substr(2 * o, 2), 16);
                        if (isNaN(a)) return o;
                        e[i + o] = a;
                    }
                    return o;
                }
                
                function R(e, t, i, r) {return K(F(t, e.length - i), e, i, r);}
                
                function b(e, t, i, r) {return K(Y(t), e, i, r);}
                
                function T(e, t, i, r) {return b(e, t, i, r);}
                
                function C(e, t, i, r) {return K(X(t), e, i, r);}
                
                function O(e, t, i, r) {return K(W(t, e.length - i), e, i, r);}
                
                function P(e, t, i) {
                    return 0 === t && i === e.length
                        ? Q.fromByteArray(e)
                        : Q.fromByteArray(e.slice(t, i));
                }
                
                function I(e, t, i) {
                    i = Math.min(e.length, i);
                    for (var r = [], s = t; s < i;) {
                        var n = e[s], o = null,
                            a = n > 239 ? 4 : n > 223 ? 3 : n > 191 ? 2 : 1;
                        if (s + a <= i) {
                            var u, l, c, h;
                            switch (a) {
                                case 1:
                                    n < 128 && (o = n);
                                    break;
                                case 2:
                                    u = e[s + 1], 128 == (192 & u) &&
                                    (h = (31 & n) << 6 | 63 & u) > 127 &&
                                    (o = h);
                                    break;
                                case 3:
                                    u = e[s + 1], l = e[s + 2], 128 ==
                                    (192 & u) && 128 == (192 & l) &&
                                    (h = (15 & n) << 12 | (63 & u) << 6 | 63 &
                                        l) > 2047 && (h < 55296 || h > 57343) &&
                                    (o = h);
                                    break;
                                case 4:
                                    u = e[s + 1], l = e[s + 2], c = e[s +
                                    3], 128 == (192 & u) && 128 == (192 & l) &&
                                    128 == (192 & c) &&
                                    (h = (15 & n) << 18 | (63 & u) << 12 |
                                        (63 & l) << 6 | 63 & c) > 65535 &&
                                    h < 1114112 && (o = h);
                            }
                        }
                        null === o ? (o = 65533, a = 1) : o > 65535 &&
                            (o -= 65536, r.push(o >>> 10 & 1023 |
                                55296), o = 56320 | 1023 & o), r.push(o), s += a;
                    }
                    return k(r);
                }
                
                function k(e) {
                    var t = e.length;
                    if (t <= $) return String.fromCharCode.apply(String, e);
                    for (var i = '', r = 0; r <
                    t;) i += String.fromCharCode.apply(String,
                        e.slice(r, r += $));
                    return i;
                }
                
                function w(e, t, i) {
                    var r = '';
                    i = Math.min(e.length, i);
                    for (var s = t; s < i; ++s) r += String.fromCharCode(127 &
                        e[s]);
                    return r;
                }
                
                function M(e, t, i) {
                    var r = '';
                    i = Math.min(e.length, i);
                    for (var s = t; s < i; ++s) r += String.fromCharCode(e[s]);
                    return r;
                }
                
                function A(e, t, i) {
                    var r = e.length;
                    (!t || t < 0) && (t = 0), (!i || i < 0 || i > r) && (i = r);
                    for (var s = '', n = t; n < i; ++n) s += q(e[n]);
                    return s;
                }
                
                function L(e, t, i) {
                    for (var r = e.slice(t, i), s = '', n = 0; n <
                    r.length; n += 2) s += String.fromCharCode(r[n] + 256 *
                        r[n + 1]);
                    return s;
                }
                
                function N(e, t, i) {
                    if (e % 1 != 0 || e < 0) throw new RangeError(
                        'offset is not uint');
                    if (e + t > i) throw new RangeError(
                        'Trying to access beyond buffer length');
                }
                
                function D(e, t, i, r, s, o) {
                    if (!n.isBuffer(e)) throw new TypeError(
                        '"buffer" argument must be a Buffer instance');
                    if (t > s || t < o) throw new RangeError(
                        '"value" argument is out of bounds');
                    if (i + r > e.length) throw new RangeError(
                        'Index out of range');
                }
                
                function x(e, t, i, r) {
                    t < 0 && (t = 65535 + t + 1);
                    for (var s = 0, n = Math.min(e.length - i, 2); s <
                    n; ++s) e[i + s] = (t & 255 << 8 * (r ? s : 1 - s)) >>> 8 *
                        (r ? s : 1 - s);
                }
                
                function U(e, t, i, r) {
                    t < 0 && (t = 4294967295 + t + 1);
                    for (var s = 0, n = Math.min(e.length - i, 4); s <
                    n; ++s) e[i + s] = t >>> 8 * (r ? s : 3 - s) & 255;
                }
                
                function H(e, t, i, r, s, n) {
                    if (i + r > e.length) throw new RangeError(
                        'Index out of range');
                    if (i < 0) throw new RangeError('Index out of range');
                }
                
                function V(e, t, i, r, s) {
                    return s || H(e, t, i, 4, 3.4028234663852886e38,
                        -3.4028234663852886e38), z.write(e, t, i, r, 23, 4), i +
                    4;
                }
                
                function G(e, t, i, r, s) {
                    return s || H(e, t, i, 8, 1.7976931348623157e308,
                        -1.7976931348623157e308), z.write(e, t, i, r, 52,
                        8), i + 8;
                }
                
                function B(e) {
                    if (e = j(e).replace(ee, ''), e.length < 2) return '';
                    for (; e.length % 4 != 0;) e += '=';
                    return e;
                }
                
                function j(e) {
                    return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, '');
                }
                
                function q(e) {
                    return e < 16 ? '0' + e.toString(16) : e.toString(16);
                }
                
                function F(e, t) {
                    t = t || 1 / 0;
                    for (var i, r = e.length, s = null, n = [], o = 0; o <
                    r; ++o) {
                        if ((i = e.charCodeAt(o)) > 55295 && i < 57344) {
                            if (!s) {
                                if (i > 56319) {
                                    (t -= 3) > -1 && n.push(239, 191, 189);
                                    continue;
                                }
                                if (o + 1 === r) {
                                    (t -= 3) > -1 && n.push(239, 191, 189);
                                    continue;
                                }
                                s = i;
                                continue;
                            }
                            if (i < 56320) {
                                (t -= 3) > -1 && n.push(239, 191, 189), s = i;
                                continue;
                            }
                            i = 65536 + (s - 55296 << 10 | i - 56320);
                        } else s && (t -= 3) > -1 && n.push(239, 191, 189);
                        if (s = null, i < 128) {
                            if ((t -= 1) < 0) break;
                            n.push(i);
                        } else if (i < 2048) {
                            if ((t -= 2) < 0) break;
                            n.push(i >> 6 | 192, 63 & i | 128);
                        } else if (i < 65536) {
                            if ((t -= 3) < 0) break;
                            n.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i |
                                128);
                        } else {
                            if (!(i < 1114112)) throw new Error(
                                'Invalid code point');
                            if ((t -= 4) < 0) break;
                            n.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 &
                                63 | 128, 63 & i | 128);
                        }
                    }
                    return n;
                }
                
                function Y(e) {
                    for (var t = [], i = 0; i < e.length; ++i) t.push(255 &
                        e.charCodeAt(i));
                    return t;
                }
                
                function W(e, t) {
                    for (var i, r, s, n = [], o = 0; o < e.length &&
                    !((t -= 2) < 0); ++o) i = e.charCodeAt(o), r = i >>
                        8, s = i % 256, n.push(s), n.push(r);
                    return n;
                }
                
                function X(e) {return Q.toByteArray(B(e));}
                
                function K(e, t, i, r) {
                    for (var s = 0; s < r &&
                    !(s + i >= t.length || s >= e.length); ++s) t[s + i] = e[s];
                    return s;
                }
                
                function J(e) {return e !== e;}
                
                var Q = i(37), z = i(41), Z = i(43);
                t.Buffer = n, t.SlowBuffer = p, t.INSPECT_MAX_BYTES = 50, n.TYPED_ARRAY_SUPPORT = void 0 !==
                e.TYPED_ARRAY_SUPPORT
                    ? e.TYPED_ARRAY_SUPPORT
                    : function() {
                        try {
                            var e = new Uint8Array(1);
                            return e.__proto__ = {
                                __proto__: Uint8Array.prototype,
                                foo: function() {return 42;},
                            }, 42 === e.foo() &&
                            'function' == typeof e.subarray &&
                            0 === e.subarray(1, 1).byteLength;
                        } catch (e) {return !1;}
                    }(), t.kMaxLength = r(), n.poolSize = 8192, n._augment = function(e) {return e.__proto__ = n.prototype, e;}, n.from = function(
                    e, t, i) {
                    return o(null, e, t, i);
                }, n.TYPED_ARRAY_SUPPORT &&
                (n.prototype.__proto__ = Uint8Array.prototype, n.__proto__ = Uint8Array, 'undefined' !=
                typeof Symbol && Symbol.species && n[Symbol.species] === n &&
                Object.defineProperty(n, Symbol.species,
                    {value: null, configurable: !0})), n.alloc = function(
                    e, t, i) {
                    return u(null, e, t, i);
                }, n.allocUnsafe = function(e) {
                    return l(null, e);
                }, n.allocUnsafeSlow = function(e) {
                    return l(null, e);
                }, n.isBuffer = function(e) {
                    return !(null == e || !e._isBuffer);
                }, n.compare = function(e, t) {
                    if (!n.isBuffer(e) || !n.isBuffer(t)) throw new TypeError(
                        'Arguments must be Buffers');
                    if (e === t) return 0;
                    for (var i = e.length, r = t.length, s = 0, o = Math.min(i,
                        r); s < o; ++s) if (e[s] !== t[s]) {
                        i = e[s], r = t[s];
                        break;
                    }
                    return i < r ? -1 : r < i ? 1 : 0;
                }, n.isEncoding = function(e) {
                    switch (String(e).toLowerCase()) {
                        case'hex':
                        case'utf8':
                        case'utf-8':
                        case'ascii':
                        case'latin1':
                        case'binary':
                        case'base64':
                        case'ucs2':
                        case'ucs-2':
                        case'utf16le':
                        case'utf-16le':
                            return !0;
                        default:
                            return !1;
                    }
                }, n.concat = function(e, t) {
                    if (!Z(e)) throw new TypeError(
                        '"list" argument must be an Array of Buffers');
                    if (0 === e.length) return n.alloc(0);
                    var i;
                    if (void 0 === t) for (t = 0, i = 0; i <
                    e.length; ++i) t += e[i].length;
                    var r = n.allocUnsafe(t), s = 0;
                    for (i = 0; i < e.length; ++i) {
                        var o = e[i];
                        if (!n.isBuffer(o)) throw new TypeError(
                            '"list" argument must be an Array of Buffers');
                        o.copy(r, s), s += o.length;
                    }
                    return r;
                }, n.byteLength = g, n.prototype._isBuffer = !0, n.prototype.swap16 = function() {
                    var e = this.length;
                    if (e % 2 != 0) throw new RangeError(
                        'Buffer size must be a multiple of 16-bits');
                    for (var t = 0; t < e; t += 2) y(this, t, t + 1);
                    return this;
                }, n.prototype.swap32 = function() {
                    var e = this.length;
                    if (e % 4 != 0) throw new RangeError(
                        'Buffer size must be a multiple of 32-bits');
                    for (var t = 0; t < e; t += 4) y(this, t, t + 3), y(
                        this, t + 1, t + 2);
                    return this;
                }, n.prototype.swap64 = function() {
                    var e = this.length;
                    if (e % 8 != 0) throw new RangeError(
                        'Buffer size must be a multiple of 64-bits');
                    for (var t = 0; t < e; t += 8) y(this, t, t + 7), y(
                        this, t + 1, t + 6), y(this, t + 2, t + 5), y(this, t +
                        3, t + 4);
                    return this;
                }, n.prototype.toString = function() {
                    var e = 0 | this.length;
                    return 0 === e
                        ? ''
                        : 0 === arguments.length
                            ? I(this, 0, e)
                            : m.apply(this, arguments);
                }, n.prototype.equals = function(e) {
                    if (!n.isBuffer(e)) throw new TypeError(
                        'Argument must be a Buffer');
                    return this === e || 0 === n.compare(this, e);
                }, n.prototype.inspect = function() {
                    var e = '', i = t.INSPECT_MAX_BYTES;
                    return this.length > 0 && (e = this.toString('hex', 0, i).
                        match(/.{2}/g).
                        join(' '), this.length > i &&
                    (e += ' ... ')), '<Buffer ' + e + '>';
                }, n.prototype.compare = function(e, t, i, r, s) {
                    if (!n.isBuffer(e)) throw new TypeError(
                        'Argument must be a Buffer');
                    if (void 0 === t && (t = 0), void 0 === i &&
                        (i = e ? e.length : 0), void 0 === r &&
                        (r = 0), void 0 === s && (s = this.length), t < 0 ||
                        i > e.length || r < 0 ||
                        s > this.length) throw new RangeError(
                        'out of range index');
                    if (r >= s && t >= i) return 0;
                    if (r >= s) return -1;
                    if (t >= i) return 1;
                    if (t >>>= 0, i >>>= 0, r >>>= 0, s >>>= 0, this ===
                        e) return 0;
                    for (var o = s - r, a = i - t, u = Math.min(o,
                        a), l = this.slice(r, s), c = e.slice(t, i), h = 0; h <
                         u; ++h) if (l[h] !== c[h]) {
                        o = l[h], a = c[h];
                        break;
                    }
                    return o < a ? -1 : a < o ? 1 : 0;
                }, n.prototype.includes = function(e, t, i) {
                    return -1 !== this.indexOf(e, t, i);
                }, n.prototype.indexOf = function(e, t, i) {
                    return _(this, e, t, i, !0);
                }, n.prototype.lastIndexOf = function(e, t, i) {
                    return _(this, e, t, i, !1);
                }, n.prototype.write = function(e, t, i, r) {
                    if (void 0 ===
                        t) r = 'utf8', i = this.length, t = 0; else if (void 0 ===
                        i && 'string' ==
                        typeof t) r = t, i = this.length, t = 0; else {
                        if (!isFinite(t)) throw new Error(
                            'Buffer.write(string, encoding, offset[, length]) is no longer supported');
                        t |= 0, isFinite(i)
                            ? (i |= 0, void 0 === r && (r = 'utf8'))
                            : (r = i, i = void 0);
                    }
                    var s = this.length - t;
                    if ((void 0 === i || i > s) && (i = s), e.length > 0 &&
                        (i < 0 || t < 0) ||
                        t > this.length) throw new RangeError(
                        'Attempt to write outside buffer bounds');
                    r || (r = 'utf8');
                    for (var n = !1; ;) switch (r) {
                        case'hex':
                            return E(this, e, t, i);
                        case'utf8':
                        case'utf-8':
                            return R(this, e, t, i);
                        case'ascii':
                            return b(this, e, t, i);
                        case'latin1':
                        case'binary':
                            return T(this, e, t, i);
                        case'base64':
                            return C(this, e, t, i);
                        case'ucs2':
                        case'ucs-2':
                        case'utf16le':
                        case'utf-16le':
                            return O(this, e, t, i);
                        default:
                            if (n) throw new TypeError('Unknown encoding: ' +
                                r);
                            r = ('' + r).toLowerCase(), n = !0;
                    }
                }, n.prototype.toJSON = function() {
                    return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0),
                    };
                };
                var $ = 4096;
                n.prototype.slice = function(e, t) {
                    var i = this.length;
                    e = ~~e, t = void 0 === t ? i : ~~t, e < 0 ? (e += i) < 0 &&
                        (e = 0) : e > i && (e = i), t < 0
                        ? (t += i) < 0 && (t = 0)
                        : t > i && (t = i), t < e && (t = e);
                    var r;
                    if (n.TYPED_ARRAY_SUPPORT) r = this.subarray(e,
                        t), r.__proto__ = n.prototype; else {
                        var s = t - e;
                        r = new n(s, void 0);
                        for (var o = 0; o < s; ++o) r[o] = this[o + e];
                    }
                    return r;
                }, n.prototype.readUIntLE = function(e, t, i) {
                    e |= 0, t |= 0, i || N(e, t, this.length);
                    for (var r = this[e], s = 1, n = 0; ++n < t &&
                    (s *= 256);) r += this[e + n] * s;
                    return r;
                }, n.prototype.readUIntBE = function(e, t, i) {
                    e |= 0, t |= 0, i || N(e, t, this.length);
                    for (var r = this[e + --t], s = 1; t > 0 &&
                    (s *= 256);) r += this[e + --t] * s;
                    return r;
                }, n.prototype.readUInt8 = function(e, t) {
                    return t || N(e, 1, this.length), this[e];
                }, n.prototype.readUInt16LE = function(e, t) {
                    return t || N(e, 2, this.length), this[e] | this[e + 1] << 8;
                }, n.prototype.readUInt16BE = function(e, t) {
                    return t || N(e, 2, this.length), this[e] << 8 | this[e + 1];
                }, n.prototype.readUInt32LE = function(e, t) {
                    return t || N(e, 4, this.length), (this[e] | this[e + 1] <<
                        8 | this[e + 2] << 16) + 16777216 * this[e + 3];
                }, n.prototype.readUInt32BE = function(e, t) {
                    return t || N(e, 4, this.length), 16777216 * this[e] +
                    (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
                }, n.prototype.readIntLE = function(e, t, i) {
                    e |= 0, t |= 0, i || N(e, t, this.length);
                    for (var r = this[e], s = 1, n = 0; ++n < t &&
                    (s *= 256);) r += this[e + n] * s;
                    return s *= 128, r >= s && (r -= Math.pow(2, 8 * t)), r;
                }, n.prototype.readIntBE = function(e, t, i) {
                    e |= 0, t |= 0, i || N(e, t, this.length);
                    for (var r = t, s = 1, n = this[e + --r]; r > 0 &&
                    (s *= 256);) n += this[e + --r] * s;
                    return s *= 128, n >= s && (n -= Math.pow(2, 8 * t)), n;
                }, n.prototype.readInt8 = function(e, t) {
                    return t || N(e, 1, this.length), 128 & this[e]
                        ? -1 * (255 - this[e] + 1)
                        : this[e];
                }, n.prototype.readInt16LE = function(e, t) {
                    t || N(e, 2, this.length);
                    var i = this[e] | this[e + 1] << 8;
                    return 32768 & i ? 4294901760 | i : i;
                }, n.prototype.readInt16BE = function(e, t) {
                    t || N(e, 2, this.length);
                    var i = this[e + 1] | this[e] << 8;
                    return 32768 & i ? 4294901760 | i : i;
                }, n.prototype.readInt32LE = function(e, t) {
                    return t || N(e, 4, this.length), this[e] |
                    this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
                }, n.prototype.readInt32BE = function(e, t) {
                    return t || N(e, 4, this.length), this[e] << 24 |
                    this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
                }, n.prototype.readFloatLE = function(e, t) {
                    return t || N(e, 4, this.length), z.read(this, e, !0, 23, 4);
                }, n.prototype.readFloatBE = function(e, t) {
                    return t || N(e, 4, this.length), z.read(this, e, !1, 23, 4);
                }, n.prototype.readDoubleLE = function(e, t) {
                    return t || N(e, 8, this.length), z.read(this, e, !0, 52, 8);
                }, n.prototype.readDoubleBE = function(e, t) {
                    return t || N(e, 8, this.length), z.read(this, e, !1, 52, 8);
                }, n.prototype.writeUIntLE = function(
                    e, t, i, r) {
                    if (e = +e, t |= 0, i |= 0, !r) {
                        D(this, e, t, i, Math.pow(2, 8 * i) - 1, 0);
                    }
                    var s = 1, n = 0;
                    for (this[t] = 255 & e; ++n < i && (s *= 256);) this[t +
                    n] = e / s & 255;
                    return t + i;
                }, n.prototype.writeUIntBE = function(
                    e, t, i, r) {
                    if (e = +e, t |= 0, i |= 0, !r) {
                        D(this, e, t, i, Math.pow(2, 8 * i) - 1, 0);
                    }
                    var s = i - 1, n = 1;
                    for (this[t + s] = 255 & e; --s >= 0 &&
                    (n *= 256);) this[t + s] = e / n & 255;
                    return t + i;
                }, n.prototype.writeUInt8 = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 1, 255, 0), n.TYPED_ARRAY_SUPPORT ||
                    (e = Math.floor(e)), this[t] = 255 & e, t + 1;
                }, n.prototype.writeUInt16LE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 2, 65535, 0), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = 255 & e, this[t + 1] = e >>> 8)
                        : x(this, e, t, !0), t + 2;
                }, n.prototype.writeUInt16BE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 2, 65535, 0), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = e >>> 8, this[t + 1] = 255 & e)
                        : x(this, e, t, !1), t + 2;
                }, n.prototype.writeUInt32LE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 4, 4294967295, 0), n.TYPED_ARRAY_SUPPORT
                        ? (this[t + 3] = e >>> 24, this[t + 2] = e >>>
                            16, this[t + 1] = e >>> 8, this[t] = 255 & e)
                        : U(this, e, t, !0), t + 4;
                }, n.prototype.writeUInt32BE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 4, 4294967295, 0), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t +
                        2] = e >>> 8, this[t + 3] = 255 & e)
                        : U(this, e, t, !1), t + 4;
                }, n.prototype.writeIntLE = function(
                    e, t, i, r) {
                    if (e = +e, t |= 0, !r) {
                        var s = Math.pow(2, 8 * i - 1);
                        D(this, e, t, i, s - 1, -s);
                    }
                    var n = 0, o = 1, a = 0;
                    for (this[t] = 255 & e; ++n < i && (o *= 256);) e < 0 &&
                    0 === a && 0 !== this[t + n - 1] && (a = 1), this[t +
                    n] = (e / o >> 0) - a & 255;
                    return t + i;
                }, n.prototype.writeIntBE = function(
                    e, t, i, r) {
                    if (e = +e, t |= 0, !r) {
                        var s = Math.pow(2, 8 * i - 1);
                        D(this, e, t, i, s - 1, -s);
                    }
                    var n = i - 1, o = 1, a = 0;
                    for (this[t + n] = 255 & e; --n >= 0 && (o *= 256);) e <
                    0 && 0 === a && 0 !== this[t + n + 1] && (a = 1), this[t +
                    n] = (e / o >> 0) - a & 255;
                    return t + i;
                }, n.prototype.writeInt8 = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 1, 127, -128), n.TYPED_ARRAY_SUPPORT ||
                    (e = Math.floor(e)), e < 0 &&
                    (e = 255 + e + 1), this[t] = 255 & e, t + 1;
                }, n.prototype.writeInt16LE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 2, 32767, -32768), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = 255 & e, this[t + 1] = e >>> 8)
                        : x(this, e, t, !0), t + 2;
                }, n.prototype.writeInt16BE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 2, 32767, -32768), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = e >>> 8, this[t + 1] = 255 & e)
                        : x(this, e, t, !1), t + 2;
                }, n.prototype.writeInt32LE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i || D(this, e, t, 4, 2147483647,
                        -2147483648), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t +
                        2] = e >>> 16, this[t + 3] = e >>> 24)
                        : U(this, e, t, !0), t + 4;
                }, n.prototype.writeInt32BE = function(
                    e, t, i) {
                    return e = +e, t |= 0, i ||
                    D(this, e, t, 4, 2147483647, -2147483648), e < 0 &&
                    (e = 4294967295 + e + 1), n.TYPED_ARRAY_SUPPORT
                        ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t +
                        2] = e >>> 8, this[t + 3] = 255 & e)
                        : U(this, e, t, !1), t + 4;
                }, n.prototype.writeFloatLE = function(e, t, i) {
                    return V(this, e, t, !0, i);
                }, n.prototype.writeFloatBE = function(e, t, i) {
                    return V(this, e, t, !1, i);
                }, n.prototype.writeDoubleLE = function(e, t, i) {
                    return G(this, e, t, !0, i);
                }, n.prototype.writeDoubleBE = function(e, t, i) {
                    return G(this, e, t, !1, i);
                }, n.prototype.copy = function(e, t, i, r) {
                    if (i || (i = 0), r || 0 === r || (r = this.length), t >=
                        e.length && (t = e.length), t || (t = 0), r > 0 &&
                        r < i && (r = i), r === i) return 0;
                    if (0 === e.length || 0 === this.length) return 0;
                    if (t < 0) throw new RangeError(
                        'targetStart out of bounds');
                    if (i < 0 || i >= this.length) throw new RangeError(
                        'sourceStart out of bounds');
                    if (r < 0) throw new RangeError('sourceEnd out of bounds');
                    r > this.length && (r = this.length), e.length - t <
                    r - i && (r = e.length - t + i);
                    var s, o = r - i;
                    if (this === e && i < t && t < r) for (s = o - 1; s >=
                    0; --s) e[s + t] = this[s + i]; else if (o < 1e3 ||
                        !n.TYPED_ARRAY_SUPPORT) for (s = 0; s < o; ++s) e[s +
                    t] = this[s + i]; else Uint8Array.prototype.set.call(e,
                        this.subarray(i, i + o), t);
                    return o;
                }, n.prototype.fill = function(e, t, i, r) {
                    if ('string' == typeof e) {
                        if ('string' == typeof t
                                ? (r = t, t = 0, i = this.length)
                                : 'string' == typeof i &&
                                (r = i, i = this.length), 1 === e.length) {
                            var s = e.charCodeAt(0);
                            s < 256 && (e = s);
                        }
                        if (void 0 !== r &&
                            'string' != typeof r) throw new TypeError(
                            'encoding must be a string');
                        if ('string' == typeof r && !n.isEncoding(
                                r)) throw new TypeError('Unknown encoding: ' +
                            r);
                    } else 'number' == typeof e && (e &= 255);
                    if (t < 0 || this.length < t ||
                        this.length < i) throw new RangeError(
                        'Out of range index');
                    if (i <= t) return this;
                    t >>>= 0, i = void 0 === i ? this.length : i >>> 0, e ||
                    (e = 0);
                    var o;
                    if ('number' == typeof e) for (o = t; o <
                    i; ++o) this[o] = e; else {
                        var a = n.isBuffer(e) ? e : F(new n(e, r).toString()),
                            u = a.length;
                        for (o = 0; o < i - t; ++o) this[o + t] = a[o % u];
                    }
                    return this;
                };
                var ee = /[^+\/0-9A-Za-z-_]/g;
            }).call(t, i(46));
        }, function(e, t, i) {
            'use strict';
            
            function r() {
                this._events = this._events ||
                    {}, this._maxListeners = this._maxListeners || void 0;
            }
            
            function s(e) {return 'function' == typeof e;}
            
            function n(e) {return 'number' == typeof e;}
            
            function o(e) {
                return 'object' === (void 0 === e ? 'undefined' : u(e)) &&
                    null !== e;
            }
            
            function a(e) {return void 0 === e;}
            
            var u = 'function' == typeof Symbol &&
            'symbol' == typeof Symbol.iterator
                ? function(e) {return typeof e;}
                : function(e) {
                    return e && 'function' == typeof Symbol &&
                    e.constructor === Symbol && e !== Symbol.prototype
                        ? 'symbol'
                        : typeof e;
                };
            e.exports = r, r.EventEmitter = r, r.prototype._events = void 0, r.prototype._maxListeners = void 0, r.defaultMaxListeners = 10, r.prototype.setMaxListeners = function(e) {
                if (!n(e) || e < 0 || isNaN(e)) throw TypeError(
                    'n must be a positive number');
                return this._maxListeners = e, this;
            }, r.prototype.emit = function(e) {
                var t, i, r, n, u, l;
                if (this._events || (this._events = {}), 'error' === e &&
                    (!this._events.error || o(this._events.error) &&
                        !this._events.error.length)) {
                    if ((t = arguments[1]) instanceof Error) throw t;
                    var c = new Error('Uncaught, unspecified "error" event. (' +
                        t + ')');
                    throw c.context = t, c;
                }
                if (i = this._events[e], a(i)) return !1;
                if (s(i)) switch (arguments.length) {
                    case 1:
                        i.call(this);
                        break;
                    case 2:
                        i.call(this, arguments[1]);
                        break;
                    case 3:
                        i.call(this, arguments[1], arguments[2]);
                        break;
                    default:
                        n = Array.prototype.slice.call(arguments, 1), i.apply(
                            this, n);
                } else if (o(i)) for (n = Array.prototype.slice.call(arguments,
                    1), l = i.slice(), r = l.length, u = 0; u <
                                      r; u++) l[u].apply(this, n);
                return !0;
            }, r.prototype.addListener = function(e, t) {
                var i;
                if (!s(t)) throw TypeError('listener must be a function');
                return this._events ||
                (this._events = {}), this._events.newListener &&
                this.emit('newListener', e,
                    s(t.listener) ? t.listener : t), this._events[e]
                    ? o(this._events[e])
                        ? this._events[e].push(t)
                        : this._events[e] = [this._events[e], t]
                    : this._events[e] = t, o(this._events[e]) &&
                !this._events[e].warned && (i = a(this._maxListeners)
                    ? r.defaultMaxListeners
                    : this._maxListeners) && i > 0 &&
                this._events[e].length > i &&
                (this._events[e].warned = !0, console.error(
                    '(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.',
                    this._events[e].length), 'function' ==
                typeof console.trace && console.trace()), this;
            }, r.prototype.on = r.prototype.addListener, r.prototype.once = function(
                e, t) {
                function i() {
                    this.removeListener(e, i), r ||
                    (r = !0, t.apply(this, arguments));
                }
                
                if (!s(t)) throw TypeError('listener must be a function');
                var r = !1;
                return i.listener = t, this.on(e, i), this;
            }, r.prototype.removeListener = function(e, t) {
                var i, r, n, a;
                if (!s(t)) throw TypeError('listener must be a function');
                if (!this._events || !this._events[e]) return this;
                if (i = this._events[e], n = i.length, r = -1, i === t ||
                    s(i.listener) && i.listener ===
                    t) delete this._events[e], this._events.removeListener &&
                this.emit('removeListener', e, t); else if (o(i)) {
                    for (a = n; a-- > 0;) if (i[a] === t ||
                        i[a].listener && i[a].listener === t) {
                        r = a;
                        break;
                    }
                    if (r < 0) return this;
                    1 === i.length
                        ? (i.length = 0, delete this._events[e])
                        : i.splice(r, 1), this._events.removeListener &&
                    this.emit('removeListener', e, t);
                }
                return this;
            }, r.prototype.removeAllListeners = function(e) {
                var t, i;
                if (!this._events) return this;
                if (!this._events.removeListener) return 0 === arguments.length
                    ? this._events = {}
                    : this._events[e] && delete this._events[e], this;
                if (0 === arguments.length) {
                    for (t in this._events) 'removeListener' !== t &&
                    this.removeAllListeners(t);
                    return this.removeAllListeners(
                        'removeListener'), this._events = {}, this;
                }
                if (i = this._events[e], s(i)) this.removeListener(e,
                    i); else if (i) for (; i.length;) this.removeListener(e,
                    i[i.length - 1]);
                return delete this._events[e], this;
            }, r.prototype.listeners = function(e) {
                return this._events && this._events[e]
                    ? s(this._events[e])
                        ? [this._events[e]]
                        : this._events[e].slice()
                    : [];
            }, r.prototype.listenerCount = function(e) {
                if (this._events) {
                    var t = this._events[e];
                    if (s(t)) return 1;
                    if (t) return t.length;
                }
                return 0;
            }, r.listenerCount = function(e, t) {return e.listenerCount(t);};
        }, function(e, t, i) {
            'use strict';
            t.read = function(e, t, i, r, s) {
                var n, o, a = 8 * s - r - 1, u = (1 << a) - 1, l = u >> 1,
                    c = -7, h = i ? s - 1 : 0, d = i ? -1 : 1, f = e[t + h];
                for (h += d, n = f & (1 << -c) - 1, f >>= -c, c += a; c >
                0; n = 256 * n + e[t + h], h += d, c -= 8) ;
                for (o = n & (1 << -c) - 1, n >>= -c, c += r; c > 0; o = 256 *
                    o + e[t + h], h += d, c -= 8) ;
                if (0 === n) n = 1 - l; else {
                    if (n === u) return o ? NaN : 1 / 0 * (f ? -1 : 1);
                    o += Math.pow(2, r), n -= l;
                }
                return (f ? -1 : 1) * o * Math.pow(2, n - r);
            }, t.write = function(e, t, i, r, s, n) {
                var o, a, u, l = 8 * n - s - 1, c = (1 << l) - 1, h = c >> 1,
                    d = 23 === s ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                    f = r ? 0 : n - 1, v = r ? 1 : -1,
                    p = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;
                for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t)
                    ? 1
                    : 0, o = c) : (o = Math.floor(Math.log(t) / Math.LN2), t *
                (u = Math.pow(2, -o)) < 1 && (o--, u *= 2), t += o + h >= 1
                    ? d / u
                    : d * Math.pow(2, 1 - h), t * u >= 2 && (o++, u /= 2), o +
                h >= c ? (a = 0, o = c) : o + h >= 1 ? (a = (t * u - 1) *
                    Math.pow(2, s), o += h) : (a = t * Math.pow(2, h - 1) *
                    Math.pow(2, s), o = 0)); s >= 8; e[i + f] = 255 &
                    a, f += v, a /= 256, s -= 8) ;
                for (o = o << s | a, l += s; l > 0; e[i + f] = 255 &
                    o, f += v, o /= 256, l -= 8) ;
                e[i + f - v] |= 128 * p;
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {
                return !!e.constructor && 'function' ==
                    typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
            }
            
            function s(e) {
                return 'function' == typeof e.readFloatLE && 'function' ==
                    typeof e.slice && r(e.slice(0, 0));
            }
            
            e.exports = function(e) {
                return null != e && (r(e) || s(e) || !!e._isBuffer);
            };
        }, function(e, t, i) {
            'use strict';
            var r = {}.toString;
            e.exports = Array.isArray ||
                function(e) {return '[object Array]' == r.call(e);};
        }, function(e, t, i) {
            'use strict';
            !function() {
                var t = i(20), r = i(9).utf8, s = i(42), n = i(9).bin,
                    o = function e(i, o) {
                        i.constructor == String
                            ? i = o && 'binary' === o.encoding
                            ? n.stringToBytes(i)
                            : r.stringToBytes(i)
                            : s(i)
                            ? i = Array.prototype.slice.call(i, 0)
                            : Array.isArray(i) || (i = i.toString());
                        for (var a = t.bytesToWords(i), u = 8 *
                            i.length, l = 1732584193, c = -271733879, h = -1732584194, d = 271733878, f = 0; f <
                             a.length; f++) a[f] = 16711935 &
                            (a[f] << 8 | a[f] >>> 24) | 4278255360 &
                            (a[f] << 24 | a[f] >>> 8);
                        a[u >>> 5] |= 128 << u % 32, a[14 +
                        (u + 64 >>> 9 << 4)] = u;
                        for (var v = e._ff, p = e._gg, g = e._hh, m = e._ii, f = 0; f <
                        a.length; f += 16) {
                            var y = l, _ = c, S = h, E = d;
                            l = v(l, c, h, d, a[f + 0], 7, -680876936), d = v(d,
                                l, c, h, a[f + 1], 12, -389564586), h = v(h, d,
                                l, c, a[f + 2], 17, 606105819), c = v(c, h, d,
                                l, a[f + 3], 22, -1044525330), l = v(l, c, h, d,
                                a[f + 4], 7, -176418897), d = v(d, l, c, h,
                                a[f + 5], 12, 1200080426), h = v(h, d, l, c,
                                a[f + 6], 17, -1473231341), c = v(c, h, d, l,
                                a[f + 7], 22, -45705983), l = v(l, c, h, d,
                                a[f + 8], 7, 1770035416), d = v(d, l, c, h,
                                a[f + 9], 12, -1958414417), h = v(h, d, l, c,
                                a[f + 10], 17, -42063), c = v(c, h, d, l,
                                a[f + 11], 22, -1990404162), l = v(l, c, h, d,
                                a[f + 12], 7, 1804603682), d = v(d, l, c, h,
                                a[f + 13], 12, -40341101), h = v(h, d, l, c,
                                a[f + 14], 17, -1502002290), c = v(c, h, d, l,
                                a[f + 15], 22, 1236535329), l = p(l, c, h, d,
                                a[f + 1], 5, -165796510), d = p(d, l, c, h,
                                a[f + 6], 9, -1069501632), h = p(h, d, l, c,
                                a[f + 11], 14, 643717713), c = p(c, h, d, l,
                                a[f + 0], 20, -373897302), l = p(l, c, h, d,
                                a[f + 5], 5, -701558691), d = p(d, l, c, h,
                                a[f + 10], 9, 38016083), h = p(h, d, l, c,
                                a[f + 15], 14, -660478335), c = p(c, h, d, l,
                                a[f + 4], 20, -405537848), l = p(l, c, h, d,
                                a[f + 9], 5, 568446438), d = p(d, l, c, h,
                                a[f + 14], 9, -1019803690), h = p(h, d, l, c,
                                a[f + 3], 14, -187363961), c = p(c, h, d, l,
                                a[f + 8], 20, 1163531501), l = p(l, c, h, d,
                                a[f + 13], 5, -1444681467), d = p(d, l, c, h,
                                a[f + 2], 9, -51403784), h = p(h, d, l, c,
                                a[f + 7], 14, 1735328473), c = p(c, h, d, l,
                                a[f + 12], 20, -1926607734), l = g(l, c, h, d,
                                a[f + 5], 4, -378558), d = g(d, l, c, h,
                                a[f + 8], 11, -2022574463), h = g(h, d, l, c,
                                a[f + 11], 16, 1839030562), c = g(c, h, d, l,
                                a[f + 14], 23, -35309556), l = g(l, c, h, d,
                                a[f + 1], 4, -1530992060), d = g(d, l, c, h,
                                a[f + 4], 11, 1272893353), h = g(h, d, l, c,
                                a[f + 7], 16, -155497632), c = g(c, h, d, l,
                                a[f + 10], 23, -1094730640), l = g(l, c, h, d,
                                a[f + 13], 4, 681279174), d = g(d, l, c, h,
                                a[f + 0], 11, -358537222), h = g(h, d, l, c,
                                a[f + 3], 16, -722521979), c = g(c, h, d, l,
                                a[f + 6], 23, 76029189), l = g(l, c, h, d,
                                a[f + 9], 4, -640364487), d = g(d, l, c, h,
                                a[f + 12], 11, -421815835), h = g(h, d, l, c,
                                a[f + 15], 16, 530742520), c = g(c, h, d, l,
                                a[f + 2], 23, -995338651), l = m(l, c, h, d,
                                a[f + 0], 6, -198630844), d = m(d, l, c, h,
                                a[f + 7], 10, 1126891415), h = m(h, d, l, c,
                                a[f + 14], 15, -1416354905), c = m(c, h, d, l,
                                a[f + 5], 21, -57434055), l = m(l, c, h, d,
                                a[f + 12], 6, 1700485571), d = m(d, l, c, h,
                                a[f + 3], 10, -1894986606), h = m(h, d, l, c,
                                a[f + 10], 15, -1051523), c = m(c, h, d, l,
                                a[f + 1], 21, -2054922799), l = m(l, c, h, d,
                                a[f + 8], 6, 1873313359), d = m(d, l, c, h,
                                a[f + 15], 10, -30611744), h = m(h, d, l, c,
                                a[f + 6], 15, -1560198380), c = m(c, h, d, l,
                                a[f + 13], 21, 1309151649), l = m(l, c, h, d,
                                a[f + 4], 6, -145523070), d = m(d, l, c, h,
                                a[f + 11], 10, -1120210379), h = m(h, d, l, c,
                                a[f + 2], 15, 718787259), c = m(c, h, d, l,
                                a[f + 9], 21, -343485551), l = l + y >>>
                                0, c = c + _ >>> 0, h = h + S >>> 0, d = d +
                                E >>> 0;
                        }
                        return t.endian([l, c, h, d]);
                    };
                o._ff = function(e, t, i, r, s, n, o) {
                    var a = e + (t & i | ~t & r) + (s >>> 0) + o;
                    return (a << n | a >>> 32 - n) + t;
                }, o._gg = function(e, t, i, r, s, n, o) {
                    var a = e + (t & r | i & ~r) + (s >>> 0) + o;
                    return (a << n | a >>> 32 - n) + t;
                }, o._hh = function(e, t, i, r, s, n, o) {
                    var a = e + (t ^ i ^ r) + (s >>> 0) + o;
                    return (a << n | a >>> 32 - n) + t;
                }, o._ii = function(e, t, i, r, s, n, o) {
                    var a = e + (i ^ (t | ~r)) + (s >>> 0) + o;
                    return (a << n | a >>> 32 - n) + t;
                }, o._blocksize = 16, o._digestsize = 16, e.exports = function(
                    e, i) {
                    if (void 0 === e ||
                        null === e) throw new Error('Illegal argument ' + e);
                    var r = t.wordsToBytes(o(e, i));
                    return i && i.asBytes
                        ? r
                        : i && i.asString
                            ? n.bytesToString(r)
                            : t.bytesToHex(r);
                };
            }();
        }, function(e, t, i) {
            'use strict';
            (function(t) {
                !function() {
                    var r = i(20), s = i(9).utf8, n = i(9).bin,
                        o = function(e) {
                            e.constructor == String
                                ? e = s.stringToBytes(e)
                                : void 0 !== t &&
                                'function' == typeof t.isBuffer && t.isBuffer(e)
                                ? e = Array.prototype.slice.call(e, 0)
                                : Array.isArray(e) || (e = e.toString());
                            var i = r.bytesToWords(e), n = 8 * e.length, o = [],
                                a = 1732584193, u = -271733879, l = -1732584194,
                                c = 271733878, h = -1009589776;
                            i[n >> 5] |= 128 << 24 - n % 32, i[15 +
                            (n + 64 >>> 9 << 4)] = n;
                            for (var d = 0; d < i.length; d += 16) {
                                for (var f = a, v = u, p = l, g = c, m = h, y = 0; y <
                                80; y++) {
                                    if (y < 16) o[y] = i[d + y]; else {
                                        var _ = o[y - 3] ^ o[y - 8] ^
                                            o[y - 14] ^ o[y - 16];
                                        o[y] = _ << 1 | _ >>> 31;
                                    }
                                    var S = (a << 5 | a >>> 27) + h +
                                        (o[y] >>> 0) + (y < 20
                                            ? 1518500249 + (u & l | ~u & c)
                                            : y < 40
                                                ? 1859775393 + (u ^ l ^ c)
                                                : y < 60
                                                    ? (u & l | u & c | l & c) -
                                                    1894007588
                                                    : (u ^ l ^ c) - 899497514);
                                    h = c, c = l, l = u << 30 | u >>>
                                        2, u = a, a = S;
                                }
                                a += f, u += v, l += p, c += g, h += m;
                            }
                            return [a, u, l, c, h];
                        }, a = function(e, t) {
                            var i = r.wordsToBytes(o(e));
                            return t && t.asBytes
                                ? i
                                : t && t.asString
                                    ? n.bytesToString(i)
                                    : r.bytesToHex(i);
                        };
                    a._blocksize = 16, a._digestsize = 20, e.exports = a;
                }();
            }).call(t, i(39).Buffer);
        }, function(e, t, i) {
            'use strict';
            var r, s = 'function' == typeof Symbol &&
            'symbol' == typeof Symbol.iterator
                ? function(e) {return typeof e;}
                : function(e) {
                    return e && 'function' == typeof Symbol &&
                    e.constructor === Symbol && e !== Symbol.prototype
                        ? 'symbol'
                        : typeof e;
                };
            r = function() {return this;}();
            try {
                r = r || Function('return this')() || (0, eval)('this');
            } catch (e) {
                'object' ===
                ('undefined' == typeof window ? 'undefined' : s(window)) &&
                (r = window);
            }
            e.exports = r;
        }, function(e, t, i) {
            'use strict';
            e.exports = function(e) {
                return e.webpackPolyfill ||
                (e.deprecate = function() {}, e.paths = [], e.children ||
                (e.children = []), Object.defineProperty(e, 'loaded', {
                    enumerable: !0,
                    get: function() {return e.l;},
                }), Object.defineProperty(e, 'id', {
                    enumerable: !0,
                    get: function() {return e.i;},
                }), e.webpackPolyfill = 1), e;
            };
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(2), u = i(6), l = r(u), c = i(1), h = r(c),
                d = i(29), f = function() {
                    function e(t) {
                        s(this,
                            e), this.callback = t, this.url = '', this.reqOptions = {}, this.isActive = !1, this.retryCount = 0, this.retryTimer = void 0, this.CLIENT = 'ios', this.RETRY_CNT_LIMIT = 3, this.RETRY_TIMER_TIME = 2e3;
                    }
                    
                    return n(e, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !this.isActive &&
                                    (h.default.debug('[' + e + '], server stop',
                                        o.LOG.AUTH), this.stop(), !0);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.isActive = !1, this.destroyRetryTimer();},
                        },
                        {
                            key: 'destroyRetryTimer',
                            value: function() {
                                this.retryCount = 0, this.retryTimer &&
                                (window.clearTimeout(
                                    this.retryTimer), delete this.retryTimer, this.retryTimer = void 0);
                            },
                        },
                        {
                            key: 'start',
                            value: function() {
                                this.isActive = !0, this.url = a.HOST.PROTOCOL, '' ===
                                a.Globals.ssTestHost
                                    ? this.url += a.HOST.SS_HOST + '/'
                                    : this.url += a.Globals.ssTestHost +
                                        '/', this.url += 'sls/room/auth', this.reqOptions = {
                                    command: o.HTTP.AUTH,
                                    host: a.Globals.host,
                                    appId: a.Globals.appId,
                                    userId: a.Globals.userId,
                                    scene: a.Globals.impScene,
                                    deviceId: a.Globals.deviceId,
                                    userRole: a.Globals.permissionIndex,
                                    token: d.SHA1.sha1(a.Globals.appId +
                                        a.Globals.userId + a.Globals.appKey),
                                    param: {
                                        sdk: a.Globals.sdkType,
                                        appid: a.Globals.appId,
                                        appkey: a.Globals.appKey,
                                        t: (new Date).getTime().toString(),
                                        v: 1,
                                        version: 1,
                                        type: this.CLIENT,
                                    },
                                }, a.Globals.isPermission ||
                                (this.reqOptions.userRole = a.Globals.userRole), this.sendRequest();
                            },
                        },
                        {
                            key: 'resendRequest',
                            value: function() {
                                this.retryCount < this.RETRY_CNT_LIMIT
                                    ? (this.retryCount++, h.default.log('retry auth after ' +
                                    this.RETRY_TIMER_TIME + 'ms',
                                    o.LOG.AUTH), this.retryTimer = window.setTimeout(
                                    this.sendRequest.bind(this),
                                    this.RETRY_TIMER_TIME))
                                    : (this.stop(), h.default.warn(
                                    'retry auth limit', o.LOG.AUTH), this.callback({
                                        code: o.RSP.ERROR,
                                        message: 'retry auth limit',
                                    }));
                            },
                        },
                        {
                            key: 'sendRequest',
                            value: function() {
                                var e = this;
                                if (!this.quit('sendRequest')) {
                                    new Promise(function(t, i) {
                                        l.default.ajax({
                                            url: e.url,
                                            type: 'POST',
                                            error: i,
                                            success: t,
                                            data: e.reqOptions,
                                        });
                                    }).then(function(t) {
                                        if (!e.quit('authPromise done')) {
                                            if (!t) return void e.resendRequest();
                                            var i = {}, r = '', s = '',
                                                n = o.RSP.ERROR;
                                            e.retryCount = 0;
                                            try {
                                                i = JSON.parse(t) || {}, s = String(
                                                    i[o.RSP.MSG]), r = String(
                                                    i[o.RSP.TOKEN]), n = parseInt(
                                                    i[o.RSP.STATUS]);
                                            } catch (e) {n = o.RSP.ERROR, s = e.toString();}
                                            e.callback && e.callback(
                                                {code: n, message: 0 === n ? r : s});
                                        }
                                    }, function(t) {
                                        e.quit('authPromise failed') ||
                                        (t && t.message &&
                                        h.default.debug('authPromise failed: ' +
                                            t.message,
                                            o.LOG.AUTH), e.resendRequest());
                                    });
                                }
                            },
                        }]), e;
                }();
            t.default = f;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function s(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            function n(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var o = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), a = t.RuntimeException = function() {
                function e(t) {
                    n(this, e), this._message = t;
                }
                
                return o(e, [
                    {
                        key: 'toString',
                        value: function() {
                            return this.name + ': ' + this.message;
                        },
                    },
                    {
                        key: 'name',
                        get: function() {return 'RuntimeException';},
                    },
                    {
                        key: 'message',
                        get: function() {return this._message;},
                    }]), e;
            }();
            t.IllegalStateException = function(e) {
                function t(e) {
                    return n(this, t), r(this,
                        (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                }
                
                return s(t, e), o(t, [
                    {
                        key: 'name',
                        get: function() {return 'IllegalStateException';},
                    }]), t;
            }(a), t.InvalidArgumentException = function(e) {
                function t(e) {
                    return n(this, t), r(this,
                        (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                }
                
                return s(t, e), o(t, [
                    {
                        key: 'name',
                        get: function() {return 'InvalidArgumentException';},
                    }]), t;
            }(a), t.NotImplementedException = function(e) {
                function t(e) {
                    return n(this, t), r(this,
                        (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
                }
                
                return s(t, e), o(t, [
                    {
                        key: 'name',
                        get: function() {return 'NotImplementedException';},
                    }]), t;
            }(a);
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = i(49), o = function() {
                function e(t) {
                    r(this,
                        e), this.TAG = 'ExpGolomb', this._buffer = t, this._buffer_index = 0, this._total_bytes = t.byteLength, this._total_bits = 8 *
                        t.byteLength, this._current_word = 0, this._current_word_bits_left = 0;
                }
                
                return s(e, [
                    {
                        key: 'destroy',
                        value: function() {this._buffer = null;},
                    },
                    {
                        key: '_fillCurrentWord',
                        value: function() {
                            var e = this._total_bytes - this._buffer_index;
                            if (e <= 0) throw new n.IllegalStateException(
                                'ExpGolomb: _fillCurrentWord() but no bytes available');
                            var t = Math.min(4, e), i = new Uint8Array(4);
                            i.set(this._buffer.subarray(
                                this._buffer_index, this._buffer_index +
                                t)), this._current_word = new DataView(
                                i.buffer).getUint32(0,
                                !1), this._buffer_index += t, this._current_word_bits_left = 8 *
                                t;
                        },
                    },
                    {
                        key: 'readBits',
                        value: function(e) {
                            if (e > 32) throw new n.InvalidArgumentException(
                                'ExpGolomb: readBits() bits exceeded max 32bits!');
                            if (e <= this._current_word_bits_left) {
                                var t = this._current_word >>> 32 - e;
                                return this._current_word <<= e, this._current_word_bits_left -= e, t;
                            }
                            var i = this._current_word_bits_left
                                ? this._current_word
                                : 0;
                            i >>>= 32 - this._current_word_bits_left;
                            var r = e - this._current_word_bits_left;
                            this._fillCurrentWord();
                            var s = Math.min(r, this._current_word_bits_left),
                                o = this._current_word >>> 32 - s;
                            return this._current_word <<= s, this._current_word_bits_left -= s, i = i <<
                                s | o;
                        },
                    },
                    {
                        key: 'readBool',
                        value: function() {return 1 === this.readBits(1);},
                    },
                    {
                        key: 'readByte',
                        value: function() {return this.readBits(8);},
                    },
                    {
                        key: '_skipLeadingZero',
                        value: function() {
                            var e = void 0;
                            for (e = 0; e <
                            this._current_word_bits_left; e++) if (0 !=
                                (this._current_word & 2147483648 >>>
                                    e)) return this._current_word <<= e, this._current_word_bits_left -= e, e;
                            return this._fillCurrentWord(), e +
                            this._skipLeadingZero();
                        },
                    },
                    {
                        key: 'readUEG',
                        value: function() {
                            var e = this._skipLeadingZero();
                            return this.readBits(e + 1) - 1;
                        },
                    },
                    {
                        key: 'readSEG',
                        value: function() {
                            var e = this.readUEG();
                            return 1 & e ? e + 1 >>> 1 : -1 * (e >>> 1);
                        },
                    }]), e;
            }();
            t.default = o;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(50),
                o = function(e) {return e && e.__esModule ? e : {default: e};}(
                    n), a = function() {
                    function e() {r(this, e);}
                    
                    return s(e, null, [
                        {
                            key: '_ebsp2rbsp',
                            value: function(e) {
                                for (var t = e, i = t.byteLength, r = new Uint8Array(
                                    i), s = 0, n = 0; n < i; n++) n >= 2 &&
                                3 === t[n] && 0 === t[n - 1] && 0 === t[n - 2] ||
                                (r[s] = t[n], s++);
                                return new Uint8Array(r.buffer, 0, s);
                            },
                        },
                        {
                            key: 'parseSPS',
                            value: function(t) {
                                var i = e._ebsp2rbsp(t), r = new o.default(i);
                                r.readByte();
                                var s = r.readByte();
                                r.readByte();
                                var n = r.readByte();
                                r.readUEG();
                                var a = e.getProfileString(s),
                                    u = e.getLevelString(n), l = 1, c = 420,
                                    h = [0, 420, 422, 444], d = 8;
                                if ((100 === s || 110 === s || 122 === s || 244 ===
                                        s || 44 === s || 83 === s || 86 === s ||
                                        118 === s || 128 === s || 138 === s ||
                                        144 === s) &&
                                    (l = r.readUEG(), 3 === l && r.readBits(1), l <=
                                    3 && (c = h[l]), d = r.readUEG() +
                                        8, r.readUEG(), r.readBits(
                                        1), r.readBool())) for (var f = 3 !== l
                                    ? 8
                                    : 12, v = 0; v < f; v++) r.readBool() && (v < 6
                                    ? e._skipScalingList(r, 16)
                                    : e._skipScalingList(r, 64));
                                r.readUEG();
                                var p = r.readUEG();
                                if (0 === p) r.readUEG(); else if (1 === p) {
                                    r.readBits(1), r.readSEG(), r.readSEG();
                                    for (var g = r.readUEG(), m = 0; m <
                                    g; m++) r.readSEG();
                                }
                                r.readUEG(), r.readBits(1);
                                var y = r.readUEG(), _ = r.readUEG(),
                                    S = r.readBits(1);
                                0 === S && r.readBits(1), r.readBits(1);
                                var E = 0, R = 0, b = 0, T = 0;
                                r.readBool() &&
                                (E = r.readUEG(), R = r.readUEG(), b = r.readUEG(), T = r.readUEG());
                                var C = 1, O = 1, P = 0, I = !0, k = 0, w = 0;
                                if (r.readBool()) {
                                    if (r.readBool()) {
                                        var M = r.readByte(), A = [
                                            1,
                                            12,
                                            10,
                                            16,
                                            40,
                                            24,
                                            20,
                                            32,
                                            80,
                                            18,
                                            15,
                                            64,
                                            160,
                                            4,
                                            3,
                                            2], L = [
                                            1,
                                            11,
                                            11,
                                            11,
                                            33,
                                            11,
                                            11,
                                            11,
                                            33,
                                            11,
                                            11,
                                            33,
                                            99,
                                            3,
                                            2,
                                            1];
                                        M > 0 && M < 16
                                            ? (C = A[M - 1], O = L[M - 1])
                                            : 255 === M && (C = r.readByte() << 8 |
                                            r.readByte(), O = r.readByte() << 8 |
                                            r.readByte());
                                    }
                                    if (r.readBool() &&
                                        r.readBool(), r.readBool() &&
                                        (r.readBits(4), r.readBool() &&
                                        r.readBits(24)), r.readBool() &&
                                        (r.readUEG(), r.readUEG()), r.readBool()) {
                                        var N = r.readBits(32), D = r.readBits(32);
                                        I = r.readBool(), k = D, w = 2 * N, P = k /
                                            w;
                                    }
                                }
                                var x = 1;
                                1 === C && 1 === O || (x = C / O);
                                var U = 0, H = 0;
                                if (0 === l) U = 1, H = 2 - S; else {
                                    var V = 3 === l
                                        ? 1
                                        : 2, G = 1 === l ? 2 : 1;
                                    U = V, H = G * (2 - S);
                                }
                                var B = 16 * (y + 1), j = 16 * (_ + 1) * (2 - S);
                                B -= (E + R) * U, j -= (b + T) * H;
                                var q = Math.ceil(B * x);
                                return r.destroy(), r = null, {
                                    profile_string: a,
                                    level_string: u,
                                    bit_depth: d,
                                    chroma_format: c,
                                    chroma_format_string: e.getChromaFormatString(
                                        c),
                                    frame_rate: {
                                        fixed: I,
                                        fps: P,
                                        fps_den: w,
                                        fps_num: k,
                                    },
                                    sar_ratio: {width: C, height: O},
                                    codec_size: {width: B, height: j},
                                    present_size: {width: q, height: j},
                                };
                            },
                        },
                        {
                            key: '_skipScalingList',
                            value: function(e, t) {
                                for (var i = 8, r = 8, s = 0, n = 0; n <
                                t; n++) 0 !== r &&
                                (s = e.readSEG(), r = (i + s + 256) %
                                    256), i = 0 === r
                                    ? i
                                    : r;
                            },
                        },
                        {
                            key: 'getProfileString',
                            value: function(e) {
                                switch (e) {
                                    case 66:
                                        return 'Baseline';
                                    case 77:
                                        return 'Main';
                                    case 88:
                                        return 'Extended';
                                    case 100:
                                        return 'High';
                                    case 110:
                                        return 'High10';
                                    case 122:
                                        return 'High422';
                                    case 244:
                                        return 'High444';
                                    default:
                                        return 'Unknown';
                                }
                            },
                        },
                        {
                            key: 'getLevelString',
                            value: function(e) {return (e / 10).toFixed(1);},
                        },
                        {
                            key: 'getChromaFormatString',
                            value: function(e) {
                                switch (e) {
                                    case 420:
                                        return '4:2:0';
                                    case 422:
                                        return '4:2:2';
                                    case 444:
                                        return '4:4:4';
                                    default:
                                        return 'Unknown';
                                }
                            },
                        }]), e;
                }();
            t.default = a;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(2), u = i(6), l = r(u), c = i(1), h = r(c),
                d = function() {
                    function e(t) {
                        s(this,
                            e), this.callback = t, this.url = '', this.data = '', this.isActive = !1, this.SCENE = 1, this.PLATFORM = 'web', this.PROTOCOL = 'mqtt_wss', this.retryCount = 0, this.retryTimer = void 0, this.RETRY_CNT_LIMIT = 3, this.RETRY_TIMER_TIME = 2e3;
                    }
                    
                    return n(e, [
                        {
                            key: 'stop',
                            value: function() {this.isActive = !1, this.destroyRetryTimer();},
                        },
                        {
                            key: 'destroyRetryTimer',
                            value: function() {
                                this.retryCount = 0, this.retryTimer &&
                                (window.clearTimeout(
                                    this.retryTimer), delete this.retryTimer, this.retryTimer = void 0);
                            },
                        },
                        {
                            key: 'quit',
                            value: function(e) {
                                return !this.isActive &&
                                    (h.default.debug('[' + e + '], server stop',
                                        o.LOG.DISPATCH), this.stop(), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.isActive = !0, this.parseConfig(e ||
                                    {}), this.assembleDispatchUrl(), this.sendRequest();
                            },
                        },
                        {
                            key: 'parseConfig',
                            value: function(e) {
                                var t = {
                                    command: o.HTTP.DISPATCH,
                                    token: a.Globals.token,
                                    appid: a.Globals.appId,
                                    protocol: this.PROTOCOL,
                                    sdkPlatform: this.PLATFORM,
                                    timestamp: (new Date).getTime(),
                                    version: '1.0',
                                    sdkVersion: a.Globals.version,
                                };
                                t.url = e.url || '', t.scene = e.scene ||
                                    this.SCENE, t.host = e.host ||
                                    a.Globals.host, t.userid = e.userId ||
                                    a.Globals.userId, this.data = JSON.stringify(
                                    t), h.default.log(this.data, o.LOG.DISPATCH);
                            },
                        },
                        {
                            key: 'assembleDispatchUrl',
                            value: function() {
                                var e = void 0;
                                e = '' === a.Globals.dispatchTestSignalHost
                                    ? a.HOST.DISPATCH_SIGNAL_HOST
                                    : a.Globals.dispatchTestSignalHost, this.url = a.HOST.PROTOCOL +
                                    e;
                            },
                        },
                        {
                            key: 'resendRequest',
                            value: function() {
                                this.retryCount < this.RETRY_CNT_LIMIT
                                    ? (this.retryCount++, h.default.log('retry signal dispatch after ' +
                                    this.RETRY_TIMER_TIME + 'ms',
                                    o.LOG.DISPATCH), this.retryTimer = window.setTimeout(
                                    this.sendRequest.bind(this),
                                    this.RETRY_TIMER_TIME))
                                    : (this.stop(), h.default.warn(
                                    'retry signal dispatch limit',
                                    o.LOG.DISPATCH), this.callback({
                                        code: o.RSP.ERROR,
                                        message: 'retry signal dispatch limit',
                                    }));
                            },
                        },
                        {
                            key: 'sendRequest',
                            value: function() {
                                var e = this;
                                if (!this.quit('sendRequest')) {
                                    new Promise(function(t, i) {
                                        l.default.ajax({
                                            url: e.url,
                                            type: 'POST',
                                            data: e.data,
                                            error: i,
                                            success: t,
                                        });
                                    }).then(function(t) {
                                        if (!e.quit(
                                                'signalDispatchPromise done')) {
                                            if (!t) return void e.resendRequest();
                                            try {
                                                var i = t;
                                                h.default.log('response: ' + i,
                                                    o.LOG.DISPATCH);
                                                var r = JSON.parse(i) || {};
                                                if (0 !== parseInt(
                                                        r[o.RSP.STATUS])) return void e.resendRequest();
                                                var s = r[o.RSP.RESULT];
                                                if (!s) return void e.resendRequest();
                                                var n = s.ips;
                                                if (!n ||
                                                    !n.length) return void e.resendRequest();
                                                e.retryCount = 0, e.destroyRetryTimer(), e.callback &&
                                                e.callback({
                                                    code: o.RSP.SUCCESS,
                                                    message: n,
                                                });
                                            } catch (t) {
                                                e.callback({
                                                    code: o.RSP.ERROR,
                                                    message: t.toString(),
                                                });
                                            }
                                        }
                                    }, function(t) {
                                        e.quit(
                                            'signalDispatchPromise failed') ||
                                        (t && void 0 !== t.status &&
                                        h.default.warn('[' + t.status + ']' +
                                            (t.message || ''),
                                            o.LOG.DISPATCH), e.resendRequest());
                                    });
                                }
                            },
                        }]), e;
                }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            t.XHR = function() {
                var e = {createXHR: function() {return new XMLHttpRequest;}},
                    t = {createXHR: function() {return new XDomainRequest;}};
                try {return e.createXHR(), e;} catch (e) {
                    try {return t.createXHR(), t;} catch (e) {
                        console.error('XHR not supported!');
                    }
                }
            }();
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(7), l = i(56), c = r(l), h = i(3), d = r(h),
                f = function(e) {
                    function t(e) {
                        s(this, t);
                        var i = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return i.player = void 0, i.config = e || {}, i;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function() {
                                this.listenTo(u.PlayerEvent.MEDIA_EVENT,
                                    this.onMediaEventHandler.bind(
                                        this)), this.player = new c.default(
                                    this.config, this), this.player.start();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.removeToAll(), this.player &&
                                (this.player.destroy(), this.player = void 0);
                            },
                        },
                        {
                            key: 'debug',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this.player && this.player.debugLogLevel(e);
                            },
                        },
                        {
                            key: 'debugSourceBuffer',
                            value: function() {
                                this.player && this.player.debugSourceBuffer();
                            },
                        },
                        {
                            key: 'onMediaEventHandler',
                            value: function(e) {
                                e && this.trigger(u.PlayerEvent.PLAYER_EVENT, e);
                            },
                        }]), t;
                }(d.default);
            t.default = f;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), o = i(58), a = r(o), u = i(57), l = r(u), c = function() {
                function e(t, i) {
                    s(this,
                        e), this.wsobserver = i, this.config = this.parseConfig(
                        t), this.defaultConfig = {
                        maxBufferedLen: 500,
                        minBufferedLen: 300,
                        startBufferLen: 500,
                        normalBufferLen: 2e3,
                        maxLiveTimeDelay: 6,
                        normalLiveTimeDelay: 2,
                        maxPreBufferedLen: 20,
                        minPreBufferedLen: 10,
                        maxCacheBufferLen: 100,
                    }, this.managerConfig = {
                        url: this.url,
                        isLive: this.isLive,
                        enableSEI: this.config.seiConfig.isSei,
                        enableAudioStrategy: this.config.enableAudioStrategy,
                        startBufferLen: this.defaultConfig.startBufferLen,
                        normalBufferLen: this.defaultConfig.normalBufferLen,
                    }, this.playerConfig = {
                        isLive: this.isLive,
                        startTime: void 0,
                        isLiveCatch: this.config.isLiveCatch,
                        seiCallback: this.config.seiConfig.seiCallback,
                        maxBufferedLen: this.defaultConfig.maxBufferedLen,
                        minBufferedLen: this.defaultConfig.minBufferedLen,
                        maxCacheBufferLen: this.defaultConfig.maxCacheBufferLen,
                        maxPreBufferedLen: this.defaultConfig.maxPreBufferedLen,
                        minPreBufferedLen: this.defaultConfig.minPreBufferedLen,
                        normalLiveTimeDelay: this.defaultConfig.normalLiveTimeDelay,
                        maxLiveTimeDelay: this.config.liveDelayTime
                            ? this.config.liveDelayTime
                            : this.defaultConfig.maxLiveTimeDelay,
                    }, this.msePlayer = new a.default(this, this.videoElement,
                        this.playerConfig), this.moduleManager = new l.default(
                        this, this.msePlayer, this.managerConfig);
                }
                
                return n(e, [
                    {
                        key: 'start',
                        value: function() {
                            this.moduleManager && this.moduleManager.start();
                        },
                    },
                    {
                        key: 'destroy',
                        value: function() {
                            this.moduleManager &&
                            (this.moduleManager.destroy(), this.moduleManager = void 0), this.msePlayer &&
                            (this.msePlayer.destroy(), this.msePlayer = void 0);
                        },
                    },
                    {
                        key: 'parseConfig',
                        value: function(e) {
                            var t = {
                                url: '',
                                isLive: !0,
                                isLiveCatch: !0,
                                enableAudioStrategy: !0,
                                seiConfig: {isSei: !1, seiCallback: void 0},
                            };
                            for (var i in e) if (e.hasOwnProperty(
                                    i)) switch (i) {
                                case'videoElem':
                                    t[i] = e[i];
                                    break;
                                case'url':
                                    t[i] = String(e[i]);
                                    break;
                                case'isLive':
                                case'isLiveCatch':
                                case'enableAudioStrategy':
                                    t[i] = !('false' === String(e[i]));
                                    break;
                                case'liveDelayTime':
                                    var r = parseInt(e[i]);
                                    r >= 3 && r <= 20 && (t[i] = r);
                                    break;
                                case'seiConfig':
                                    var s = e[i];
                                    s && 'true' === String(s.isSei) &&
                                    (t.seiConfig.isSei = !0, s.seiCallback &&
                                    (t.seiConfig.seiCallback = s.seiCallback));
                            }
                            return this.url = t.url, this.isLive = t.isLive, this.videoElement = t.videoElem, t;
                        },
                    },
                    {
                        key: 'getKeyframeByTime',
                        value: function(e) {
                            return this.moduleManager
                                ? this.moduleManager.getKeyframeByTime(e)
                                : -1;
                        },
                    },
                    {
                        key: 'debugSourceBuffer',
                        value: function() {
                            this.msePlayer && this.msePlayer.debugSourceBuffer();
                        },
                    },
                    {
                        key: 'debugLogLevel',
                        value: function() {
                            var e = arguments.length > 0 &&
                            void 0 !== arguments[0]
                                ? arguments[0]
                                : {};
                            this.moduleManager &&
                            this.moduleManager.debugLogLevel(e);
                        },
                    },
                    {
                        key: 'observer',
                        get: function() {return this.wsobserver;},
                    }]), e;
            }();
            t.default = c;
        }, function(e, t, i) {
            'use strict';
            e.exports = i(55);
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(59), a = r(o), u = i(60), l = r(u), c = i(62), h = r(c),
                d = function() {
                    function e(t, i, r) {
                        s(this,
                            e), this.handler = t, this.msePlayer = i, this.config = r ||
                            {}, this.remuxer = new l.default(this,
                            {enableAudioStrategy: this.config.enableAudioStrategy}), this.config.timescale = this.remuxer.timescale, this.parser = new a.default(
                            this, this.config), this.downloader = new h.default(
                            this, this.config.url);
                    }
                    
                    return n(e, [
                        {
                            key: 'start',
                            value: function() {
                                this.downloader && this.downloader.startLoad();
                            },
                        },
                        {
                            key: 'destroy',
                            value: function() {
                                this.downloader &&
                                (this.downloader.destroy(), this.downloader = void 0), this.msePlayer &&
                                (this.msePlayer.destroy(), this.msePlayer = void 0), this.remuxer &&
                                (this.remuxer.destroy(), this.remuxer = void 0), this.parser &&
                                (this.parser.destroy(), this.parser = void 0), this.downloader &&
                                (this.downloader.destroy(), this.downloader = void 0);
                            },
                        },
                        {
                            key: 'downloadToStream',
                            value: function(e) {
                                if (this.parser) {
                                    var t = this.parser.addPreTagData(
                                        new Uint8Array(e));
                                    this.parser.parseFlv(t);
                                }
                            },
                        },
                        {
                            key: 'getKeyframeByTime',
                            value: function(e) {
                                return this.parser
                                    ? this.parser.getKeyframeByTime(e)
                                    : -1;
                            },
                        },
                        {
                            key: 'parseToSetMSEDuration',
                            value: function(e) {
                                this.msePlayer && this.msePlayer.setDuration(e);
                            },
                        },
                        {
                            key: 'parseToRemux',
                            value: function(e, t, i, r) {
                                this.remuxer && this.remuxer.remux(e, t, i, r);
                            },
                        },
                        {
                            key: 'onSEIParsingData',
                            value: function(e) {
                                this.msePlayer &&
                                this.msePlayer.onSEIParsingData(e);
                            },
                        },
                        {
                            key: 'remuxToFragParsed',
                            value: function() {
                                this.msePlayer && this.msePlayer.onFragParsed();
                            },
                        },
                        {
                            key: 'remuxToFragParsingInitSegment',
                            value: function(e) {
                                this.msePlayer &&
                                this.msePlayer.onFragParsingInitSegment(e);
                            },
                        },
                        {
                            key: 'remuxToFragParsingData',
                            value: function(e) {
                                this.msePlayer &&
                                this.msePlayer.onFragParsingData(e);
                            },
                        },
                        {
                            key: 'debugLogLevel',
                            value: function() {
                                var e = arguments.length > 0 &&
                                    void 0 !== arguments[0] ? arguments[0] : {},
                                    t = 0, i = !1;
                                e.play &&
                                (i = 'true' === String(e.play.enable), t = i
                                    ? parseInt(e.play.level)
                                    : 0, isNaN(t) && (t = 0), this.msePlayer &&
                                this.msePlayer.debugLogLevel(
                                    {level: t})), e.parse &&
                                (i = 'true' === String(e.parse.enable), t = i
                                    ? parseInt(e.parse.level)
                                    : 0, isNaN(t) && (t = 0), this.parser &&
                                this.parser.debugLogLevel(
                                    {level: t})), e.remux &&
                                (i = 'true' === String(e.remux.enable), t = i
                                    ? parseInt(e.remux.level)
                                    : 0, isNaN(t) && (t = 0), this.remuxer &&
                                this.remuxer.debugLogLevel({level: t}));
                            },
                        },
                        {
                            key: 'observer',
                            get: function() {return this.handler.observer || {};},
                        }]), e;
                }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = i(7), o = i(10), a = function() {
                function e(t, i, s) {
                    r(this,
                        e), this.handler = t, this.config = s, this.seiSegments = [], this.audioSegments = [], this.videoSegments = [], this.onmso = this.onMediaSourceOpen.bind(
                        this), this.onmse = this.onMediaSourceEnded.bind(
                        this), this.onmsc = this.onMediaSourceClose.bind(
                        this), this.onasbue = this.onAudioSBUpdateEnd.bind(
                        this), this.onvsbue = this.onVideoSBUpdateEnd.bind(
                        this), this.onasbe = this.onAudioSBUpdateError.bind(
                        this), this.onvsbe = this.onVideoSBUpdateError.bind(
                        this), this.onvplay = this.onMediaPlay.bind(
                        this), this.onvmetadata = this.onMediaMetadata.bind(
                        this), this.onvtimeupdate = this.onMediaTimeUpdate.bind(
                        this), this.audioCodec = null, this.videoCodec = null, this.loadedmetadata = !1, this.audioSourceBuffer = null, this.videoSourceBuffer = null, this.width = 0, this.height = 0, this.isDebugLevel = 0, this.keyframeSeek = {
                        waitForPlay: !1,
                        keyframeTime: 0,
                    }, this.isRemoveBuffer = !0, this.isPushParsingData = !0, this.attachMedia(
                        i);
                }
                
                return s(e, [
                    {
                        key: 'destroy',
                        value: function() {this.seiSegments = [], this.audioSegments = [], this.videoSegments = [], this.loadedmetadata = !1, this.detachMedia(), this.audioCodec = null, this.videoCodec = null, this.width = 0, this.height = 0, this.isRemoveBuffer = !0, this.isPushParsingData = !0;},
                    },
                    {
                        key: 'getBufferLen',
                        value: function() {
                            var e = this.getMediaBufferLen();
                            return e <= 0 &&
                            (e = this.getSourceBufferLen()) <= 0 &&
                            o.logger.debug(
                                'MSEPlayer.getBufferLen buffer initial'), e;
                        },
                    },
                    {
                        key: 'getMediaBufferLen',
                        value: function() {
                            var e = -1;
                            if (!this.video) return e;
                            var t = this.video.buffered,
                                i = this.video.currentTime;
                            if (t.length) {
                                for (var r = 0; r < t.length; r++) if (i >=
                                    t.start(r) && i <= t.end(r)) {
                                    e = t.end(r) - i;
                                    break;
                                }
                            } else e = 0;
                            return e;
                        },
                    },
                    {
                        key: 'getSourceBufferLen',
                        value: function() {
                            var e = -1;
                            return this.video
                                ? this.audioSourceBuffer &&
                                -1 !== (e = this.getAudioSourceBufferLen())
                                    ? e
                                    : (this.videoSourceBuffer &&
                                    (e = this.getVideoSourceBufferLen()), e)
                                : e;
                        },
                    },
                    {
                        key: 'getAudioSourceBufferLen',
                        value: function() {
                            for (var e = this.video.currentTime, t = 0; t <
                            this.audioSourceBuffer.buffered.length; t++) {
                                var i = this.audioSourceBuffer.buffered.start(
                                    t),
                                    r = this.audioSourceBuffer.buffered.end(t);
                                if (e >= i && e <= r) return r - i;
                            }
                            return -1;
                        },
                    },
                    {
                        key: 'getVideoSourceBufferLen',
                        value: function() {
                            for (var e = this.video.currentTime, t = 0; t <
                            this.videoSourceBuffer.buffered.length; t++) {
                                var i = this.videoSourceBuffer.buffered.start(
                                    t),
                                    r = this.videoSourceBuffer.buffered.end(t);
                                if (e >= i && e <= r) return r - i;
                            }
                            return -1;
                        },
                    },
                    {
                        key: 'removePreBuffer',
                        value: function() {
                            this.video && this.isRemoveBuffer &&
                            (this.removePreAudioBuffer(), this.removePreVideoBuffer());
                        },
                    },
                    {
                        key: 'removePreAudioBuffer',
                        value: function() {
                            var e = void 0, t = void 0, i = void 0,
                                r = this.video.currentTime;
                            if (this.audioSourceBuffer &&
                                !this.audioSourceBuffer.updating) {
                                i = this.audioSourceBuffer.buffered.length;
                                for (var s = 0; s <
                                i; s++) if (e = this.audioSourceBuffer.buffered.start(
                                        s), t = this.audioSourceBuffer.buffered.end(
                                        s), this.isDebugLevel > 0 &&
                                    o.logger.log('audioBuffer[' + s + '][' + r +
                                        ',' + e + '-' + t + ']'), r >
                                    t) this.audioSourceBuffer.remove(e,
                                    t), this.isDebugLevel > 0 &&
                                o.logger.log('audioBuffer remove, [' + e + '-' +
                                    t + ']'); else if (r - e >
                                    this.config.maxPreBufferedLen) {
                                    var n = r - this.config.minPreBufferedLen;
                                    this.audioSourceBuffer.remove(e,
                                        n), this.isDebugLevel > 0 &&
                                    o.logger.log('audioBuffer remove, [' + e +
                                        '-' + n + ']');
                                }
                            }
                        },
                    },
                    {
                        key: 'removePreVideoBuffer',
                        value: function() {
                            var e = void 0, t = void 0, i = void 0,
                                r = this.video.currentTime;
                            if (this.videoSourceBuffer &&
                                !this.videoSourceBuffer.updating) {
                                i = this.videoSourceBuffer.buffered.length;
                                for (var s = 0; s <
                                i; s++) if (e = this.videoSourceBuffer.buffered.start(
                                        s), t = this.videoSourceBuffer.buffered.end(
                                        s), this.isDebugLevel > 0 &&
                                    o.logger.log('videoBuffer[' + s + '][' + r +
                                        ',' + e + '-' + t + ']'), r >
                                    t) this.videoSourceBuffer.remove(e,
                                    t), this.isDebugLevel > 0 &&
                                o.logger.log('videoBuffer remove, [' + e + '-' +
                                    t + ']'); else if (r - e >
                                    this.config.maxPreBufferedLen) {
                                    var a = r - this.config.minPreBufferedLen;
                                    this.videoSourceBuffer.remove(e,
                                        a), this.isDebugLevel > 0 &&
                                    o.logger.log('videoBuffer remove, [' + e +
                                        '-' + a + ']');
                                } else {
                                    if (t - r > this.config.maxCacheBufferLen) {
                                        if (t - r < 10 *
                                            this.config.maxCacheBufferLen) {
                                            var u = Math.floor(t -
                                                this.config.normalLiveTimeDelay),
                                                l = this.getKeyframeByTime(u);
                                            (l < 0 || l > t) &&
                                            (l = u), o.logger.log('videoBuffer warning, currentTime:' +
                                                r + ', targetTime:' + l +
                                                ', buffer[' + e + ', ' + t +
                                                ']'), this.video.currentTime = l;
                                            break;
                                        }
                                        this.video.pause(), this.isRemoveBuffer = !1, o.logger.warn('videoBuffer warning, [' +
                                            r + '],[' + e + ',' + t +
                                            ']'), this.handler &&
                                        this.handler.observer &&
                                        this.handler.observer.trigger(
                                            n.PlayerEvent.MEDIA_EVENT, {
                                                type: n.PlayerMessage.DURATION_WARNING,
                                                code: 0,
                                                message: 'source buffer length too large warning',
                                                data: {
                                                    current: r,
                                                    duration: this.video.duration,
                                                },
                                            });
                                        break;
                                    }
                                    if (1 === i && r < e) {
                                        var c = (t - e) / 2,
                                            h = this.getKeyframeByTime(c);
                                        (h < e || h > t) &&
                                        (h = e), o.logger.log('videoBuffer skip gap, currentTime:' +
                                            r + ', targetTime:' + h +
                                            ', buffer[' + e + ', ' + t +
                                            ']'), this.video.currentTime = h;
                                        break;
                                    }
                                }
                            }
                        },
                    },
                    {
                        key: 'removeAllBuffer',
                        value: function(e) {
                            this.video && (this.removeAllAudioBuffer(
                                e), this.removeAllVideoBuffer(e));
                        },
                    },
                    {
                        key: 'removeAllAudioBuffer',
                        value: function(e) {
                            if (this.audioSourceBuffer && (e &&
                                this.audioSourceBuffer.abort(), !this.audioSourceBuffer.updating)) for (var t = void 0, i = void 0, r = 0; r <
                            this.audioSourceBuffer.buffered.length; r++) t = this.audioSourceBuffer.buffered.start(
                                r), i = this.audioSourceBuffer.buffered.end(
                                r), this.audioSourceBuffer.remove(t,
                                i), o.logger.log('MSEPlayer.remove all audioBuffer, [' +
                                t + '-' + i + ']');
                        },
                    },
                    {
                        key: 'removeAllVideoBuffer',
                        value: function(e) {
                            if (this.videoSourceBuffer && (e &&
                                this.videoSourceBuffer.abort(), !this.videoSourceBuffer.updating)) for (var t = void 0, i = void 0, r = 0; r <
                            this.videoSourceBuffer.buffered.length; r++) t = this.videoSourceBuffer.buffered.start(
                                r), i = this.videoSourceBuffer.buffered.end(
                                r), this.videoSourceBuffer.remove(t,
                                i), o.logger.log('MSEPlayer.remove all videoBuffer, [' +
                                t + '-' + i + ']');
                        },
                    },
                    {
                        key: 'catchLiveDelay',
                        value: function() {
                            if (this.video && this.config.isLiveCatch) {
                                var e = this.video.buffered;
                                if (e.length) for (var t = void 0, i = void 0, r = this.video.currentTime, s = 0; s <
                                e.length; s++) if (t = e.start(s), i = e.end(
                                        s), !(r < t || r > i) && i - r >
                                    this.config.maxLiveTimeDelay) {
                                    var n = Math.floor(i -
                                        this.config.normalLiveTimeDelay),
                                        a = this.getKeyframeByTime(n);
                                    (a < 0 || a > i) &&
                                    (a = n), o.logger.log('MSEPlayer.catchLiveDelay, currentTime:' +
                                        r + ', targetTime:' + a + ', buffer[' +
                                        t + ', ' + i +
                                        ']'), this.video.currentTime = a;
                                    break;
                                }
                            }
                        },
                    },
                    {
                        key: 'appendAudioBuffer',
                        value: function() {
                            if (this.audioSourceBuffer &&
                                !1 === this.audioSourceBuffer.updating &&
                                this.audioSegments.length > 0) {
                                var e = this.audioSegments.shift();
                                try {
                                    this.audioSourceBuffer.appendBuffer(e);
                                } catch (t) {
                                    o.logger.error('MSEPlayer.appendAudioBuffer[' +
                                        t.name + ']' +
                                        t.message), 'QuotaExceededError' ===
                                    t.name && (this.audioSegments.unshift(
                                        e), this.checkBufferedLen(!0));
                                }
                            }
                        },
                    },
                    {
                        key: 'appendVideoBuffer',
                        value: function() {
                            if (this.videoSourceBuffer &&
                                !this.videoSourceBuffer.updating &&
                                this.videoSegments.length > 0) {
                                var e = this.videoSegments.shift();
                                try {
                                    this.videoSourceBuffer.appendBuffer(e);
                                } catch (t) {
                                    o.logger.error('MSEPlayer.appendVideoBuffer[' +
                                        t.name + ']' +
                                        t.message), 'QuotaExceededError' ===
                                    t.name && (this.videoSegments.unshift(
                                        e), this.checkBufferedLen());
                                }
                            }
                        },
                    },
                    {
                        key: 'onSEIParsingData',
                        value: function(e) {this.seiSegments.push(e);},
                    },
                    {
                        key: 'onFragParsingInitSegment',
                        value: function(e) {
                            if (e) {
                                if (this.isPushParsingData = !0, e.audio) {
                                    var t = void 0,
                                        i = this.audioCodec = e.audio.audioCodec;
                                    i && !this.audioSourceBuffer &&
                                    this.mediaSource &&
                                    'open' === this.mediaSource.readyState &&
                                    (o.logger.log('MSEPlayer.onFragParsingInitSegment create audio sb codec=' +
                                        this.audioCodec), t = this.audioSourceBuffer = this.mediaSource.addSourceBuffer('video/mp4;codecs=' +
                                        i), this.addAudioSBEventListeners(
                                        t)), e.audio.audioMoov &&
                                    (this.audioSegments = [], this.audioSegments.push(
                                        e.audio.audioMoov), o.logger.log(
                                        'MSEPlayer.onFragParsingInitSegment, push audio moov'));
                                }
                                if (e.video) {
                                    var r = void 0,
                                        s = this.videoCodec = e.video.videoCodec;
                                    s && !this.videoSourceBuffer &&
                                    this.mediaSource &&
                                    'open' === this.mediaSource.readyState &&
                                    (o.logger.log('MSEPlayer.onFragParsingInitSegment create video sb codec=' +
                                        this.videoCodec), r = this.videoSourceBuffer = this.mediaSource.addSourceBuffer('video/mp4;codecs=' +
                                        s), this.addVideoSBEventListeners(
                                        r)), e.video.videoMoov &&
                                    (this.videoSegments = [], this.videoSegments.push(
                                        e.video.videoMoov), o.logger.log(
                                        'MSEPlayer.onFragParsingInitSegment, push video moov'));
                                }
                            }
                        },
                    },
                    {
                        key: 'onFragParsingData',
                        value: function(e) {
                            this.isPushParsingData && ('audio' === e.type
                                ? this.audioSourceBuffer
                                    ? (this.audioSegments.push(
                                        e.moof), this.audioSegments.push(
                                        e.mdat))
                                    : (this.isPushParsingData = !1, o.logger.log(
                                        'MSEPlayer.onFragParsingData, push audio data but no audioSourceBuffer'), this.removeAudioSBEventListeners(
                                        this.audioSourceBuffer))
                                : 'video' === e.type && (this.videoSourceBuffer
                                ? (this.videoSegments.push(
                                    e.moof), this.videoSegments.push(e.mdat))
                                : (this.isPushParsingData = !1, o.logger.log(
                                    'MSEPlayer.onFragParsingData, push video data but no videoSourceBuffer'), this.removeVideoSBEventListeners(
                                    this.videoSourceBuffer))), this.isPushParsingData ||
                            this.handler && this.handler.observer &&
                            this.handler.observer.trigger(
                                n.PlayerEvent.MEDIA_EVENT, {
                                    type: n.PlayerMessage.AUDIO_VIDEO_SWITCH,
                                    code: 0,
                                    message: 'audio or video data coming but its sourceBuffer null',
                                }));
                        },
                    },
                    {
                        key: 'onFragParsed',
                        value: function() {this.appendAudioBuffer(), this.appendVideoBuffer();},
                    },
                    {
                        key: 'onMediaSourceOpen',
                        value: function(e) {
                            o.logger.log(
                                'MSEPlayer.onMediaSourceOpen'), this.addMediaEventListeners(
                                this.video), this.mediaSource.removeEventListener(
                                'sourceopen', this.onmso);
                            var t = null, i = null;
                            this.audioCodec && !this.audioSourceBuffer &&
                            (t = this.audioSourceBuffer = this.mediaSource.addSourceBuffer('video/mp4;codecs=' +
                                this.audioCodec), this.addAudioSBEventListeners(
                                t)), this.videoCodec &&
                            !this.videoSourceBuffer &&
                            (i = this.videoSourceBuffer = this.mediaSource.addSourceBuffer('video/mp4;codecs=' +
                                this.videoCodec), this.addVideoSBEventListeners(
                                i)), this.appendAudioBuffer(), this.appendVideoBuffer();
                        },
                    },
                    {
                        key: 'onMediaSourceClose',
                        value: function(e) {
                            o.logger.log('MSEPlayer.onMediaSourceClose');
                        },
                    },
                    {
                        key: 'onMediaSourceEnded',
                        value: function() {
                            o.logger.log('MSEPlayer.onMediaSourceEnded');
                        },
                    },
                    {
                        key: 'onMediaMetadata',
                        value: function(e) {
                            o.logger.log(
                                'MSEPlayer.onMediaMetadata'), this.loadedmetadata = !0, this.width = parseInt(
                                e.target.videoWidth), this.height = parseInt(
                                e.target.videoHeight), this.handler &&
                            this.handler.observer &&
                            this.handler.observer.trigger(
                                n.PlayerEvent.MEDIA_EVENT, {
                                    type: n.PlayerMessage.METADATA,
                                    code: 0,
                                    message: 'metadata info',
                                    data: {
                                        width: this.width,
                                        height: this.height,
                                    },
                                });
                        },
                    },
                    {
                        key: 'onMediaPlay',
                        value: function() {
                            if (this.config.startTime &&
                                this.config.startTime >= 0 &&
                                (this.video.currentTime = this.config.startTime, this.config.startTime = void 0), this.keyframeSeek.waitForPlay) {
                                var e = this.video.currentTime;
                                o.logger.log('MSEPlayer.onMediaPlay, currentTime = ' +
                                    e + ', keyframeTime = ' +
                                    this.keyframeSeek.keyframeTime), e ===
                                this.keyframeSeek.keyframeTime
                                    ? this.keyframeSeek.waitForPlay = !1
                                    : (o.logger.log(
                                        'MSEPlayer.onMediaPlay, waiting for keyframe play but not, back to play it!'), this.video.currentTime = this.keyframeSeek.keyframeTime);
                            }
                        },
                    },
                    {
                        key: 'onMediaTimeUpdate',
                        value: function() {
                            if (this.config.seiCallback) for (var e = void 0; this.seiSegments.length;) {
                                if (e = this.seiSegments.shift(), !(e.wstime -
                                        Math.floor(this.video.currentTime) <=
                                        0)) {
                                    this.seiSegments.unshift(e);
                                    break;
                                }
                                this.config.seiCallback(e);
                            }
                            this.config.isLive &&
                            (this.video.duration - this.video.currentTime <
                            2 * this.config.maxCacheBufferLen
                                ? this.catchLiveDelay()
                                : (this.removeMediaEventListeners(
                                    this.video), o.logger.warn('duration warning, [' +
                                    this.video.currentTime + '],[' +
                                    this.video.duration + ']'), this.handler &&
                                this.handler.observer &&
                                this.handler.observer.trigger(
                                    n.PlayerEvent.MEDIA_EVENT, {
                                        type: n.PlayerMessage.DURATION_WARNING,
                                        code: 0,
                                        message: 'duration abnormal warning',
                                        data: {
                                            current: this.video.currentTime,
                                            duration: this.video.duration,
                                        },
                                    })));
                        },
                    },
                    {
                        key: 'getKeyframeByTime',
                        value: function(e) {
                            return this.handler
                                ? this.handler.getKeyframeByTime(e)
                                : -1;
                        },
                    },
                    {
                        key: 'onMediaAttaching',
                        value: function(e) {
                            if (this.video = e, e) {
                                window.MediaSource = window.MediaSource ||
                                    window.WebKitMediaSource;
                                var t = this.mediaSource = new MediaSource;
                                this.addMediaSourceEventListeners(
                                    t), e.src = URL.createObjectURL(t);
                            }
                        },
                    },
                    {
                        key: 'onMediaDetaching',
                        value: function() {
                            if (this.removeMediaEventListeners(
                                    this.video), this.mediaSource) {
                                var e = this.mediaSource;
                                if (this.audioSourceBuffer) {
                                    try {
                                        e.removeSourceBuffer(
                                            this.audioSourceBuffer), this.removeAudioSBEventListeners(
                                            this.audioSourceBuffer);
                                    } catch (e) {
                                        o.logger.log('MSEPlayer.removeAudioSourceBuffer error, ' +
                                            e.message);
                                    }
                                    this.audioSourceBuffer = null;
                                }
                                if (this.videoSourceBuffer) {
                                    try {
                                        e.removeSourceBuffer(
                                            this.videoSourceBuffer), this.removeVideoSBEventListeners(
                                            this.videoSourceBuffer);
                                    } catch (e) {
                                        o.logger.log('MSEPlayer.removeVideoSourceBuffer error, ' +
                                            e.message);
                                    }
                                    this.videoSourceBuffer = null;
                                }
                                if ('open' ===
                                    e.readyState) try {e.endOfStream();} catch (e) {
                                    o.logger.warn('endOfStream error: ' +
                                        e.message);
                                }
                                if (this.removeMediaSourceEventListeners(
                                        e), this.video) try {
                                    this.video.src = '', this.video.removeAttribute(
                                        'src');
                                } catch (e) {
                                    o.logger.warn('unlinking src of video error: ' +
                                        e.message);
                                }
                                this.mediaSource = null, this.video = null, this.audioSourceBuffer = this.videoSourceBuffer = null;
                            }
                        },
                    },
                    {
                        key: 'onAudioSBUpdateEnd',
                        value: function() {this.checkBufferedLen(), this.appendAudioBuffer();},
                    },
                    {
                        key: 'onVideoSBUpdateEnd',
                        value: function() {this.checkBufferedLen(), this.appendVideoBuffer();},
                    },
                    {
                        key: 'checkBufferedLen',
                        value: function() {this.removePreBuffer();},
                    },
                    {
                        key: 'onAudioSBUpdateError',
                        value: function(e) {
                            o.logger.error('MSEPlayer.onAudioSBUpdateError');
                        },
                    },
                    {
                        key: 'onVideoSBUpdateError',
                        value: function(e) {
                            o.logger.error('MSEPlayer.onVideoSBUpdateError');
                        },
                    },
                    {
                        key: 'clearData',
                        value: function() {
                            this.audioSegments = [], this.videoSegments = [], this.removeAllBuffer(
                                !0);
                        },
                    },
                    {
                        key: 'setDuration',
                        value: function(e) {
                            this.mediaSource && e > 0 &&
                            (this.mediaSource.duration = e);
                        },
                    },
                    {
                        key: 'detachMedia',
                        value: function() {this.onMediaDetaching();},
                    },
                    {
                        key: 'attachMedia',
                        value: function(e) {this.onMediaAttaching(e);},
                    },
                    {
                        key: 'addMediaSourceEventListeners',
                        value: function(e) {
                            e && (e.addEventListener('sourceopen',
                                this.onmso), e.addEventListener('sourceended',
                                this.onmse), e.addEventListener('sourceclose',
                                this.onmsc));
                        },
                    },
                    {
                        key: 'removeMediaSourceEventListeners',
                        value: function(e) {
                            e && (e.removeEventListener('sourceopen',
                                this.onmso), e.removeEventListener(
                                'sourceended',
                                this.onmse), e.removeEventListener(
                                'sourceclose', this.onmsc));
                        },
                    },
                    {
                        key: 'addMediaEventListeners',
                        value: function(e) {
                            e && (e.addEventListener('loadedmetadata',
                                this.onvmetadata), e.addEventListener(
                                'timeupdate',
                                this.onvtimeupdate), e.addEventListener('play',
                                this.onvplay));
                        },
                    },
                    {
                        key: 'removeMediaEventListeners',
                        value: function(e) {
                            e && (e.removeEventListener('loadedmetadata',
                                this.onvmetadata), e.removeEventListener(
                                'timeupdate',
                                this.onvtimeupdate), e.removeEventListener(
                                'play', this.onvplay));
                        },
                    },
                    {
                        key: 'addAudioSBEventListeners',
                        value: function(e) {
                            e && (e.addEventListener('updateend',
                                this.onasbue), e.addEventListener('error',
                                this.onasbe));
                        },
                    },
                    {
                        key: 'removeAudioSBEventListeners',
                        value: function(e) {
                            e && (e.removeEventListener('updateend',
                                this.onasbue), e.removeEventListener('error',
                                this.onasbe));
                        },
                    },
                    {
                        key: 'addVideoSBEventListeners',
                        value: function(e) {
                            e && (e.addEventListener('updateend',
                                this.onvsbue), e.addEventListener('error',
                                this.onvsbe));
                        },
                    },
                    {
                        key: 'removeVideoSBEventListeners',
                        value: function(e) {
                            e && (e.removeEventListener('updateend',
                                this.onvsbue), e.removeEventListener('error',
                                this.onvsbe));
                        },
                    },
                    {
                        key: 'debugSourceBuffer',
                        value: function() {
                            if (this.video) {
                                var e = void 0, t = void 0,
                                    i = this.video.currentTime;
                                if (this.audioSourceBuffer) for (var r = 0; r <
                                this.audioSourceBuffer.buffered.length; r++) e = this.audioSourceBuffer.buffered.start(
                                    r), t = this.audioSourceBuffer.buffered.end(
                                    r), console.log('audioSourceBuffer[' + i +
                                    ', ' + e + '-' + t + ']');
                                if (this.videoSourceBuffer) for (var s = 0; s <
                                this.videoSourceBuffer.buffered.length; s++) e = this.videoSourceBuffer.buffered.start(
                                    s), t = this.videoSourceBuffer.buffered.end(
                                    s), console.log('videoSourceBuffer[' + i +
                                    ', ' + e + '-' + t + ']');
                            }
                        },
                    },
                    {
                        key: 'debugLogLevel',
                        value: function(e) {
                            var t = parseInt(e.level);
                            isNaN(t)
                                ? this.isDebugLevel = 0
                                : this.isDebugLevel = t;
                        },
                    }]), e;
            }();
            t.default = a;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(7), a = i(61), u = r(a), l = i(10), c = i(64), h = r(c),
                d = function() {
                    function e(t, i) {
                        s(this,
                            e), this.config = i, this.handler = t, this.tagTypes = {
                            8: 'audio',
                            9: 'video',
                            18: 'metadata',
                        }, this.preTagData = null, this.FLV_HEADER_LEN = 9, this.FLV_TAG_HEADER_LEN = 11, this.FLV_PREV_TAG_SIZE_LEN = 4, this.AMF_DATA_TYPE_STRING = 2, this.AMF_DATA_TYPE_ECMA_ARRAY = 8, this.width = 0, this.height = 0, this.lengthSizeMinusOne = 0, this.hasFlvHeaderParsed = !1, this.bufLen = this.config.startBufferLen, this.audioCodec = '', this.audioConfig = void 0, this.audioSampleRate = void 0, this.audioChannelCount = void 0, this.isDebugLevel = 0, this.hasAudio = !1, this.hasVideo = !1, this.isFirstRemux = !0, this.avcHeaderLogCount = 1, this.keySampleTimeArray = [], this.AVC_HEADER_LOG_LIMIT = 100, this.AVC_HEADER_LOG_CYCLE = 1e6, this.SCRIPTTYPE = {
                            NUMBER: 0,
                            BOOLEAN: 1,
                            STRING: 2,
                            OBJECT: 3,
                            MOVIE_CLIP: 4,
                            NULL: 5,
                            UNDEFINED: 6,
                            REFERENCE: 7,
                            ECMA_ARRAY: 8,
                            END_OF_DATA: 9,
                            STRICT_ARRAY: 10,
                            DATE: 11,
                            LONG_STRING: 12,
                        }, this.keyframes = {
                            times: [],
                            filepositions: [],
                            parsingTimes: !1,
                            parsingKeyframes: !1,
                            parsingFilePositions: !1,
                            timesName: 'times',
                            keyframesName: 'keyframes',
                            filepositionsName: 'filepositions',
                        }, this.SEI_UUID = [
                            84,
                            128,
                            131,
                            151,
                            240,
                            35,
                            71,
                            75,
                            183,
                            247,
                            79,
                            50,
                            181,
                            78,
                            6,
                            172], this.reset();
                    }
                    
                    return n(e, [
                        {
                            key: 'destroy',
                            value: function() {this.hasFlvHeaderParsed = !1, this.lengthSizeMinusOne = 0, this.reset();},
                        },
                        {
                            key: 'reset',
                            value: function() {
                                this.resetAvcTrack(), this.resetAacTrack(), this.resetId3Track(), this.videoWidth = -1, this.videoHeight = -1, this.hasAudio = !1, this.hasVideo = !1, this.preTagData = null, this.isFirstRemux = !0, this.avcHeaderLogCount = 1, this.keySampleTimeArray = [], this.isFirstParseAVCHeader = !0, this.bufLen = this.config.startBufferLen, this.aacTrack.config = this.audioConfig, this.aacTrack.timescale = this.config.timescale, this.avcTrack.timescale = this.config.timescale, this.aacTrack.channelCount = this.audioChannelCount, this.aacTrack.audiosamplerate = this.audioSampleRate, this.aacTrack.codec = '' ===
                                this.audioCodec ? 'mp4a.40.5' : this.audioCodec;
                            },
                        },
                        {
                            key: 'resetAvcTrack',
                            value: function() {
                                this.avcTrack = {
                                    type: 'video',
                                    id: 1,
                                    sequenceNumber: 0,
                                    samples: [],
                                    len: 0,
                                    nbNalu: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0,
                                };
                            },
                        },
                        {
                            key: 'resetAacTrack',
                            value: function() {
                                this.aacTrack = {
                                    type: 'audio',
                                    id: 2,
                                    sequenceNumber: 0,
                                    samples: [],
                                    len: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0,
                                };
                            },
                        },
                        {
                            key: 'resetId3Track',
                            value: function() {
                                this.id3Track = {
                                    type: 'id3',
                                    id: 3,
                                    sequenceNumber: 0,
                                    samples: [],
                                    len: 0,
                                };
                            },
                        },
                        {
                            key: 'parseVideoTag',
                            value: function(e, t) {
                                return t = t || {}, t.codecID = 15 &
                                    e[0], t.frameType = (240 & e[0]) >>>
                                    4, 7 === t.codecID ? this.parseAVCTag(
                                    e.subarray(1), t) : t;
                            },
                        },
                        {
                            key: 'parseAVCTag',
                            value: function(e, t) {
                                var i = [
                                    'AVC Sequence Header',
                                    'AVC NALU',
                                    'AVC End-of-Sequence'], r = 0, s = 0;
                                if (t = t ||
                                        {}, t.avcPacketType = i[e[0]], r = 128 &
                                        e[1], s = (127 & e[1]) << 16 | e[2] <<
                                        8 | e[3], t.CompositionTime = r
                                        ? -s
                                        : s, this.isDebugLevel > 0 &&
                                    l.logger.log(e[0] +
                                        ', FLVParser.parseAVCTag timestamp = ' +
                                        t.timestamp), 1 === e[0]) {
                                    0 !== t.timestamp &&
                                    (this.hasVideo = !0), -1 !==
                                    this.avcTrack.startDts && t.timestamp >=
                                    this.avcTrack.startDts + this.bufLen &&
                                    (this.avcTrack.endDts = t.timestamp, this.remux(), this.bufLen = this.config.normalBufferLen);
                                    for (var n = [], a = 0, u = 4, c = void 0; u <
                                    e.byteLength;) {
                                        for (var d = 0, f = this.lengthSizeMinusOne +
                                            1, v = 0; v < f; v++) d += e[u +
                                        v] << 8 * (f - v - 1);
                                        if (u += f, 0 !== d) {
                                            if (u + d > e.byteLength) {
                                                l.logger.log('parseAVCTag error, offset=' +
                                                    u + ', naluDataLen=' + d +
                                                    ',tag.byteLength=' +
                                                    e.byteLength);
                                                break;
                                            }
                                            var p = {
                                                data: e.subarray(u, u + d),
                                                type: 1 === t.frameType ? 5 : 1,
                                            };
                                            6 === p.data[0]
                                                ? this.config.enableSEI
                                                ? (c = new h.default(
                                                    p.data), this.parseSEIFrame(
                                                    c, t.timestamp +
                                                    t.CompositionTime))
                                                : p = void 0
                                                : (n.push(
                                                p), a += p.data.length), u += d;
                                        }
                                    }
                                    if (a > 0) {
                                        var g = {
                                            units: {
                                                units: n,
                                                length: a,
                                            },
                                            pts: 90 *
                                            (t.timestamp + t.CompositionTime),
                                            dts: 90 * t.timestamp,
                                            key: 1 === t.frameType,
                                        };
                                        if (g.key) {
                                            var m = g.pts / 9e4;
                                            this.keySampleTimeArray.indexOf(m) <
                                            0 && this.keySampleTimeArray.push(m);
                                        }
                                        if (this.avcTrack.samples.push(
                                                g), this.avcTrack.nbNalu += n.length, this.avcTrack.len += a, -1 ===
                                            this.avcTrack.startDts &&
                                            (this.avcTrack.startDts = t.timestamp), this.avcTrack.endDts = t.timestamp, g.key &&
                                            this.isDebugLevel >
                                            3) for (var y = void 0, _ = g.units.units, S = 0; S <
                                        _.length; S++) y = _[S], console.log('FLVParser.parseAVCTag, IDR = ' +
                                            y.data);
                                    } else l.logger.log('discard empty nalu, dts=' +
                                        t.timestamp + ', pts=' +
                                        (t.timestamp + t.CompositionTime) +
                                        ', dataLen=' + t.dataSize +
                                        ', naluLen=' + a);
                                } else 0 === e[0]
                                    ? this.parseAVCDecoderConfigurationRecord(
                                        e.subarray(4))
                                    : 2 === e[0]
                                        ? (l.logger.log(
                                            'FLVParser.parseAVCTag, AVC end of sequence'), this.handler &&
                                        this.handler.observer &&
                                        this.handler.observer.trigger(
                                            o.PlayerEvent.MEDIA_EVENT, {
                                                type: o.PlayerMessage.PLAY_ENDED,
                                                code: 0,
                                                message: 'AVC end of sequence',
                                            }))
                                        : l.logger.error('FLVParser.parseAVCTag, parseAVCTag error, type = ' +
                                            e[0]);
                            },
                        },
                        {
                            key: 'parseAVCDecoderConfigurationRecord',
                            value: function(e) {
                                this.avcTrack.sps = [], this.lengthSizeMinusOne = 3 &
                                    e[4];
                                for (var t = 31 &
                                    e[5], i = void 0, r = 6, s = 0; s <
                                     t; s++) {
                                    var n = (e[r] << 8) + e[r + 1];
                                    r += 2;
                                    var a = {
                                        data: e.subarray(r, r + n),
                                        type: 7,
                                    };
                                    r += n;
                                    var u = new h.default(a.data),
                                        c = u.readSPS();
                                    if (this.avcTrack.width = c.width, this.avcTrack.height = c.height, c.pixelRatio &&
                                        (this.avcTrack.pixelRatio = c.pixelRatio), (this.isDebugLevel >
                                            0 || this.avcHeaderLogCount %
                                            this.AVC_HEADER_LOG_LIMIT == 0) &&
                                        (l.logger.log('FLVParser.parseAVCHeader, naluSizeLength = ' +
                                            this.lengthSizeMinusOne), l.logger.log('FLVParser.parseAVCHeader, sps = ' +
                                            a.data)), this.isFirstParseAVCHeader) this.videoWidth = c.width, this.videoHeight = c.height, this.isFirstParseAVCHeader = !1, l.logger.log('parse resolution from sps = ' +
                                        this.videoWidth + '*' +
                                        this.videoHeight), l.logger.log('FLVParser.parseAVCHeader, naluSizeLength = ' +
                                        this.lengthSizeMinusOne), l.logger.log('FLVParser.parseAVCHeader, sps = ' +
                                        a.data), this.handler &&
                                    this.handler.observer &&
                                    this.handler.observer.trigger(
                                        o.PlayerEvent.MEDIA_EVENT, {
                                            type: o.PlayerMessage.DIMENSION_CHANGE,
                                            code: 0,
                                            message: 'stream dimension change',
                                            data: {
                                                isAVCHeader: !0,
                                                aspect1: this.videoWidth,
                                                aspect2: this.videoHeight,
                                            },
                                        }); else if ((this.videoWidth !==
                                            c.width || this.videoHeight !==
                                            c.height) && this.handler &&
                                        this.handler.observer) {
                                        var d = this.videoWidth + 'x' +
                                            this.videoHeight,
                                            f = c.width + 'x' + c.height;
                                        return void this.handler.observer.trigger(
                                            o.PlayerEvent.MEDIA_EVENT, {
                                                type: o.PlayerMessage.DIMENSION_CHANGE,
                                                code: 0,
                                                message: 'stream dimension change',
                                                data: {
                                                    aspect1: d,
                                                    aspect2: f,
                                                    isAVCHeader: !1,
                                                },
                                            });
                                    }
                                    for (var v = 'avc1.', p = a.data.subarray(1,
                                        4), g = 0; g < 3; g++) {
                                        var m = p[g].toString(16);
                                        m.length < 2 && (m = '0' + m), v += m;
                                    }
                                    this.avcTrack.codec = v, this.avcTrack.sps.push(
                                        a.data);
                                }
                                this.avcTrack.pps = [], i = e[r], r++;
                                for (var y = 0; y < i; y++) {
                                    var _ = (e[r] << 8) + e[r + 1];
                                    r += 2;
                                    var S = {
                                        data: e.subarray(r, r + _),
                                        type: 8,
                                    };
                                    r += _, this.avcTrack.pps.push(
                                        S.data), (this.isFirstParseAVCHeader ||
                                        this.isDebugLevel > 0 ||
                                        this.avcHeaderLogCount %
                                        this.AVC_HEADER_LOG_LIMIT == 0) &&
                                    l.logger.log('FLVParser.parseAVCHeader, pps = ' +
                                        S.data);
                                }
                                this.isFirstParseAVCHeader = !1, ++this.avcHeaderLogCount /
                                this.AVC_HEADER_LOG_CYCLE > 1 &&
                                (this.avcHeaderLogCount = 0);
                            },
                        },
                        {
                            key: 'parseSEIFrame',
                            value: function(e, t) {
                                e.readUByte();
                                for (var i = 0, r = 0, s = 0, n = !1; !n &&
                                e.bytesAvailable > 1;) {
                                    r = 0;
                                    do {i = e.readUByte(), r += i;} while (255 ===
                                    i);
                                    s = 0;
                                    do {i = e.readUByte(), s += i;} while (255 ===
                                    i);
                                    if ((5 === r || 19 === r) &&
                                        s >= this.SEI_UUID.length &&
                                        e.data.length >= s) {
                                        n = !0;
                                        for (var o = [], a = [], l = this.SEI_UUID.length, c = s -
                                            this.SEI_UUID.length; l--;) o.push(
                                            e.readUByte());
                                        if (o.toString() ===
                                            this.SEI_UUID.toString()) {
                                            for (; c--;) a.push(e.readUByte());
                                            var h = void 0,
                                                d = u.default.utf8ByteArrayToString(
                                                    a);
                                            try {
                                                h = JSON.parse(d) || {};
                                            } catch (e) {h = {};}
                                            h.wstime = 90 * t /
                                                9e4, this.handler &&
                                            this.handler.onSEIParsingData(h);
                                        }
                                    } else if (s <
                                        e.bytesAvailable) for (var f = 0; f <
                                    s; f++) e.readUByte();
                                }
                            },
                        },
                        {
                            key: 'parseAudioTag',
                            value: function(e, t) {
                                var i = [
                                    'Linear PCM, platform endian',
                                    'ADPCM',
                                    'MP3',
                                    'Linear PCM, little endian',
                                    'Nellymoser 16-kHz mono',
                                    'Nellymoser 8-kHz mono',
                                    'Nellymoser',
                                    'G.711 A-law logarithmic PCM',
                                    'G.711 mu-law logarithmic PCM',
                                    'reserved',
                                    'AAC',
                                    'Speex',
                                    'MP3 8-Khz',
                                    'Device-specific sound'], r = [
                                    '5.5-kHz',
                                    '11-kHz',
                                    '22-kHz',
                                    '44-kHz'], s = (240 & e[0]) >>> 4;
                                return t = t ||
                                    {}, t.soundFormat = i[s], t.soundRate = r[(12 &
                                    e[0]) >>> 2], t.soundSize = (32 & e[0]) >>>
                                1
                                    ? '16-bit'
                                    : '8-bit', t.soundType = 1 & e[0]
                                    ? 'Stereo'
                                    : 'Mono', 10 === s ? this.parseAACTag(
                                    e.subarray(1), t) : t;
                            },
                        },
                        {
                            key: 'parseAACTag',
                            value: function(e, t) {
                                var i = [
                                    'AAC Sequence Header',
                                    'AAC Raw'];
                                if (t = t ||
                                        {}, t.aacPacketType = i[e[0]], this.isDebugLevel >
                                    0 && l.logger.log(e[0] +
                                        ', FLVParser.parseAACTag timestamp = ' +
                                        t.timestamp), 1 === e[0]) {
                                    0 !== t.timestamp &&
                                    (this.hasAudio = !0), -1 !==
                                    this.aacTrack.startDts && t.timestamp >=
                                    this.aacTrack.startDts + this.bufLen &&
                                    (this.aacTrack.endDts = t.timestamp, this.remux(), this.bufLen = this.config.normalBufferLen), -1 ===
                                    this.aacTrack.startDts &&
                                    (this.aacTrack.startDts = t.timestamp);
                                    var r = {
                                        unit: e.subarray(1),
                                        pts: 90 * t.timestamp,
                                        dts: 90 * t.timestamp,
                                        ts: t.timestamp,
                                    };
                                    this.aacTrack.samples.push(
                                        r), this.aacTrack.endDts = t.timestamp, this.aacTrack.len += r.unit.length;
                                } else if (0 === e[0]) {
                                    var s = this.getAdtsConfig(e.subarray(1),
                                        null);
                                    this.audioCodec = s.codec, this.audioConfig = s.config, this.audioSampleRate = s.samplerate, this.audioChannelCount = s.channelCount;
                                } else l.logger.error('parseAACTag error, type = ' +
                                    e[0]);
                            },
                        },
                        {
                            key: 'getAdtsConfig',
                            value: function(e, t) {
                                var i = void 0, r = void 0, s = void 0,
                                    n = void 0, o = void 0,
                                    a = navigator.userAgent.toLowerCase(), u = [
                                        96e3,
                                        88200,
                                        64e3,
                                        48e3,
                                        44100,
                                        32e3,
                                        24e3,
                                        22050,
                                        16e3,
                                        12e3,
                                        11025,
                                        8e3,
                                        7350];
                                return i = (248 & e[0]) >>> 3, r = (7 & e[0]) <<
                                    1 | e[1] >>> 7, n = (120 & e[1]) >>
                                    3, -1 !== a.indexOf('firefox')
                                    ? r >= 6
                                        ? (i = 5, o = new Array(4), s = r - 3)
                                        : (i = 2, o = new Array(2), s = r)
                                    : -1 !== a.indexOf('android')
                                        ? (i = 2, o = new Array(2), s = r)
                                        : (i = 5, o = new Array(4), t &&
                                        (-1 !== t.indexOf('mp4a.40.29') ||
                                            -1 !== t.indexOf('mp4a.40.5')) ||
                                        !t && r >= 6
                                            ? s = r - 3
                                            : ((t && -1 !==
                                                t.indexOf('mp4a.40.2') && r >=
                                                6 && 1 === n || !t && 1 ===
                                                n) && (i = 2, o = new Array(
                                                2)), s = r)), o[0] = i <<
                                    3, o[0] |= (14 & r) >> 1, o[1] |= (1 & r) <<
                                    7, o[1] |= n << 3, 5 === i &&
                                (o[1] |= (14 & s) >> 1, o[2] = (1 & s) <<
                                    7, o[2] |= 8, o[3] = 0), l.logger.log('FLVParser.parseADTSConfig, audioCodec=mp4a.40.' +
                                    i + ' samplerate=' + u[r] + ' channel=' +
                                    n + ' exIndex=' + s + ' config=' + o), {
                                    config: o,
                                    channelCount: n,
                                    codec: 'mp4a.40.' + i,
                                    samplerate: u[r],
                                };
                            },
                        },
                        {
                            key: 'remux',
                            value: function() {
                                var e = this.avcTrack, t = this.aacTrack;
                                this.hasVideo || (this.avcTrack.startDts = -1);
                                var i = e.startDts, r = e.endDts;
                                -1 === i && (i = t.startDts, r = t.endDts);
                                var s = {
                                    type: 'audio',
                                    id: 2,
                                    sequenceNumber: 0,
                                    samples: [],
                                    len: 0,
                                    duration: 0,
                                    startDts: -1,
                                    endDts: 0,
                                };
                                if (s.config = this.audioConfig, s.timescale = this.config.timescale, s.channelCount = this.audioChannelCount, s.audiosamplerate = this.audioSampleRate, s.codec = '' ===
                                    this.audioCodec
                                        ? 'mp4a.40.5'
                                        : this.audioCodec, t.samples.length) for (var n = t.samples, o = n[0]; o.ts <
                                r;) {
                                    if (o = n.shift(), s.samples.push(
                                            o), s.len += o.unit.length, this.aacTrack.len -= o.unit.length, -1 ===
                                        s.startDts &&
                                        (s.startDts = o.ts), s.endDts = o.ts, 0 ===
                                        n.length) {
                                        this.resetAacTrack();
                                        break;
                                    }
                                    o = n[0], t.startDts = o.ts, s.endDts = o.ts;
                                }
                                s.duration = (s.endDts - s.startDts) /
                                    1e3, e.duration = (this.avcTrack.endDts -
                                    this.avcTrack.startDts) /
                                    1e3, this.isFirstRemux &&
                                (this.isFirstRemux = !1, l.logger.log('FLVParser.remux, hasAudio = ' +
                                    this.hasAudio + ', hasVideo = ' +
                                    this.hasVideo), l.logger.log('FLVParser.remux, aacTrack[' +
                                    s.startDts + ', ' + s.endDts +
                                    '], avcTrack[' + e.startDts + ', ' +
                                    e.endDts + ']'), this.initRender(s,
                                    e)), this.hasAudioVideo(s,
                                    e), this.isDebugLevel > 0 &&
                                l.logger.log('FLVParser.remux, aacTrack[' +
                                    s.startDts + ', ' + s.endDts +
                                    '], avcTrack[' + e.startDts + ', ' +
                                    e.endDts + ']'), this.handler &&
                                this.handler.parseToRemux(s, e, 0,
                                    !0), this.resetAvcTrack();
                            },
                        },
                        {
                            key: 'initRender',
                            value: function(e, t) {
                                0 === e.endDts && -1 === e.startDts &&
                                (e.config = void 0), 0 === t.endDts &&
                                -1 === t.startDts &&
                                (this.avcTrack.samples = []);
                            },
                        },
                        {
                            key: 'hasAudioVideo',
                            value: function(e, t) {
                                var i = '', r = !1;
                                this.hasAudio && 0 === e.endDts &&
                                -1 === e.startDts &&
                                (r = !0, i = 'pre has audio, but current no audio data coming.'), !r &&
                                this.hasVideo &&
                                (0 === t.endDts && -1 === t.startDts || 0 ===
                                    t.endDts && 0 === t.startDts) &&
                                (r = !0, i = 'pre has video, but current no video data coming.'), r &&
                                (l.logger.log(i), this.handler &&
                                this.handler.observer &&
                                this.handler.observer.trigger(
                                    o.PlayerEvent.MEDIA_EVENT, {
                                        type: o.PlayerMessage.AUDIO_VIDEO_SWITCH,
                                        code: 0,
                                        message: i,
                                    }));
                            },
                        },
                        {
                            key: 'parseGenericTag',
                            value: function(e) {
                                return {
                                    tagType: this.tagTypes[e[0]],
                                    dataSize: e[1] << 16 | e[2] << 8 | e[3],
                                    timestamp: e[7] << 24 | e[4] << 16 |
                                    e[5] << 8 | e[6],
                                    streamID: e[8] << 16 | e[9] << 8 | e[10],
                                };
                            },
                        },
                        {
                            key: 'parseFlvTag',
                            value: function(e) {
                                var t = this.parseGenericTag(e);
                                switch (e[0]) {
                                    case 8:
                                        this.parseAudioTag(
                                            e.subarray(this.FLV_TAG_HEADER_LEN),
                                            t);
                                        break;
                                    case 9:
                                        this.parseVideoTag(
                                            e.subarray(this.FLV_TAG_HEADER_LEN),
                                            t);
                                        break;
                                    case 18:
                                        l.logger.log(
                                            'FLVParser.parseFlvTag, receive metadata tag.'), this.parseScriptTag(
                                            e.subarray(this.FLV_TAG_HEADER_LEN));
                                }
                                return t;
                            },
                        },
                        {
                            key: 'parseScriptTag',
                            value: function(e) {
                                var t = 0;
                                if (e[0] === this.AMF_DATA_TYPE_STRING) {
                                    var i = e[1] << 8 | e[2],
                                        r = u.default.Uint8ArrayToString(
                                            e.subarray(3, 3 + i));
                                    if (10 === i && 'onMetaData' === r &&
                                        !((t += 3 + i) >= e.length)) {
                                        if (e[t] !==
                                            this.AMF_DATA_TYPE_ECMA_ARRAY) return void l.logger.debug(
                                            'script tag data type not AMF_DATA_TYPE_ECMA_ARRAY');
                                        t += 1, this.processArray(e.subarray(t),
                                            !0);
                                    }
                                }
                            },
                        },
                        {
                            key: 'processArray',
                            value: function(e, t) {
                                var i = 0, r = e[i] << 24 | e[i + 1] << 16 |
                                    e[i + 2] << 8 | e[i + 3];
                                i += 4;
                                for (var s = 0; s < r; s++) {
                                    var n = void 0, o = void 0;
                                    t && (n = e[i] << 8 | e[i +
                                    1], i += 2, o = u.default.Uint8ArrayToString(
                                        e.subarray(i, i + n)), i += n), o ===
                                    this.keyframes.keyframesName &&
                                    (this.keyframes.parsingKeyframes = !0);
                                    var a = this.processScriptType(
                                        e.subarray(i));
                                    this.keyframes.parsingKeyframes &&
                                    (this.keyframes.parsingTimes
                                        ? this.keyframes.times.push(a.value)
                                        : this.keyframes.parsingFilePositions &&
                                        this.keyframes.filepositions.push(
                                            a.value)), o ===
                                    this.keyframes.keyframesName &&
                                    (this.keyframes.parsingKeyframes = !1), 'duration' ===
                                    o && a.value && a.value > 0 &&
                                    this.handler &&
                                    this.handler.parseToSetMSEDuration(
                                        a.value), i += a.len;
                                }
                                return i;
                            },
                        },
                        {
                            key: 'processScriptType',
                            value: function(e) {
                                var t = e[0], i = 1, r = void 0,
                                    s = {endOfData: !1};
                                switch (t) {
                                    case this.SCRIPTTYPE.NUMBER:
                                        var n = new Uint8Array(
                                            e.subarray(1, 9));
                                        r = new DataView(n.buffer).getFloat64(
                                            0), i += 8;
                                        break;
                                    case this.SCRIPTTYPE.BOOLEAN:
                                        r = e[1], i += 1;
                                        break;
                                    case this.SCRIPTTYPE.STRING:
                                        var o = e[1] << 8 | e[2];
                                        i += 2, r = u.default.Uint8ArrayToString(
                                            e.subarray(3, 3 + o)), i += o;
                                        break;
                                    case this.SCRIPTTYPE.OBJECT:
                                        i += this.processScriptDataObject(
                                            e.subarray(1));
                                        break;
                                    case this.SCRIPTTYPE.MOVIE_CLIP:
                                        var a = e[1] << 8 | e[2];
                                        i += 2, r = u.default.Uint8ArrayToString(
                                            e.subarray(3, 3 + a)), i += a;
                                        break;
                                    case this.SCRIPTTYPE.NULL:
                                    case this.SCRIPTTYPE.UNDEFINED:
                                        break;
                                    case this.SCRIPTTYPE.REFERENCE:
                                        r = e[1] << 8 | e[2], i += 2;
                                        break;
                                    case this.SCRIPTTYPE.ECMA_ARRAY:
                                        i += this.processArray(e.subarray(1),
                                            !0);
                                        break;
                                    case this.SCRIPTTYPE.END_OF_DATA:
                                        s.endOfData = !0, i += 3;
                                        break;
                                    case this.SCRIPTTYPE.STRICT_ARRAY:
                                        i += this.processArray(e.subarray(1),
                                            !1);
                                        break;
                                    case this.SCRIPTTYPE.DATE:
                                        var l = new Uint8Array(
                                            e.subarray(1, 9)), c = new DataView(
                                            l.buffer).getFloat64(0);
                                        i += 8;
                                        var h = e[9] << 8 | e[10];
                                        i += 2, r = {
                                            dateTime: c,
                                            localDateTimeOffset: h,
                                        };
                                        break;
                                    case this.SCRIPTTYPE.LONG_STRING:
                                        var d = e[1] << 24 | e[2] << 16 |
                                            e[3] << 8 | e[4];
                                        i += 4, r = u.default.Uint8ArrayToString(
                                            e.subarray(5, 5 + d)), i += d;
                                }
                                return s.type = t, s.value = r, s.len = i, s;
                            },
                        },
                        {
                            key: 'processScriptDataObject',
                            value: function(e) {
                                var t = void 0, i = 0;
                                do {
                                    var r = e[i] << 8 | e[i + 1], s = void 0;
                                    if (i += 2, s = u.default.Uint8ArrayToString(
                                            e.subarray(i, i +
                                                r)), i += r, this.keyframes.parsingKeyframes &&
                                        (s === this.keyframes.timesName
                                            ? this.keyframes.parsingTimes = !0
                                            : s ===
                                            this.keyframes.filepositionsName &&
                                            (this.keyframes.parsingFilePositions = !0)), t = this.processScriptType(
                                            e.subarray(
                                                i)), this.keyframes.parsingKeyframes &&
                                        (s === this.keyframes.timesName
                                            ? this.keyframes.parsingTimes = !1
                                            : s ===
                                            this.keyframes.filepositionsName &&
                                            (this.keyframes.parsingFilePositions = !1)), i += t.len, t.type <
                                        0 || t.type > 12) {
                                        l.logger.error('FLVParser.processScriptDataObject error: type = ' +
                                            t.type);
                                        break;
                                    }
                                    l.logger.debug('[ScriptDataObject]keynameStr = ' +
                                        s + ', type = ' + t.type +
                                        ', value = ' + t.value + ', len = ' +
                                        t.len + ', end = ' + t.endOfData);
                                } while (!t.endOfData);
                                return i;
                            },
                        },
                        {
                            key: 'parseFlv',
                            value: function(e) {
                                var t = 0, i = void 0, r = void 0, s = void 0;
                                for (this.hasFlvHeaderParsed ||
                                     (t += this.FLV_HEADER_LEN, this.hasFlvHeaderParsed = !0); t <
                                     e.byteLength;) {
                                    if (t + this.FLV_PREV_TAG_SIZE_LEN +
                                        this.FLV_TAG_HEADER_LEN >=
                                        e.byteLength) {
                                        this.preTagData = e.subarray(t);
                                        break;
                                    }
                                    if (t += this.FLV_PREV_TAG_SIZE_LEN, r = e[t +
                                        1] << 16, r |= e[t + 2] << 8, r |= e[t +
                                        3], i = r + this.FLV_TAG_HEADER_LEN, t +
                                        i > e.byteLength) {
                                        this.preTagData = e.subarray(t -
                                            this.FLV_PREV_TAG_SIZE_LEN);
                                        break;
                                    }
                                    r > 0 &&
                                    (s = e.subarray(t, t + i), this.parseFlvTag(
                                        s)), t += i;
                                }
                            },
                        },
                        {
                            key: 'getKeyframeByTime',
                            value: function(e) {
                                var t = 0, i = -1;
                                if (!this.keySampleTimeArray.length) return -1;
                                var r = this.keySampleTimeArray.length - 1;
                                for (t = 0; t < r; t++) if (e >=
                                    this.keySampleTimeArray[t] &&
                                    e <= this.keySampleTimeArray[t + 1]) {
                                    i = t;
                                    break;
                                }
                                return i > 0 &&
                                i < this.keySampleTimeArray.length
                                    ? this.keySampleTimeArray[i]
                                    : -1;
                            },
                        },
                        {
                            key: 'getKeyframePosByTime',
                            value: function(e) {
                                var t = {time: 0, fileposition: 0}, i = 0,
                                    r = 0;
                                if (this.keyframes.times.length) {
                                    for (i = 0; i <
                                    this.keyframes.times.length && e >=
                                    this.keyframes.times[i]; i++) t.time = this.keyframes.times[i], r = i;
                                    r <= this.keyframes.filepositions.length &&
                                    (t.fileposition = this.keyframes.filepositions[r]);
                                }
                                return t;
                            },
                        },
                        {
                            key: 'getKeyframePosWithPreTagLenByTime',
                            value: function(e) {
                                var t = this.getKeyframePosByTime(e);
                                return t.fileposition &&
                                (t.fileposition -= this.FLV_PREV_TAG_SIZE_LEN), t;
                            },
                        },
                        {
                            key: 'addPreTagData',
                            value: function(e) {
                                var t = e;
                                return this.preTagData &&
                                (t = this.concatenate(Uint8Array,
                                    this.preTagData,
                                    e), this.preTagData = null), t;
                            },
                        },
                        {
                            key: 'concatenate',
                            value: function(e) {
                                for (var t = 0, i = arguments.length, r = Array(
                                    i > 1 ? i - 1 : 0), s = 1; s < i; s++) r[s -
                                1] = arguments[s];
                                var n = !0, o = !1, a = void 0;
                                try {for (var u, l = r[Symbol.iterator](); !(n = (u = l.next()).done); n = !0) {t += u.value.length;}} catch (e) {o = !0, a = e;} finally {
                                    try {
                                        !n && l.return && l.return();
                                    } finally {if (o) throw a;}
                                }
                                var c = new e(t), h = 0, d = !0, f = !1,
                                    v = void 0;
                                try {
                                    for (var p, g = r[Symbol.iterator](); !(d = (p = g.next()).done); d = !0) {
                                        var m = p.value;
                                        c.set(m, h), h += m.length;
                                    }
                                } catch (e) {f = !0, v = e;} finally {
                                    try {
                                        !d && g.return && g.return();
                                    } finally {if (f) throw v;}
                                }
                                return c;
                            },
                        },
                        {
                            key: 'debugLogLevel',
                            value: function(e) {
                                var t = parseInt(e.level);
                                isNaN(t)
                                    ? this.isDebugLevel = 0
                                    : this.isDebugLevel = t;
                            },
                        }]), e;
                }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(10), a = i(66), u = r(a), l = i(65), c = r(l),
                h = function() {
                    function e(t, i) {
                        s(this,
                            e), this.handler = t, this.ISGenerated = !1, this.PES2MP4SCALEFACTOR = 4, this.PES_TIMESCALE = 9e4, this.MP4_TIMESCALE = this.PES_TIMESCALE /
                            this.PES2MP4SCALEFACTOR, this.config = {
                            maxBufferHole: .3,
                            maxSeekHole: 2,
                            stretchShortVideoTrack: !1,
                        }, this.isDebugLevel = 0, this.enableAudioStrategy = !('false' ===
                            String((i || {}).enableAudioStrategy));
                    }
                    
                    return n(e, [
                        {
                            key: 'destroy',
                            value: function() {this.reset(), this._initPTS = this._initDTS = void 0, this.ISGenerated = !1;},
                        },
                        {
                            key: 'reset',
                            value: function() {this.nextAacPts = this.nextAvcDts = void 0;},
                        },
                        {
                            key: 'remux',
                            value: function(e, t, i, r) {
                                if (this.ISGenerated || this.generateIS(e, t,
                                        i), this.ISGenerated) {
                                    var s = void 0, n = void 0;
                                    if (e.samples.length) {
                                        if (n = this.remuxAudio(e, i,
                                                r), t.samples.length) {
                                            var o = void 0;
                                            n && (o = n.endPTS -
                                                n.startPTS), s = this.remuxVideo(
                                                t, i, r, o);
                                        }
                                        this._onDataHandler(
                                            n), this._onDataHandler(s);
                                    } else t.samples.length &&
                                    (s = this.remuxVideo(t, i,
                                        r)), this._onDataHandler(s);
                                }
                                this.handler && this.handler.remuxToFragParsed();
                            },
                        },
                        {
                            key: 'generateIS',
                            value: function(e, t, i) {
                                var r = {}, s = e.samples, n = t.samples,
                                    a = this.PES_TIMESCALE,
                                    l = void 0 === this._initPTS, c = void 0,
                                    h = void 0;
                                if (l && (c = h = 1 / 0), e.config) {
                                    if (e.timescale = this.timescale, e.timescale *
                                        e.duration > Math.pow(2, 32)) {
                                        e.timescale = this.timescale /
                                            function e(t, i) {
                                                return i ? e(i, t % i) : t;
                                            }(e.audiosamplerate, 1024);
                                    }
                                    o.logger.log('audio mp4 timescale: ' +
                                        e.timescale), r.audio = {
                                        container: 'audio/mp4',
                                        audioCodec: e.codec,
                                        audioMoov: u.default.initSegment([e]),
                                        audioChannelCount: e.channelCount,
                                    }, l &&
                                    (c = h = s.length ? s[0].pts - a * i : 0);
                                }
                                t.sps && t.pps && n.length &&
                                (t.timescale = this.timescale, r.video = {
                                    container: 'video/mp4',
                                    videoCodec: t.codec,
                                    videoMoov: u.default.initSegment([t]),
                                    videoWidth: t.width,
                                    videoHeight: t.height,
                                }, l && (c = Math.min(c, n[0].pts - a *
                                    i), h = Math.min(h, n[0].dts - a *
                                    i))), Object.keys(r).length
                                    ? (this.handler &&
                                    this.handler.remuxToFragParsingInitSegment(
                                        r), this.ISGenerated = !0, l &&
                                    (this._initPTS = c, this._initDTS = h))
                                    : o.logger.error(
                                        'MP4Remuxer.generateIS error');
                            },
                        },
                        {
                            key: 'remuxVideo',
                            value: function(e, t, i, r) {
                                var s = 8, n = this.PES_TIMESCALE,
                                    a = this.PES2MP4SCALEFACTOR, l = void 0,
                                    c = void 0, h = void 0, d = void 0,
                                    f = void 0, v = void 0, p = void 0,
                                    g = e.samples, m = [], y = void 0;
                                y = i
                                    ? this.nextAvcDts
                                    : t <= 0
                                        ? this.nextAvcDts
                                        : t * n;
                                for (var _ = g[0].dts, S = g[0].dts, E = g[0].pts, R = g[0].pts, b = 1; b <
                                g.length; b++) {
                                    var T = g[b];
                                    _ = _ <= T.dts ? _ : T.dts, S = S >= T.dts
                                        ? S
                                        : T.dts, E = E <= T.pts
                                        ? E
                                        : T.pts, R = R >= T.pts ? R : T.pts;
                                }
                                f = Math.max(this._PTSNormalize(_, y) -
                                    this._initDTS,
                                    0), d = Math.max(this._PTSNormalize(E, y) -
                                    this._initDTS, 0);
                                var C = Math.round((f - y) / 90);
                                i && C && C > 1 && (f = y, g[0].dts = f +
                                    this._initDTS, d = Math.max(d - C,
                                    y), g[0].pts = d +
                                    this._initDTS), p = Math.max(this._PTSNormalize(
                                    S, y) - this._initDTS,
                                    0), v = Math.max(this._PTSNormalize(R, y) -
                                    this._initDTS, 0), v = Math.max(v, p);
                                var O = navigator.vendor,
                                    P = navigator.userAgent,
                                    I = O && O.indexOf('Apple') > -1 && P &&
                                        !P.match('CriOS');
                                I && (l = Math.round((p - f) /
                                    (a * (g.length - 1))));
                                for (var k = 0; k < g.length; k++) {
                                    var w = g[k];
                                    I
                                        ? w.dts = f + k * a * l
                                        : (w.dts = Math.max(this._PTSNormalize(
                                        w.dts, y) - this._initDTS,
                                        f), w.dts = Math.round(w.dts / a) *
                                        a), w.pts = Math.max(this._PTSNormalize(
                                        w.pts, y) - this._initDTS,
                                        w.dts), w.pts = Math.round(w.pts / a) *
                                        a;
                                }
                                c = new Uint8Array(e.len + 4 * e.nbNalu + 8);
                                var M = new DataView(c.buffer);
                                M.setUint32(0, c.byteLength), c.set(
                                    u.default.types.mdat, 4);
                                for (var A = 0; A < g.length; A++) {
                                    for (var L = g[A], N = 0, D = void 0; L.units.units.length;) {
                                        var x = L.units.units.shift();
                                        M.setUint32(s,
                                            x.data.byteLength), s += 4, c.set(
                                            x.data,
                                            s), s += x.data.byteLength, N += 4 +
                                            x.data.byteLength;
                                    }
                                    if (I) D = Math.max(0, l *
                                        Math.round((L.pts - L.dts) /
                                            (a * l))); else {
                                        if (A < g.length - 1) l = g[A + 1].dts -
                                            L.dts; else {
                                            var U = this.config, H = L.dts -
                                                g[A > 0 ? A - 1 : A].dts;
                                            if (U.stretchShortVideoTrack) {
                                                var V = U.maxBufferHole,
                                                    G = U.maxSeekHole,
                                                    B = Math.floor(Math.min(V,
                                                        G) * n), j = (r
                                                    ? d + r * n
                                                    : this.nextAacPts) - L.pts;
                                                j > B
                                                    ? (l = j - H, l < 0 &&
                                                    (l = H), o.logger.log('It is approximately ' +
                                                    j / 90 +
                                                    ' ms to the next segment; using duration ' +
                                                    l / 90 +
                                                    ' ms for the last video frame.'))
                                                    : l = H;
                                            } else l = H;
                                        }
                                        l /= a, D = Math.round((L.pts - L.dts) /
                                            a);
                                    }
                                    m.push({
                                        size: N,
                                        duration: l,
                                        cts: D,
                                        flags: {
                                            isLeading: 0,
                                            isDependedOn: 0,
                                            hasRedundancy: 0,
                                            degradPrio: 0,
                                            dependsOn: L.key ? 2 : 1,
                                            isNonSync: L.key ? 0 : 1,
                                        },
                                    });
                                }
                                if (this.nextAvcDts = p + l *
                                        a, e.len = 0, e.nbNalu = 0, m.length &&
                                    navigator.userAgent.toLowerCase().
                                        indexOf('chrome') > -1) {
                                    var q = m[0].flags;
                                    q.dependsOn = 2, q.isNonSync = 0;
                                }
                                return e.samples = m, h = u.default.moof(
                                    e.sequenceNumber++, f / a,
                                    e), e.samples = [], {
                                    moof: h,
                                    mdat: c,
                                    startPTS: d / n,
                                    endPTS: (v + a * l) / n,
                                    startDTS: f / n,
                                    endDTS: this.nextAvcDts / n,
                                    type: 'video',
                                    nb: m.length,
                                };
                            },
                        },
                        {
                            key: 'remuxAudio',
                            value: function(e, t, i) {
                                var r = this.PES_TIMESCALE, s = e.timescale,
                                    n = r / s,
                                    a = 1024 * e.timescale / e.audiosamplerate,
                                    l = void 0, h = 8, d = void 0, f = {},
                                    v = void 0, p = void 0, g = void 0,
                                    m = void 0, y = void 0, _ = void 0,
                                    S = void 0, E = void 0, R = void 0,
                                    b = void 0, T = [];
                                e.samples.sort(
                                    function(e, t) {return e.pts - t.pts;});
                                var C = e.samples,
                                    O = i ? this.nextAacPts : t * r;
                                if (this.enableAudioStrategy) for (var P = this._PTSNormalize(C[0].pts -
                                    this._initPTS, O), I = a * n, k = P +
                                    I, w = 1; w < C.length;) {
                                    var M = C[w], A = this._PTSNormalize(M.pts -
                                        this._initPTS, O), L = A - k;
                                    if (L < -.5 * I) this.isDebugLevel > 0 &&
                                    o.logger.log('Dropping frame due to ' +
                                        Math.abs(L / 90) +
                                        ' ms overlap.'), C.splice(w,
                                        1), e.len -= M.unit.length; else if (L >
                                        .5 * I) {
                                        var N = Math.round(L / I);
                                        this.isDebugLevel > 0 &&
                                        o.logger.log('Injecting ' + N +
                                            ' frame' + (N > 1 ? 's' : '') +
                                            ' of missing audio due to ' +
                                            Math.round(L / 90) + ' ms gap.');
                                        for (var D = 0; D < N; D++) {
                                            var x = C[w - 1].pts + I,
                                                U = c.default.getSilentFrame(
                                                    e.channelCount);
                                            U || (o.logger.log(
                                                'Unable to get silent frame for given audio codec; duplicating last frame instead.'), U = Array.prototype.slice.call(
                                                M.unit, 0)), C.splice(w, 0, {
                                                unit: U,
                                                pts: x,
                                                dts: x,
                                            }), e.len += U.length, w += 1;
                                        }
                                        k += (N + 1) * I, M.pts = C[w - 1].pts +
                                            I, w += 1;
                                    } else Math.abs(L) > .1 * I &&
                                    this.isDebugLevel > 0 &&
                                    o.logger.log('Invalid frame delta ' +
                                        (A - k + I) + ' at PTS ' +
                                        Math.round(A / 90) + ' (should be ' +
                                        I + ').'), k += I, M.pts = C[w -
                                    1].pts + I, w += 1;
                                }
                                for (; C.length;) {
                                    if (d = C.shift(), v = d.unit, S = d.pts -
                                            this._initDTS, E = d.dts -
                                            this._initDTS, void 0 !==
                                        _) R = this._PTSNormalize(S,
                                        _), b = this._PTSNormalize(E,
                                        _), f.duration = (b - _) / n; else {
                                        R = this._PTSNormalize(S,
                                            O), b = this._PTSNormalize(E, O);
                                        var H = Math.round(1e3 * (R - O) / r);
                                        if (i && H) {
                                            if (H > 0) ; else if (H < -12) {
                                                o.logger.log(-H +
                                                    ' ms overlapping between AAC samples detected, drop frame'), e.len -= v.byteLength;
                                                continue;
                                            }
                                            R = b = O;
                                        }
                                        if (m = Math.max(0, R), y = Math.max(0,
                                                b), !(e.len > 0)) return null;
                                        p = new Uint8Array(e.len +
                                            8), l = new DataView(
                                            p.buffer), l.setUint32(0,
                                            p.byteLength), p.set(
                                            u.default.types.mdat, 4);
                                    }
                                    p.set(v, h), h += v.byteLength, f = {
                                        size: v.byteLength,
                                        cts: 0,
                                        duration: 0,
                                        flags: {
                                            isLeading: 0,
                                            isDependedOn: 0,
                                            hasRedundancy: 0,
                                            degradPrio: 0,
                                            dependsOn: 1,
                                        },
                                    }, T.push(f), _ = b;
                                }
                                var V = 0, G = T.length;
                                if (G >= 2 && (V = T[G -
                                    2].duration, f.duration = V), G) {
                                    this.nextAacPts = R + n *
                                        V, e.len = 0, e.samples = T, g = u.default.moof(
                                        e.sequenceNumber++, y / n,
                                        e), e.samples = [];
                                    return {
                                        moof: g,
                                        mdat: p,
                                        startPTS: m / r,
                                        endPTS: this.nextAacPts / r,
                                        startDTS: y / r,
                                        endDTS: (b + n * V) / r,
                                        type: 'audio',
                                        nb: G,
                                    };
                                }
                                return null;
                            },
                        },
                        {
                            key: 'remuxEmptyAudio',
                            value: function(e, t, i, r) {
                                o.logger.log('MP4Remuxer.remuxEmptyAudio');
                                var s = this.PES_TIMESCALE, n = e.timescale
                                    ? e.timescale
                                    : e.audiosamplerate, a = s / n,
                                    u = r.startDTS * s, l = r.endDTS * s,
                                    h = 1024 * a, d = Math.ceil((l - u) / h),
                                    f = c.default.getSilentFrame(
                                        e.channelCount);
                                if (!f) return void o.logger.trace(
                                    'Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');
                                for (var v = [], p = 0; p < d; p++) {
                                    var g = u + p * h;
                                    v.push({
                                        unit: Array.prototype.slice.call(f, 0),
                                        pts: g,
                                        dts: g,
                                    }), e.len += f.length;
                                }
                                if (e.samples = v, e.samples &&
                                    e.samples.length) {
                                    var m = this.remuxAudio(e, t, i);
                                    this._onDataHandler(m);
                                }
                            },
                        },
                        {
                            key: '_PTSNormalize',
                            value: function(e, t) {
                                var i = void 0;
                                if (void 0 === t) return e;
                                for (i = t < e
                                    ? -8589934592
                                    : 8589934592; Math.abs(e - t) >
                                     4294967296;) e += i;
                                return e;
                            },
                        },
                        {
                            key: '_onDataHandler',
                            value: function(e) {
                                e && this.handler &&
                                this.handler.remuxToFragParsingData(e);
                            },
                        },
                        {
                            key: 'debugLogLevel',
                            value: function(e) {
                                var t = parseInt(e.level);
                                isNaN(t)
                                    ? this.isDebugLevel = 0
                                    : this.isDebugLevel = t;
                            },
                        },
                        {
                            key: 'passthrough',
                            get: function() {return !1;},
                        },
                        {
                            key: 'timescale',
                            get: function() {return this.MP4_TIMESCALE;},
                        }]), e;
                }();
            t.default = h;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {r(this, e);}
                
                return s(e, null, [
                    {
                        key: 'getUintMax',
                        value: function() {return 4294967295;},
                    },
                    {
                        key: 'Uint8ArrayToString',
                        value: function(e) {
                            for (var t = '', i = 0; i <
                            e.length; i++) t += String.fromCharCode(e[i]);
                            return t;
                        },
                    },
                    {
                        key: 'formatWsUrl',
                        value: function(e) {
                            var t = e.toString();
                            return 0 === t.indexOf('ws') &&
                            (t = 'http' + t.substring(2)), 0 ===
                            t.indexOf('wss') &&
                            (t = 'https' + t.substring(3)), t;
                        },
                    },
                    {
                        key: 'utf8ByteArrayToString',
                        value: function(e) {
                            for (var t = [], i = 0, r = 0, s = void 0, n = void 0, o = void 0, a = void 0, u = void 0; i <
                            e.length;) if ((s = e[i++]) <
                                128) t[r++] = String.fromCharCode(
                                s); else if (s > 191 && s < 224) {
                                var l = e[i++];
                                t[r++] = String.fromCharCode((31 & s) << 6 |
                                    63 & l);
                            } else s > 239 && s < 365
                                ? (n = e[i++], o = e[i++], a = e[i++], u = ((7 &
                                    s) << 18 | (63 & n) << 12 | (63 & o) << 6 |
                                    63 & a) -
                                    65536, t[r++] = String.fromCharCode(55296 +
                                    (u >>
                                        10)), t[r++] = String.fromCharCode(56320 +
                                    (1023 & u)))
                                : (n = e[i++], o = e[i++], t[r++] = String.fromCharCode((15 &
                                    s) << 12 | (63 & n) << 6 | 63 & o));
                            return t.join('');
                        },
                    },
                    {
                        key: 'stringToUtf8ByteArray',
                        value: function(e) {
                            for (var t = void 0, i = [], r = 0, s = 0; s <
                            e.length; s++) t = e.charCodeAt(s), t < 128
                                ? i[r++] = t
                                : t < 2048
                                    ? (i[r++] = t >> 6 | 192, i[r++] = 63 & t |
                                        128)
                                    : 55296 == (64512 & t) &&
                                    s + 1 < e.length &&
                                    56320 == (64512 & e.charCodeAt(s + 1))
                                        ? (t = 65536 + ((1023 & t) << 10) +
                                            (1023 & e.charCodeAt(
                                                ++s)), i[r++] = t >> 18 |
                                            240, i[r++] = t >> 12 & 63 |
                                            128, i[r++] = t >> 6 & 63 |
                                            128, i[r++] = 63 & t | 128)
                                        : (i[r++] = t >> 12 | 224, i[r++] = t >>
                                            6 & 63 | 128, i[r++] = 63 & t |
                                            128);
                            return i;
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(7), o = i(10), a = i(63),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e(t, i) {
                        r(this,
                            e), this.url = i, this.handler = t, this.isCloseAcive = !1, this.wsLoader = void 0, this.xhrLoader = void 0, this.socketId = parseInt(1e6 *
                            Math.random()), this.onWsOpen = this.onWsOpenHandler.bind(
                            this), this.onWsError = this.onWsErrorHandler.bind(
                            this), this.onWsClose = this.onWsCloseHandler.bind(
                            this), this.onWsData = this.onWsMessageHandler.bind(
                            this);
                    }
                    
                    return s(e, [
                        {
                            key: 'destroy',
                            value: function() {
                                this.wsLoader &&
                                (this.isCloseAcive = !0, this.wsLoader.close(), this.wsLoader = void 0), this.removeXHRLoader();
                            },
                        },
                        {
                            key: 'startLoad',
                            value: function() {
                                o.logger.log('XHRLoader.start: ' +
                                    this.url), this.startXHRLoad(this.url);
                            },
                        },
                        {
                            key: 'startWSLoad',
                            value: function(e) {
                                this.isCloseAcive = !1, this.wsLoader = new WebSocket(
                                    e), this.wsLoader.binaryType = 'arraybuffer', this.wsLoader.onopen = this.onWsOpen, this.wsLoader.onerror = this.onWsError, this.wsLoader.onclose = this.onWsClose, this.wsLoader.onmessage = this.onWsData;
                            },
                        },
                        {
                            key: 'onWsErrorHandler',
                            value: function(e) {
                                o.logger.warn('[' + this.socketId +
                                    '], WebSocket.onerror:' + e.code);
                            },
                        },
                        {
                            key: 'onWsOpenHandler',
                            value: function() {
                                this.isCloseAcive = !1, o.logger.log('[' +
                                    this.socketId +
                                    '], WebSocket.onopen'), this.handler &&
                                this.handler.observer &&
                                this.handler.observer.trigger(
                                    n.PlayerEvent.MEDIA_EVENT, {
                                        type: n.PlayerMessage.SOCKET_OPEN,
                                        code: 0,
                                        message: 'websocket open',
                                    });
                            },
                        },
                        {
                            key: 'onWsCloseHandler',
                            value: function(e) {
                                if (o.logger.log('[' + this.socketId +
                                        '], WebSocket.onclose isActive[' +
                                        this.isCloseAcive + ']:' +
                                        e.code), !this.isCloseAcive) try {
                                    e && e.currentTarget &&
                                    e.currentTarget.close(), this.handler &&
                                    this.handler.observer &&
                                    this.handler.observer.trigger(
                                        n.PlayerEvent.MEDIA_EVENT, {
                                            type: n.PlayerMessage.SOCKET_CLOSE,
                                            code: 0,
                                            message: 'websocket abnormal close',
                                        });
                                } catch (e) {}
                            },
                        },
                        {
                            key: 'onWsMessageHandler',
                            value: function(e) {
                                e.data instanceof ArrayBuffer &&
                                this.handler.downloadToStream(e.data);
                            },
                        },
                        {
                            key: 'initUrl',
                            value: function(e) {
                                if (e) {
                                    var t = e;
                                    return 0 === e.indexOf('http:') ? t = 'ws' +
                                        e.slice(4, e.length) : 0 ===
                                        e.indexOf('https:') &&
                                        (t = 'wss' + e.slice(5, e.length)), t;
                                }
                            },
                        },
                        {
                            key: 'startXHRLoad',
                            value: function(e) {
                                this.xhrLoader || (this.xhrLoader = new u.default(
                                    this.onXHRLoaderCallback.bind(
                                        this))), this.xhrLoader.start(e);
                            },
                        },
                        {
                            key: 'removeXHRLoader',
                            value: function() {
                                this.xhrLoader &&
                                (this.xhrLoader.stop(), this.xhrLoader = void 0);
                            },
                        },
                        {
                            key: 'onXHRLoaderCallback',
                            value: function(e) {
                                if (this.xhrLoader) {
                                    var t = parseInt(e.code),
                                        i = this.xhrLoader.codes,
                                        r = e.message || '';
                                    if (o.logger.log('XHRLoader.response: ' +
                                            r), t === i.NOTICE) {
                                        var s = this.initUrl(this.url);
                                        this.startWSLoad(s);
                                    } else if (t === i.ERROR) this.handler &&
                                    this.handler.observer &&
                                    this.handler.observer.trigger(
                                        n.PlayerEvent.MEDIA_EVENT, {
                                            type: n.PlayerMessage.ERROR,
                                            code: 0,
                                            message: r,
                                        }); else if (t === i.SUCCESS) {
                                        var a = this.initUrl(r);
                                        this.startWSLoad(a);
                                    } else t === i.NETWORK && this.handler &&
                                    this.handler.observer &&
                                    this.handler.observer.trigger(
                                        n.PlayerEvent.MEDIA_EVENT, {
                                            type: n.PlayerMessage.NETWORK,
                                            code: 0,
                                            message: r,
                                        });
                                    this.removeXHRLoader();
                                }
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e(t) {
                    r(this,
                        e), this.url = '', this.realUrl = void 0, this.isFirstLoad = !0, this.callback = t, this.xhrLoader = void 0, this.retryCount = 0, this.retryCountLimit = 3, this.retryTimeout = 2e4, this.retryTimer = void 0, this.CODES = {
                        NETWORK: 1,
                        SUCCESS: 0,
                        NOTICE: -1,
                        ERROR: -2,
                    };
                }
                
                return s(e, [
                    {
                        key: 'start',
                        value: function(e) {
                            this.stop();
                            var t = void 0;
                            t = 'undefined' != typeof XDomainRequest
                                ? this.xhrLoader = new XDomainRequest
                                : this.xhrLoader = new XMLHttpRequest, t.onerror = this.xhrLoadError.bind(
                                this), t.onloadend = this.xhrLoadEnd.bind(
                                this), t.onprogress = this.xhrLoadProgress.bind(
                                this), this.retryTimer = window.setTimeout(
                                this.xhrLoadTimeout.bind(this),
                                this.retryTimeout), this.url = e;
                            var i = e + (-1 === e.indexOf('?') ? '?' : '&');
                            i += 'randomNum=' +
                                Math.random().toFixed(6).substring(2), t.open(
                                'GET', i, !0), t.send();
                        },
                    },
                    {
                        key: 'stop',
                        value: function() {
                            this.retryTimer && (window.clearTimeout(
                                this.retryTimer), this.retryTimer = void 0), this.xhrLoader &&
                            (this.xhrLoader.onloadend = void 0, this.xhrLoader.onprogress = void 0, this.xhrLoader.onerror = void 0, this.xhrLoader.abort()), this.realUrl = void 0, this.xhrLoader = void 0;
                        },
                    },
                    {
                        key: 'response',
                        value: function(e, t) {
                            this.callback &&
                            this.callback({code: e, message: t});
                        },
                    },
                    {
                        key: 'xhrLoadEnd',
                        value: function(e) {
                            if (!e ||
                                !e.currentTarget) return this.stop(), void this.response(
                                this.CODES.NOTICE,
                                'xhrLoadEnd response is null');
                            var t = e.currentTarget.status;
                            t >= 200 && t < 300 || 304 === t
                                ? this.response(this.CODES.NOTICE,
                                'xhrLoadEnd success')
                                : this.response(this.CODES.ERROR,
                                'can not find stream, maybe stream is stop'), this.stop();
                        },
                    },
                    {
                        key: 'xhrLoadError',
                        value: function(e) {
                            if (!e ||
                                !e.currentTarget) return this.stop(), void this.response(
                                this.CODES.NOTICE,
                                'xhrLoadError response is null');
                            this.response(this.CODES.ERROR,
                                'get stream file fail'), this.stop();
                        },
                    },
                    {
                        key: 'xhrLoadTimeout',
                        value: function() {
                            this.stop(), this.retryCount++, this.retryCount <
                            this.retryCountLimit
                                ? this.start(this.url)
                                : this.response(this.CODES.NETWORK,
                                    'xhrLoad timeout');
                        },
                    },
                    {
                        key: 'xhrLoadProgress',
                        value: function(e) {
                            if (!e ||
                                !e.currentTarget) return this.stop(), void this.response(
                                this.CODES.NOTICE,
                                'xhrLoadProgress response is null');
                            if (!this.realUrl) {
                                var t = e.currentTarget.responseURL;
                                if (t && t.length > 0) {
                                    this.isUrlEqual(t)
                                        ? this.response(this.CODES.NOTICE,
                                        'url not 302 redirect')
                                        : (this.realUrl = t, this.response(
                                        this.CODES.SUCCESS, t)), this.stop();
                                } else this.stop(), this.isFirstLoad
                                    ? (this.isFirstLoad = !1, this.start(
                                        this.url))
                                    : this.response(this.CODES.NETWORK,
                                        'get stream file url is empty');
                            }
                        },
                    },
                    {
                        key: 'isUrlEqual',
                        value: function(e) {
                            if (-1 === e.indexOf('?')) return this.url === e;
                            for (var t = e.split('?'), i = t[1].split(
                                '&'), r = 0; r < i.length; r++) {
                                if ('randomNum' === i[r].split('=')[0]) {
                                    i.splice(r, 1);
                                    break;
                                }
                            }
                            var s = t[0];
                            if (!i.length) return this.url === s;
                            for (var n = 0; n < i.length; n++) s += 0 === n
                                ? '?' + i[n]
                                : '&' + i[n];
                            return this.url === s;
                        },
                    },
                    {
                        key: 'codes',
                        get: function() {return this.CODES;},
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = i(67), o = function() {
                function e(t) {
                    r(this,
                        e), this.data = t, this.bytesAvailable = this.data.byteLength, this.word = 0, this.bitsAvailable = 0;
                }
                
                return s(e, [
                    {
                        key: 'loadWord',
                        value: function() {
                            var e = this.data.byteLength - this.bytesAvailable,
                                t = new Uint8Array(4),
                                i = Math.min(4, this.bytesAvailable);
                            if (0 === i) throw new Error('no bytes available');
                            t.set(this.data.subarray(e, e +
                                i)), this.word = new DataView(
                                t.buffer).getUint32(0), this.bitsAvailable = 8 *
                                i, this.bytesAvailable -= i;
                        },
                    },
                    {
                        key: 'skipBits',
                        value: function(e) {
                            var t;
                            this.bitsAvailable > e
                                ? (this.word <<= e, this.bitsAvailable -= e)
                                : (e -= this.bitsAvailable, t = e >>
                                3, e -= t >>
                                3, this.bytesAvailable -= t, this.loadWord(), this.word <<= e, this.bitsAvailable -= e);
                        },
                    },
                    {
                        key: 'readBits',
                        value: function(e) {
                            var t = Math.min(this.bitsAvailable, e),
                                i = this.word >>> 32 - t;
                            return e > 32 && n.logger.error(
                                'Cannot read more than 32 bits at a time'), this.bitsAvailable -= t, this.bitsAvailable >
                            0 ? this.word <<= t : this.bytesAvailable > 0 &&
                                this.loadWord(), t = e - t, t > 0 ? i << t |
                                this.readBits(t) : i;
                        },
                    },
                    {
                        key: 'skipLZ',
                        value: function() {
                            var e;
                            for (e = 0; e < this.bitsAvailable; ++e) if (0 !=
                                (this.word & 2147483648 >>>
                                    e)) return this.word <<= e, this.bitsAvailable -= e, e;
                            return this.loadWord(), e + this.skipLZ();
                        },
                    },
                    {
                        key: 'skipUEG',
                        value: function() {this.skipBits(1 + this.skipLZ());},
                    },
                    {
                        key: 'skipEG',
                        value: function() {this.skipBits(1 + this.skipLZ());},
                    },
                    {
                        key: 'readUEG',
                        value: function() {
                            var e = this.skipLZ();
                            return this.readBits(e + 1) - 1;
                        },
                    },
                    {
                        key: 'readEG',
                        value: function() {
                            var e = this.readUEG();
                            return 1 & e ? 1 + e >>> 1 : -1 * (e >>> 1);
                        },
                    },
                    {
                        key: 'readBoolean',
                        value: function() {return 1 === this.readBits(1);},
                    },
                    {
                        key: 'readUByte',
                        value: function() {return this.readBits(8);},
                    },
                    {
                        key: 'readUShort',
                        value: function() {return this.readBits(16);},
                    },
                    {
                        key: 'readUInt',
                        value: function() {return this.readBits(32);},
                    },
                    {
                        key: 'skipScalingList',
                        value: function(e) {
                            var t, i, r = 8, s = 8;
                            for (t = 0; t < e; t++) 0 !== s &&
                            (i = this.readEG(), s = (r + i + 256) %
                                256), r = 0 === s ? r : s;
                        },
                    },
                    {
                        key: 'readSPS',
                        value: function() {
                            var e, t, i, r, s, n, o, a = 0, u = 0, l = 0, c = 0,
                                h = 1;
                            if (this.readUByte(), e = this.readUByte(), this.readBits(
                                    5), this.skipBits(
                                    3), this.readUByte(), this.skipUEG(), 100 ===
                                e || 110 === e || 122 === e || 244 === e ||
                                44 === e || 83 === e || 86 === e || 118 === e ||
                                128 === e) {
                                var d = this.readUEG();
                                if (3 === d && this.skipBits(
                                        1), this.skipUEG(), this.skipUEG(), this.skipBits(
                                        1), this.readBoolean()) for (n = 3 !== d
                                    ? 8
                                    : 12, o = 0; o <
                                                                     n; o++) this.readBoolean() &&
                                (o < 6
                                    ? this.skipScalingList(16)
                                    : this.skipScalingList(64));
                            }
                            this.skipUEG();
                            var f = this.readUEG();
                            if (0 === f) this.readUEG(); else if (1 ===
                                f) for (this.skipBits(
                                1), this.skipEG(), this.skipEG(), t = this.readUEG(), o = 0; o <
                                        t; o++) this.skipEG();
                            if (this.skipUEG(), this.skipBits(
                                    1), i = this.readUEG(), r = this.readUEG(), s = this.readBits(
                                    1), 0 === s &&
                                this.skipBits(1), this.skipBits(
                                    1), this.readBoolean() &&
                                (a = this.readUEG(), u = this.readUEG(), l = this.readUEG(), c = this.readUEG()), this.readBoolean() &&
                                this.readBoolean()) {
                                var v = void 0;
                                switch (this.readUByte()) {
                                    case 1:
                                        v = [1, 1];
                                        break;
                                    case 2:
                                        v = [12, 11];
                                        break;
                                    case 3:
                                        v = [10, 11];
                                        break;
                                    case 4:
                                        v = [16, 11];
                                        break;
                                    case 5:
                                        v = [40, 33];
                                        break;
                                    case 6:
                                        v = [24, 11];
                                        break;
                                    case 7:
                                        v = [20, 11];
                                        break;
                                    case 8:
                                        v = [32, 11];
                                        break;
                                    case 9:
                                        v = [80, 33];
                                        break;
                                    case 10:
                                        v = [18, 11];
                                        break;
                                    case 11:
                                        v = [15, 11];
                                        break;
                                    case 12:
                                        v = [64, 33];
                                        break;
                                    case 13:
                                        v = [160, 99];
                                        break;
                                    case 14:
                                        v = [4, 3];
                                        break;
                                    case 15:
                                        v = [3, 2];
                                        break;
                                    case 16:
                                        v = [2, 1];
                                        break;
                                    case 255:
                                        v = [
                                            this.readUByte() << 8 |
                                            this.readUByte(),
                                            this.readUByte() << 8 |
                                            this.readUByte()];
                                }
                                v && (h = v[0] / v[1]);
                            }
                            return {
                                width: Math.ceil((16 * (i + 1) - 2 * a - 2 *
                                    u) * h),
                                height: (2 - s) * (r + 1) * 16 -
                                (s ? 2 : 4) * (l + c),
                            };
                        },
                    },
                    {
                        key: 'readSliceType',
                        value: function() {return this.readUByte(), this.readUEG(), this.readUEG();},
                    }]), e;
            }();
            t.default = o;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {r(this, e);}
                
                return s(e, null, [
                    {
                        key: 'getSilentFrame',
                        value: function(e) {
                            return 1 === e
                                ? new Uint8Array([0, 200, 0, 128, 35, 128])
                                : 2 === e
                                    ? new Uint8Array(
                                        [33, 0, 73, 144, 2, 25, 0, 35, 128])
                                    : 3 === e
                                        ? new Uint8Array([
                                            0,
                                            200,
                                            0,
                                            128,
                                            32,
                                            132,
                                            1,
                                            38,
                                            64,
                                            8,
                                            100,
                                            0,
                                            142])
                                        : 4 === e
                                            ? new Uint8Array([
                                                0,
                                                200,
                                                0,
                                                128,
                                                32,
                                                132,
                                                1,
                                                38,
                                                64,
                                                8,
                                                100,
                                                0,
                                                128,
                                                44,
                                                128,
                                                8,
                                                2,
                                                56])
                                            : 5 === e
                                                ? new Uint8Array([
                                                    0,
                                                    200,
                                                    0,
                                                    128,
                                                    32,
                                                    132,
                                                    1,
                                                    38,
                                                    64,
                                                    8,
                                                    100,
                                                    0,
                                                    130,
                                                    48,
                                                    4,
                                                    153,
                                                    0,
                                                    33,
                                                    144,
                                                    2,
                                                    56])
                                                : 6 === e
                                                    ? new Uint8Array([
                                                        0,
                                                        200,
                                                        0,
                                                        128,
                                                        32,
                                                        132,
                                                        1,
                                                        38,
                                                        64,
                                                        8,
                                                        100,
                                                        0,
                                                        130,
                                                        48,
                                                        4,
                                                        153,
                                                        0,
                                                        33,
                                                        144,
                                                        2,
                                                        0,
                                                        178,
                                                        0,
                                                        32,
                                                        8,
                                                        224])
                                                    : null;
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {r(this, e);}
                
                return s(e, null, [
                    {
                        key: 'init',
                        value: function() {
                            e.types = {
                                avc1: [],
                                avcC: [],
                                btrt: [],
                                dinf: [],
                                dref: [],
                                esds: [],
                                ftyp: [],
                                hdlr: [],
                                mdat: [],
                                mdhd: [],
                                mdia: [],
                                mfhd: [],
                                minf: [],
                                moof: [],
                                moov: [],
                                mp4a: [],
                                mvex: [],
                                mvhd: [],
                                sdtp: [],
                                stbl: [],
                                stco: [],
                                stsc: [],
                                stsd: [],
                                stsz: [],
                                stts: [],
                                tfdt: [],
                                tfhd: [],
                                traf: [],
                                trak: [],
                                trun: [],
                                trex: [],
                                tkhd: [],
                                vmhd: [],
                                smhd: [],
                            };
                            var t;
                            for (t in e.types) e.types.hasOwnProperty(t) &&
                            (e.types[t] = [
                                t.charCodeAt(0),
                                t.charCodeAt(1),
                                t.charCodeAt(2),
                                t.charCodeAt(3)]);
                            var i = new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                118,
                                105,
                                100,
                                101,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                86,
                                105,
                                100,
                                101,
                                111,
                                72,
                                97,
                                110,
                                100,
                                108,
                                101,
                                114,
                                0]), r = new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                115,
                                111,
                                117,
                                110,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                83,
                                111,
                                117,
                                110,
                                100,
                                72,
                                97,
                                110,
                                100,
                                108,
                                101,
                                114,
                                0]);
                            e.HDLR_TYPES = {video: i, audio: r};
                            var s = new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    1,
                                    0,
                                    0,
                                    0,
                                    12,
                                    117,
                                    114,
                                    108,
                                    32,
                                    0,
                                    0,
                                    0,
                                    1]),
                                n = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                            e.STTS = e.STSC = e.STCO = n, e.STSZ = new Uint8Array(
                                [
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0,
                                    0]), e.VMHD = new Uint8Array([
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0]), e.SMHD = new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0]), e.STSD = new Uint8Array(
                                [0, 0, 0, 0, 0, 0, 0, 1]);
                            var o = new Uint8Array([105, 115, 111, 109]),
                                a = new Uint8Array([97, 118, 99, 49]),
                                u = new Uint8Array([0, 0, 0, 1]);
                            e.FTYP = e.box(e.types.ftyp, o, u, o,
                                a), e.DINF = e.box(e.types.dinf,
                                e.box(e.types.dref, s));
                        },
                    },
                    {
                        key: 'box',
                        value: function(e) {
                            for (var t, i = Array.prototype.slice.call(
                                arguments,
                                1), r = 8, s = i.length, n = s; s--;) r += i[s].byteLength;
                            for (t = new Uint8Array(r), t[0] = r >> 24 &
                                255, t[1] = r >> 16 & 255, t[2] = r >> 8 &
                                255, t[3] = 255 & r, t.set(e,
                                4), s = 0, r = 8; s < n; s++) t.set(i[s],
                                r), r += i[s].byteLength;
                            return t;
                        },
                    },
                    {
                        key: 'hdlr',
                        value: function(t) {
                            return e.box(e.types.hdlr, e.HDLR_TYPES[t]);
                        },
                    },
                    {
                        key: 'mdat',
                        value: function(t) {return e.box(e.types.mdat, t);},
                    },
                    {
                        key: 'mdhd',
                        value: function(t, i) {
                            return i *= t, e.box(e.types.mdhd, new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                2,
                                0,
                                0,
                                0,
                                3,
                                t >> 24 & 255,
                                t >> 16 & 255,
                                t >> 8 & 255,
                                255 & t,
                                i >> 24,
                                i >> 16 & 255,
                                i >> 8 & 255,
                                255 & i,
                                85,
                                196,
                                0,
                                0]));
                        },
                    },
                    {
                        key: 'mdia',
                        value: function(t) {
                            return e.box(e.types.mdia,
                                e.mdhd(t.timescale, t.duration), e.hdlr(t.type),
                                e.minf(t));
                        },
                    },
                    {
                        key: 'mfhd',
                        value: function(t) {
                            return e.box(e.types.mfhd, new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                t >> 24,
                                t >> 16 & 255,
                                t >> 8 & 255,
                                255 & t]));
                        },
                    },
                    {
                        key: 'minf',
                        value: function(t) {
                            return 'audio' === t.type
                                ? e.box(e.types.minf,
                                    e.box(e.types.smhd, e.SMHD), e.DINF,
                                    e.stbl(t))
                                : e.box(e.types.minf,
                                    e.box(e.types.vmhd, e.VMHD), e.DINF,
                                    e.stbl(t));
                        },
                    },
                    {
                        key: 'moof',
                        value: function(t, i, r) {
                            return e.box(e.types.moof, e.mfhd(t), e.traf(r, i));
                        },
                    },
                    {
                        key: 'moov',
                        value: function(t) {
                            for (var i = t.length, r = []; i--;) r[i] = e.trak(
                                t[i]);
                            return e.box.apply(null, [
                                e.types.moov,
                                e.mvhd(t[0].timescale, t[0].duration)].concat(
                                r).
                                concat(e.mvex(t)));
                        },
                    },
                    {
                        key: 'mvex',
                        value: function(t) {
                            for (var i = t.length, r = []; i--;) r[i] = e.trex(
                                t[i]);
                            return e.box.apply(null, [e.types.mvex].concat(r));
                        },
                    },
                    {
                        key: 'mvhd',
                        value: function(t, i) {
                            i *= t;
                            var r = new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                2,
                                t >> 24 & 255,
                                t >> 16 & 255,
                                t >> 8 & 255,
                                255 & t,
                                i >> 24 & 255,
                                i >> 16 & 255,
                                i >> 8 & 255,
                                255 & i,
                                0,
                                1,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                64,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                255,
                                255,
                                255,
                                255]);
                            return e.box(e.types.mvhd, r);
                        },
                    },
                    {
                        key: 'sdtp',
                        value: function(t) {
                            var i, r, s = t.samples || [],
                                n = new Uint8Array(4 + s.length);
                            for (r = 0; r < s.length; r++) i = s[r].flags, n[r +
                            4] = i.dependsOn << 4 | i.isDependedOn << 2 |
                                i.hasRedundancy;
                            return e.box(e.types.sdtp, n);
                        },
                    },
                    {
                        key: 'stbl',
                        value: function(t) {
                            return e.box(e.types.stbl, e.stsd(t),
                                e.box(e.types.stts, e.STTS),
                                e.box(e.types.stsc, e.STSC),
                                e.box(e.types.stsz, e.STSZ),
                                e.box(e.types.stco, e.STCO));
                        },
                    },
                    {
                        key: 'avc1',
                        value: function(t) {
                            var i, r, s, n = [], o = [];
                            for (i = 0; i <
                            t.sps.length; i++) r = t.sps[i], s = r.byteLength, n.push(s >>>
                                8 & 255), n.push(255 & s), n = n.concat(
                                Array.prototype.slice.call(r));
                            for (i = 0; i <
                            t.pps.length; i++) r = t.pps[i], s = r.byteLength, o.push(s >>>
                                8 & 255), o.push(255 & s), o = o.concat(
                                Array.prototype.slice.call(r));
                            var a = e.box(e.types.avcC, new Uint8Array([
                                1, n[3], n[4], n[5], 255,
                                224 | t.sps.length].concat(n).
                                concat([t.pps.length]).
                                concat(o))), u = t.width, l = t.height;
                            return e.box(e.types.avc1, new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                u >> 8 & 255,
                                255 & u,
                                l >> 8 & 255,
                                255 & l,
                                0,
                                72,
                                0,
                                0,
                                0,
                                72,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                18,
                                100,
                                97,
                                105,
                                108,
                                121,
                                109,
                                111,
                                116,
                                105,
                                111,
                                110,
                                47,
                                104,
                                108,
                                115,
                                46,
                                106,
                                115,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                24,
                                17,
                                17]), a, e.box(e.types.btrt, new Uint8Array([
                                0,
                                28,
                                156,
                                128,
                                0,
                                45,
                                198,
                                192,
                                0,
                                45,
                                198,
                                192])));
                        },
                    },
                    {
                        key: 'esds',
                        value: function(e) {
                            var t = e.config.length;
                            return new Uint8Array([
                                0, 0, 0, 0, 3, 23 + t, 0, 1, 0, 4, 15 + t, 64,
                                21,
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([t]).
                                concat(e.config).
                                concat([6, 1, 2]));
                        },
                    },
                    {
                        key: 'mp4a',
                        value: function(t) {
                            var i = t.audiosamplerate;
                            return e.box(e.types.mp4a, new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                t.channelCount,
                                0,
                                16,
                                0,
                                0,
                                0,
                                0,
                                i >> 8 & 255,
                                255 & i,
                                0,
                                0]), e.box(e.types.esds, e.esds(t)));
                        },
                    },
                    {
                        key: 'stsd',
                        value: function(t) {
                            return 'audio' === t.type ? e.box(e.types.stsd,
                                e.STSD, e.mp4a(t)) : e.box(e.types.stsd, e.STSD,
                                e.avc1(t));
                        },
                    },
                    {
                        key: 'tkhd',
                        value: function(t) {
                            var i = t.id, r = t.duration * t.timescale,
                                s = t.width, n = t.height;
                            return e.box(e.types.tkhd, new Uint8Array([
                                0,
                                0,
                                0,
                                7,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                i >> 24 & 255,
                                i >> 16 & 255,
                                i >> 8 & 255,
                                255 & i,
                                0,
                                0,
                                0,
                                0,
                                r >> 24,
                                r >> 16 & 255,
                                r >> 8 & 255,
                                255 & r,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                64,
                                0,
                                0,
                                0,
                                s >> 8 & 255,
                                255 & s,
                                0,
                                0,
                                n >> 8 & 255,
                                255 & n,
                                0,
                                0]));
                        },
                    },
                    {
                        key: 'traf',
                        value: function(t, i) {
                            var r = e.sdtp(t), s = t.id;
                            return e.box(e.types.traf, e.box(e.types.tfhd,
                                new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    s >> 24,
                                    s >> 16 & 255,
                                    s >> 8 & 255,
                                    255 & s])), e.box(e.types.tfdt,
                                new Uint8Array([
                                    0,
                                    0,
                                    0,
                                    0,
                                    i >> 24,
                                    i >> 16 & 255,
                                    i >> 8 & 255,
                                    255 & i])),
                                e.trun(t, r.length + 16 + 16 + 8 + 16 + 8 + 8),
                                r);
                        },
                    },
                    {
                        key: 'trak',
                        value: function(t) {
                            return t.duration = t.duration || 4294967295, e.box(
                                e.types.trak, e.tkhd(t), e.mdia(t));
                        },
                    },
                    {
                        key: 'trex',
                        value: function(t) {
                            var i = t.id;
                            return e.box(e.types.trex, new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                i >> 24,
                                i >> 16 & 255,
                                i >> 8 & 255,
                                255 & i,
                                0,
                                0,
                                0,
                                1,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                0,
                                1,
                                0,
                                1]));
                        },
                    },
                    {
                        key: 'trun',
                        value: function(t, i) {
                            var r, s, n, o, a, u, l = t.samples || [],
                                c = l.length, h = 12 + 16 * c,
                                d = new Uint8Array(h);
                            for (i += 8 + h, d.set([
                                0,
                                0,
                                15,
                                1,
                                c >>> 24 & 255,
                                c >>> 16 & 255,
                                c >>> 8 & 255,
                                255 & c,
                                i >>> 24 & 255,
                                i >>> 16 & 255,
                                i >>> 8 & 255,
                                255 & i], 0), r = 0; r <
                                 c; r++) s = l[r], n = s.duration, o = s.size, a = s.flags, u = s.cts, d.set(
                                [
                                    n >>> 24 & 255,
                                    n >>> 16 & 255,
                                    n >>> 8 & 255,
                                    255 & n,
                                    o >>> 24 & 255,
                                    o >>> 16 & 255,
                                    o >>> 8 & 255,
                                    255 & o,
                                    a.isLeading << 2 | a.dependsOn,
                                    a.isDependedOn << 6 | a.hasRedundancy << 4 |
                                    a.paddingValue << 1 | a.isNonSync,
                                    61440 & a.degradPrio,
                                    15 & a.degradPrio,
                                    u >>> 24 & 255,
                                    u >>> 16 & 255,
                                    u >>> 8 & 255,
                                    255 & u], 12 + 16 * r);
                            return e.box(e.types.trun, d);
                        },
                    },
                    {
                        key: 'initSegment',
                        value: function(t) {
                            e.types || e.init();
                            var i, r = e.moov(t);
                            return i = new Uint8Array(e.FTYP.byteLength +
                                r.byteLength), i.set(e.FTYP), i.set(r,
                                e.FTYP.byteLength), i;
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r() {}
            
            function s(e, t) {return t = '[' + e + '] > ' + t;}
            
            function n(e) {
                var t = window.console[e];
                return t ? function() {
                    for (var i = arguments.length, r = Array(i), n = 0; n <
                    i; n++) r[n] = arguments[n];
                    r[0] && (r[0] = s(e, r[0])), t.apply(window.console, r);
                } : r;
            }
            
            function o(e) {
                for (var t = arguments.length, i = Array(
                    t > 1 ? t - 1 : 0), r = 1; r < t; r++) i[r -
                1] = arguments[r];
                i.forEach(function(t) {l[t] = e[t] ? e[t].bind(e) : n(t);});
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = 'function' == typeof Symbol &&
                'symbol' == typeof Symbol.iterator
                ? function(e) {return typeof e;}
                : function(e) {
                    return e && 'function' == typeof Symbol &&
                    e.constructor === Symbol && e !== Symbol.prototype
                        ? 'symbol'
                        : typeof e;
                }, u = {trace: r, debug: r, log: r, warn: r, info: r, error: r},
                l = u;
            t.enableLogs = function(e) {
                if (!0 === e ||
                    'object' === (void 0 === e ? 'undefined' : a(e))) {
                    o(e, 'debug', 'log', 'info', 'warn', 'error');
                    try {l.log();} catch (e) {l = u;}
                } else l = u;
            }, t.logger = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(7), c = i(1), h = r(c), d = i(3), f = r(d),
                v = function(e) {
                    function t(e) {
                        s(this, t);
                        var i = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return i.isStop = !0, i.video = e, i;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function() {
                                this.video
                                    ? (this.isStop = !1, this.video.addEventListener(
                                    'pause', this.pause.bind(
                                        this)), this.video.addEventListener(
                                    'error', this.error.bind(
                                        this)), this.video.addEventListener(
                                    'ended', this.ended.bind(
                                        this)), this.video.addEventListener(
                                    'playing', this.play.bind(
                                        this)), this.video.addEventListener(
                                    'seeked', this.seeked.bind(
                                        this)), this.video.addEventListener(
                                    'seeking', this.seeking.bind(
                                        this)), this.video.addEventListener(
                                    'waiting', this.waiting.bind(this)))
                                    : h.default.warn('video dom undefined',
                                    u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.video &&
                                (this.video.removeEventListener('pause',
                                    this.pause.bind(
                                        this)), this.video.removeEventListener(
                                    'error', this.error.bind(
                                        this)), this.video.removeEventListener(
                                    'ended', this.ended.bind(
                                        this)), this.video.removeEventListener(
                                    'playing', this.play.bind(
                                        this)), this.video.removeEventListener(
                                    'seeked', this.seeked.bind(
                                        this)), this.video.removeEventListener(
                                    'seeking', this.seeking.bind(
                                        this)), this.video.removeEventListener(
                                    'waiting', this.waiting.bind(
                                        this)), this.video = void 0);
                            },
                        },
                        {
                            key: 'pause',
                            value: function() {
                                this.isStop ||
                                h.default.log('video pause', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'ended',
                            value: function() {
                                this.isStop ||
                                h.default.log('video ended', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'play',
                            value: function() {
                                this.isStop ||
                                h.default.log('video playing', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'waiting',
                            value: function() {
                                this.isStop ||
                                h.default.log('video waiting', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'seeked',
                            value: function() {
                                this.isStop ||
                                h.default.log('video seeked', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'seeking',
                            value: function() {
                                this.isStop ||
                                h.default.log('video seeking', u.LOG.PLAY);
                            },
                        },
                        {
                            key: 'error',
                            value: function(e) {
                                if (!this.isStop) {
                                    if (!e ||
                                        !e.currentTarget) return void h.default.debug(
                                        'error: response is null', u.LOG.PLAY);
                                    if (!e.currentTarget.error) return void h.default.debug(
                                        'error: no error response', u.LOG.PLAY);
                                    var t = e.currentTarget.error;
                                    h.default.error('video: [' + t.code + ']' +
                                        t.message, u.LOG.PLAY), t.code !==
                                    t.MEDIA_ERR_DECODE ? this.trigger(
                                        l.PlayerEvent.VIDEO_EVENT, {
                                            type: l.PlayerMessage.PLAY_ERROR,
                                            code: -1,
                                            message: t.message,
                                        }) : this.trigger(
                                        l.PlayerEvent.VIDEO_EVENT, {
                                            type: l.PlayerMessage.PLAY_RESTART,
                                            code: -1,
                                            message: t.message,
                                        });
                                }
                            },
                        }]), t;
                }(f.default);
            t.default = v;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(0), o = i(2), a = i(6),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e() {
                        r(this, e), this.url = '', this.host = '';
                    }
                    
                    return s(e, [
                        {
                            key: 'commonOptions',
                            value: function() {
                                var e = {
                                    host: o.Globals.host,
                                    token: o.Globals.token,
                                    appId: o.Globals.appId,
                                    scene: o.Globals.vimpScene,
                                    deviceId: o.Globals.deviceId,
                                };
                                return o.Globals.isPermission &&
                                (e.ticket = o.Globals.ticket), e;
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.host = e || '', this.url = o.HOST.PROTOCOL +
                                    this.host + '/sls/room';
                            },
                        },
                        {
                            key: 'createRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.CREATE_VROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        vRoomId: e.vRoomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'joinRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.JOIN_VROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        vRoomId: e.vRoomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'quitRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.QUIT_VROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        vRoomId: e.vRoomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'destroyRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.DESTROY_VROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        vRoomId: e.vRoomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'fullListRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.FULL_VLIST, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {
                                        vRoomId: e.vRoomId || '',
                                    }, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        },
                        {
                            key: 'inWhichVRoom',
                            value: function(e) {
                                var t = this;
                                return new Promise(function(i, r) {
                                    var s = t.commonOptions();
                                    s.command = n.HTTP.IN_WHICH_VROOM, s.roomId = e.roomId ||
                                        '', s.userId = e.userId ||
                                        '', s.userRole = o.Globals.permissionIndex, s.param = {}, o.Globals.isPermission ||
                                    (s.userRole = e.config), u.default.ajax({
                                        url: t.url,
                                        data: s,
                                        type: 'POST',
                                        error: r,
                                        success: i,
                                    });
                                });
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(2), c = i(8), h = i(1), d = r(h), f = i(24),
                v = r(f), p = i(25), g = r(p), m = i(27), y = r(m), _ = i(26),
                S = r(_), E = i(23), R = r(E), b = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e._config = {}, e._slsHost = '', e._vChannelId = '', e._isActive = !1, e._isInitial = !0, e._retryCount = 0, e._retryTimer = void 0, e.RETRY_CNT_LIMIT = 24, e.RETRY_TIMER_TIME = 5e3, e._licVRoomClass = void 0, e._ssdispatchClass = void 0, e._connectionClass = void 0, e._interactiverClass = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function(e) {
                                this._isActive = !0, this._config = Object.assign(e,
                                    {userRole: 0});
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this._isActive = !1, this._destroyDispatchRetryTimer(), this._destroyConnect(), this._destroySSDispatch(), this._destroyInteractiver(), this._destroyLicVRoom();},
                        },
                        {
                            key: 'createRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._ssDispatchHost(t.isRetry, function(i, r) {
                                    if (!e._quit('createRoom')) if (i !==
                                        u.RSP.SUCCESS) e._dispatchEvent(
                                        c.RoomMessage.CREATE_ROOM, u.RSP.ERROR,
                                        r); else {
                                        if (!e._interactiverClass) return;
                                        e._interactiverClass.createRoom({
                                            userRole: e._config.userRole,
                                            roomId: t.roomId || e._config.roomId,
                                            userId: t.userId || e._config.userId,
                                        }).
                                            then(function(i) {
                                                if (!e._quit('createRoom')) {
                                                    d.default.log('create room response: ' +
                                                        i, u.LOG.ROOM);
                                                    var r = '', s = u.RSP.ERROR,
                                                        n = JSON.parse(i);
                                                    if (n && (r = n[u.RSP.MSG] ||
                                                            '', s = parseInt(
                                                            n[u.RSP.STATUS])), s !==
                                                        c.RoomCode.OK && s !==
                                                        c.RoomCode.EXIST_ROOM) return e._destroyLicVRoom(), e._connectionClass &&
                                                    e._destroyConnect(), void e._dispatchEvent(
                                                        c.RoomMessage.CREATE_ROOM,
                                                        u.RSP.ERROR, r);
                                                    e.fullListRoom({
                                                        roomId: t.roomId ||
                                                        e._config.roomId,
                                                        userId: t.userId ||
                                                        e._config.userId,
                                                    }), e._createLicVRoom(), e._licVRoomClass.inWhichVRoom(
                                                        {
                                                            userId: e._config.userId,
                                                            roomId: e._config.roomId,
                                                        }), e._createConnect(), e._isInitial &&
                                                    (e._isInitial = !1, e._dispatchEvent(
                                                        c.RoomMessage.CREATE_ROOM,
                                                        u.RSP.SUCCESS, r));
                                                }
                                            }).
                                            catch(function(t) {
                                                e._quit('createRoom') ||
                                                (d.default.warn(
                                                    'create room failed',
                                                    u.LOG.ROOM), e._dispatchEvent(
                                                    c.RoomMessage.CREATE_ROOM,
                                                    u.RSP.ERROR,
                                                    'create room failed'));
                                            });
                                    }
                                });
                            },
                        },
                        {
                            key: 'destroyRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._interactiverClass && '' !== this._slsHost &&
                                this._interactiverClass.destroyRoom({
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        e._quit('destroyRoom') ||
                                        d.default.log('destroy room response: ' + t,
                                            u.LOG.ROOM);
                                    }).
                                    catch(function(t) {
                                        e._quit('destroyRoom') ||
                                        d.default.warn('destroy room failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'fullListRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._interactiverClass && '' !== this._slsHost &&
                                this._interactiverClass.fullListRoom({
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || l.Globals.userId,
                                }).
                                    then(function(t) {
                                        if (!e._quit('fullListRoom')) {
                                            d.default.log('fullList room response: ' +
                                                t, u.LOG.ROOM);
                                            var i = JSON.parse(t) || {};
                                            0 === parseInt(i[u.RSP.STATUS]) &&
                                            i[u.RSP.RESULT] &&
                                            e._onBroadcastMessage(i[u.RSP.RESULT]);
                                        }
                                    }).
                                    catch(function(t) {
                                        e._quit('fullListRoom') ||
                                        d.default.warn('fullList room failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'createVRoom',
                            value: function(e) {
                                this._licVRoomClass && e && e.vChannelId &&
                                (this._vChannelId = e.vChannelId, this._licVRoomClass.createVRoom(
                                    e));
                            },
                        },
                        {
                            key: 'destroyVRoom',
                            value: function(e) {
                                this._licVRoomClass && e && e.vChannelId &&
                                this._licVRoomClass.destroyVRoom(e);
                            },
                        },
                        {
                            key: 'joinVRoom',
                            value: function(e) {
                                this._licVRoomClass && e && e.vChannelId &&
                                (this._vChannelId = e.vChannelId, this._licVRoomClass.joinVRoom(
                                    e));
                            },
                        },
                        {
                            key: 'quitVRoom',
                            value: function(e) {
                                this._licVRoomClass && e && e.vChannelId &&
                                this._licVRoomClass.quitVRoom(e);
                            },
                        },
                        {
                            key: 'fullVListRoom',
                            value: function(e) {
                                this._licVRoomClass && e && e.vChannelId &&
                                this._licVRoomClass.fullVListRoom(e);
                            },
                        },
                        {
                            key: 'inWhichVRoom',
                            value: function(e) {
                                this._licVRoomClass &&
                                this._licVRoomClass.inWhichVRoom(e);
                            },
                        },
                        {
                            key: '_quit',
                            value: function(e) {
                                return !this._isActive &&
                                    (d.default.debug('[' + e + '], server stop',
                                        u.LOG.ROOM), !0);
                            },
                        },
                        {
                            key: '_isInRoom',
                            value: function(e) {return e === this._config.roomId;},
                        },
                        {
                            key: '_isInVRoom',
                            value: function(e) {return e === this._vChannelId;},
                        },
                        {
                            key: '_retrySSDispatch',
                            value: function() {
                                this._retryCount < this.RETRY_CNT_LIMIT
                                    ? (this._retryCount++, d.default.log('retry dispatch room after ' +
                                    this.RETRY_TIMER_TIME + 'ms',
                                    u.LOG.ROOM), this._createDispatchRetryTimer())
                                    : (this._destroyDispatchRetryTimer(), this._dispatchEvent(
                                    c.RoomMessage.CREATE_ROOM, u.RSP.ERROR,
                                    'retry create room limit'));
                            },
                        },
                        {
                            key: '_createDispatchRetryTimer',
                            value: function() {
                                var e = this;
                                this._retryTimer = window.setTimeout(
                                    function() {e._retrySSDispatchHost();},
                                    this.RETRY_TIMER_TIME);
                            },
                        },
                        {
                            key: '_destroyDispatchRetryTimer',
                            value: function() {
                                this._retryTimer && (window.clearTimeout(
                                    this._retryTimer), this._retryTimer = void 0);
                            },
                        },
                        {
                            key: '_recreateSSDispatch',
                            value: function() {this._retrySSDispatchHost();},
                        },
                        {
                            key: '_createSSDispatch',
                            value: function() {
                                this._ssdispatchClass ||
                                (this._ssdispatchClass = new R.default);
                            },
                        },
                        {
                            key: '_destroySSDispatch',
                            value: function() {
                                this._ssdispatchClass &&
                                (this._ssdispatchClass = void 0);
                            },
                        },
                        {
                            key: '_retrySSDispatchHost',
                            value: function() {
                                this.createRoom({
                                    isRetry: !0,
                                    roomId: this._config.roomId,
                                    userId: this._config.userId,
                                });
                            },
                        },
                        {
                            key: '_ssDispatchHost',
                            value: function() {
                                var e = this, t = arguments.length > 0 && void 0 !==
                                    arguments[0] && arguments[0], i = arguments[1];
                                if (!t && '' !== this._slsHost) return void(i &&
                                    i(u.RSP.SUCCESS, 'ok'));
                                this._createSSDispatch(), this._ssdispatchClass.dispatch(
                                    {
                                        roomId: this._config.roomId,
                                        userRole: this._config.userRole,
                                    }).
                                    then(function(t) {
                                        e._quit('_ssDispatchHost') ||
                                        (e._retryCount = 0, e._destroyDispatchRetryTimer(), e._slsHost = t, e._createInteractiver(), i &&
                                        i(u.RSP.SUCCESS, 'ok'));
                                    }).
                                    catch(function(r) {
                                        if (!e._quit('_ssDispatchHost')) {
                                            if (t) return void e._retrySSDispatch();
                                            var s = JSON.stringify({
                                                status: r && r.status || 0,
                                                message: r && r.message || '',
                                            });
                                            i && i(u.RSP.ERROR, s);
                                        }
                                    });
                            },
                        },
                        {
                            key: '_createLicVRoom',
                            value: function() {
                                this._destroyLicVRoom(), this._licVRoomClass = new y.default, this._licVRoomClass.listenTo(
                                    c.RoomEvent.ROOM_EVENT,
                                    this._onVRoomEventHandler.bind(
                                        this)), this._licVRoomClass.start({
                                    host: this._slsHost,
                                    userId: this._config.userId,
                                    roomId: this._config.roomId,
                                    userRole: this._config.userRole,
                                });
                            },
                        },
                        {
                            key: '_destroyLicVRoom',
                            value: function() {
                                this._licVRoomClass &&
                                (this._licVRoomClass.removeToAll(), this._licVRoomClass.stop(), this._licVRoomClass = void 0);
                            },
                        },
                        {
                            key: '_onVRoomEventHandler',
                            value: function(e) {
                                var t = this, i = e[u.RSP.TYPE], r = e[u.RSP.CODE],
                                    s = e[u.RSP.DATA], n = e[u.RSP.MESSAGE];
                                switch (i) {
                                    case c.RoomMessage.JOIN_VROOM:
                                    case c.RoomMessage.CREATE_VROOM:
                                        r === u.RSP.SUCCESS
                                            ? this._vChannelId = s[u.RSP.VROOMID]
                                            : this._dispatchEvent(i, r, n, s);
                                        break;
                                    case c.RoomMessage.WHICH_VROOM:
                                        if (r === u.RSP.SUCCESS && s) {
                                            (s[u.RSP.VROOMID] || []).forEach(
                                                function(e) {
                                                    t.joinVRoom({
                                                        vChannelId: e,
                                                        userId: t._config.userId,
                                                        roomId: t._config.roomId,
                                                    });
                                                });
                                        }
                                }
                            },
                        },
                        {
                            key: '_createInteractiver',
                            value: function() {
                                this._destroyInteractiver(), this._interactiverClass = new g.default, this._interactiverClass.start(
                                    this._slsHost);
                            },
                        },
                        {
                            key: '_destroyInteractiver',
                            value: function() {
                                this._interactiverClass &&
                                (this._interactiverClass = void 0);
                            },
                        },
                        {
                            key: '_createConnect',
                            value: function() {
                                this._destroyConnect();
                                var e = l.HOST.PROTOCOL_WS + this._slsHost;
                                e += '/sls/room/' + l.Globals.impScene +
                                    '/', e += l.Globals.appId + '/' +
                                    l.Globals.host + '/', e += this._config.userId +
                                    '/' + l.Globals.token +
                                    '/ws', this._connectionClass = new v.default, this._connectionClass.listenTo(
                                    c.RoomEvent.CONNECT_EVENT,
                                    this._onConnectHandler.bind(
                                        this)), this._connectionClass.start(e, {
                                    userId: this._config.userId,
                                    roomId: this._config.roomId,
                                    userRole: this._config.userRole,
                                });
                            },
                        },
                        {
                            key: '_destroyConnect',
                            value: function() {
                                this._connectionClass &&
                                (this._connectionClass.stop(), this._connectionClass.removeToAll(), this._connectionClass = void 0);
                            },
                        },
                        {
                            key: '_onConnectHandler',
                            value: function(e) {
                                if (e) {
                                    switch (String(e[u.RSP.TYPE])) {
                                        case c.RoomEvent.CONNECT_MESSAGE_EVENT:
                                            this._ackMessage(e[u.RSP.DATA]);
                                            break;
                                        case c.RoomEvent.CONNECT_RECREATE_EVENT:
                                        case c.RoomEvent.CONNECT_PONG_ERROR_EVENT:
                                            this._recreateSSDispatch();
                                            break;
                                        default:
                                            d.default.debug(
                                                'unvalid connect event type',
                                                u.LOG.ROOM);
                                    }
                                }
                            },
                        },
                        {
                            key: '_ackMessage',
                            value: function(e) {
                                if (e) {
                                    switch (e[u.RSP.COMMAND] || '') {
                                        case c.RoomMessage.BROADCAST:
                                            this._onBroadcastMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.DESTROY_ROOM:
                                            this._onDestroyRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.QUIT_VROOM:
                                            this._onQuitVRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.BROADCAST_V:
                                            this._onBroadcastVRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.DESTROY_VROOM:
                                            this._onDestroyVRoomMessage(
                                                e[u.RSP.PARAM]);
                                    }
                                }
                            },
                        },
                        {
                            key: '_onDestroyRoomMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._isInRoom(e[u.RSP.ROOMID]) &&
                                this._dispatchEvent(c.RoomMessage.DESTROY_ROOM,
                                    u.RSP.SUCCESS, u.RSP.OK, e);
                            },
                        },
                        {
                            key: '_onBroadcastMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                e[u.RSP.USERS] &&
                                this._dispatchEvent(c.RoomMessage.BROADCAST,
                                    u.RSP.SUCCESS, u.RSP.OK, e[u.RSP.USERS]);
                            },
                        },
                        {
                            key: '_onQuitVRoomMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._isInVRoom(e[u.RSP.VROOMID]) &&
                                (this._vChannelId = '', this._dispatchEvent(
                                    c.RoomMessage.BROADCAST_V, u.RSP.SUCCESS,
                                    u.RSP.OK, []));
                            },
                        },
                        {
                            key: '_onDestroyVRoomMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._isInVRoom(e[u.RSP.VROOMID]) &&
                                (this._vChannelId = '', this._dispatchEvent(
                                    c.RoomMessage.DESTROY_VROOM, u.RSP.SUCCESS,
                                    u.RSP.OK, e));
                            },
                        },
                        {
                            key: '_onBroadcastVRoomMessage',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                if (t[u.RSP.USERS]) {
                                    var i = [];
                                    t[u.RSP.USERS].forEach(function(t) {
                                        t[u.RSP.ROOMID] && t[u.RSP.VROOMID] &&
                                        t[u.RSP.VROOMID] === e._vChannelId &&
                                        t[u.RSP.ROOMID] !== e._config.roomId &&
                                        i.push(t);
                                    }), this._dispatchEvent(
                                        c.RoomMessage.BROADCAST_V, u.RSP.SUCCESS,
                                        u.RSP.OK, i);
                                }
                            },
                        },
                        {
                            key: '_dispatchEvent',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                    void 0 !== arguments[1] ? arguments[1] : -1,
                                    i = arguments.length > 2 &&
                                    void 0 !== arguments[2] ? arguments[2] : '',
                                    r = arguments.length > 3 &&
                                    void 0 !== arguments[3] ? arguments[3] : {};
                                this._isActive &&
                                this.trigger(c.RoomEvent.ROOM_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        }]), t;
                }(S.default);
            t.default = b;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(2), c = i(8), h = i(1), d = r(h), f = i(24),
                v = r(f), p = i(25), g = r(p), m = i(27), y = r(m), _ = i(26),
                S = r(_), E = i(23), R = r(E), b = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(this));
                        return e._config = {}, e._slsHost = '', e._isActive = !1, e._isInitial = !0, e._retryCount = 0, e._retryTimer = void 0, e.RETRY_CNT_LIMIT = 24, e.RETRY_TIMER_TIME = 5e3, e._licVRoomClass = void 0, e._ssdispatchClass = void 0, e._connectionClass = void 0, e._interactiverClass = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'start',
                            value: function(e) {
                                this._isActive = !0, this._config = Object.assign(e,
                                    {userRole: 1});
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this._isActive = !1, this._destroyDispatchRetryTimer(), this._destroyConnect(), this._destroySSDispatch(), this._destroyInteractiver(), this._destroyLicVRoom();},
                        },
                        {
                            key: 'joinRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._ssDispatchHost(t.isRetry, function(i, r) {
                                    if (!e._quit('joinRoom')) if (i !==
                                        u.RSP.SUCCESS) e._dispatchEvent(
                                        c.RoomMessage.JOIN_ROOM, u.RSP.ERROR,
                                        r); else {
                                        if (!e._interactiverClass) return;
                                        e._interactiverClass.joinRoom({
                                            userRole: e._config.userRole,
                                            roomId: t.roomId || e._config.roomId,
                                            userId: t.userId || e._config.userId,
                                        }).
                                            then(function(i) {
                                                if (!e._quit('joinRoom')) {
                                                    d.default.log('join room response: ' +
                                                        i, u.LOG.ROOM);
                                                    var r = JSON.parse(i) || {},
                                                        s = r[u.RSP.MSG],
                                                        n = parseInt(
                                                            r[u.RSP.STATUS]);
                                                    if (n !== c.RoomCode.OK && n !==
                                                        c.RoomCode.EXIST_CONNECTED_LIST &&
                                                        n !==
                                                        c.RoomCode.EXIST_CONNECTING_LIST &&
                                                        n !==
                                                        c.RoomCode.AGREE_CONNECTED_LIST) return e._destroyLicVRoom(), e._connectionClass &&
                                                    e._destroyConnect(), void e._dispatchEvent(
                                                        c.RoomMessage.JOIN_ROOM, n,
                                                        s);
                                                    e.fullListRoom({
                                                        roomId: t.roomId ||
                                                        e._config.roomId,
                                                        userId: t.userId ||
                                                        e._config.userId,
                                                    }), e._createLicVRoom(), e._licVRoomClass.inWhichVRoom(
                                                        {
                                                            userId: t.userId ||
                                                            e._config.userId,
                                                            roomId: t.roomId ||
                                                            e._config.roomId,
                                                        }), e._createConnect(), e._isInitial &&
                                                    (e._isInitial = !1, e._dispatchEvent(
                                                        c.RoomMessage.JOIN_ROOM,
                                                        u.RSP.SUCCESS, s));
                                                }
                                            }).
                                            catch(function(t) {
                                                e._quit('joinRoom') ||
                                                (d.default.warn('join room failed',
                                                    u.LOG.ROOM), e._dispatchEvent(
                                                    c.RoomMessage.JOIN_ROOM,
                                                    u.RSP.ERROR,
                                                    'join room failed'));
                                            });
                                    }
                                });
                            },
                        },
                        {
                            key: 'quitRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._interactiverClass && '' !== this._slsHost &&
                                this._interactiverClass.quitRoom({
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || this._config.userId,
                                }).
                                    then(function(t) {
                                        e._quit('quitRoom') ||
                                        d.default.log('quit room response: ' + t,
                                            u.LOG.ROOM);
                                    }).
                                    catch(function(t) {
                                        e._quit('quitRoom') ||
                                        d.default.warn('quit room failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: 'fullListRoom',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._interactiverClass && '' !== this._slsHost &&
                                this._interactiverClass.fullListRoom({
                                    userRole: this._config.userRole,
                                    roomId: t.roomId || this._config.roomId,
                                    userId: t.userId || l.Globals.userId,
                                }).
                                    then(function(t) {
                                        if (!e._quit('fullListRoom')) {
                                            d.default.log('fullList room response: ' +
                                                t, u.LOG.ROOM);
                                            var i = JSON.parse(t) || {};
                                            0 === parseInt(i[u.RSP.STATUS]) &&
                                            i[u.RSP.RESULT] &&
                                            e._onBroadcastMessage(i[u.RSP.RESULT]);
                                        }
                                    }).
                                    catch(function(t) {
                                        e._quit('fullListRoom') ||
                                        d.default.warn('fullList room failed',
                                            u.LOG.ROOM);
                                    });
                            },
                        },
                        {
                            key: '_quit',
                            value: function(e) {
                                return !this._isActive &&
                                    (d.default.debug('[' + e + '], server stop',
                                        u.LOG.ROOM), !0);
                            },
                        },
                        {
                            key: '_isInRoom',
                            value: function(e) {return e === this._config.roomId;},
                        },
                        {
                            key: '_retrySSDispatch',
                            value: function() {
                                this._retryCount < this.RETRY_CNT_LIMIT
                                    ? (this._retryCount++, d.default.log('retry dispatch room after ' +
                                    this.RETRY_TIMER_TIME + 'ms',
                                    u.LOG.ROOM), this._createDispatchRetryTimer())
                                    : (this._destroyDispatchRetryTimer(), this._dispatchEvent(
                                    c.RoomMessage.JOIN_ROOM, u.RSP.ERROR,
                                    'retry join room limit'));
                            },
                        },
                        {
                            key: '_createDispatchRetryTimer',
                            value: function() {
                                var e = this;
                                this._retryTimer = window.setTimeout(
                                    function() {e._retrySSDispatchHost();},
                                    this.RETRY_TIMER_TIME);
                            },
                        },
                        {
                            key: '_destroyDispatchRetryTimer',
                            value: function() {
                                this._retryTimer && (window.clearTimeout(
                                    this._retryTimer), this._retryTimer = void 0);
                            },
                        },
                        {
                            key: '_recreateSSDispatch',
                            value: function() {this._retrySSDispatchHost();},
                        },
                        {
                            key: '_createSSDispatch',
                            value: function() {
                                this._ssdispatchClass ||
                                (this._ssdispatchClass = new R.default);
                            },
                        },
                        {
                            key: '_destroySSDispatch',
                            value: function() {
                                this._ssdispatchClass &&
                                (this._ssdispatchClass = void 0);
                            },
                        },
                        {
                            key: '_retrySSDispatchHost',
                            value: function() {
                                this.joinRoom({
                                    isRetry: !0,
                                    roomId: this._config.roomId,
                                    userId: this._config.userId,
                                });
                            },
                        },
                        {
                            key: '_ssDispatchHost',
                            value: function() {
                                var e = this, t = arguments.length > 0 && void 0 !==
                                    arguments[0] && arguments[0], i = arguments[1];
                                if (!t && '' !== this._slsHost) return void(i &&
                                    i(u.RSP.SUCCESS, 'ok'));
                                this._createSSDispatch(), this._ssdispatchClass.dispatch(
                                    {
                                        roomId: this._config.roomId,
                                        userRole: this._config.userRole,
                                    }).
                                    then(function(t) {
                                        e._quit('_ssDispatchHost') ||
                                        (e._retryCount = 0, e._destroyDispatchRetryTimer(), e._slsHost = t, e._createInteractiver(), i &&
                                        i(u.RSP.SUCCESS, 'ok'));
                                    }).
                                    catch(function(r) {
                                        if (!e._quit('_ssDispatchHost')) {
                                            if (t) return void e._retrySSDispatch();
                                            var s = JSON.stringify({
                                                status: r && r.status || 0,
                                                message: r && r.message || '',
                                            });
                                            i && i(u.RSP.ERROR, s);
                                        }
                                    });
                            },
                        },
                        {
                            key: '_createLicVRoom',
                            value: function() {
                                this._destroyLicVRoom(), this._licVRoomClass = new y.default, this._licVRoomClass.listenTo(
                                    c.RoomEvent.ROOM_EVENT,
                                    this._onVRoomEventHandler.bind(
                                        this)), this._licVRoomClass.start({
                                    host: this._slsHost,
                                    userId: this._config.userId,
                                    roomId: this._config.roomId,
                                    userRole: this._config.userRole,
                                });
                            },
                        },
                        {
                            key: '_destroyLicVRoom',
                            value: function() {
                                this._licVRoomClass &&
                                (this._licVRoomClass.removeToAll(), this._licVRoomClass.stop(), this._licVRoomClass = void 0);
                            },
                        },
                        {
                            key: '_onVRoomEventHandler',
                            value: function(e) {
                                var t = this, i = e[u.RSP.TYPE], r = e[u.RSP.CODE],
                                    s = e[u.RSP.DATA];
                                e[u.RSP.MESSAGE];
                                switch (i) {
                                    case c.RoomMessage.WHICH_VROOM:
                                        if (r === u.RSP.SUCCESS && s) {
                                            (s[u.RSP.VROOMID] || []).forEach(
                                                function(e) {
                                                    t._licVRoomClass &&
                                                    t._licVRoomClass.fullVListRoom({
                                                        vChannelId: e,
                                                        userId: t._config.userId,
                                                        roomId: t._config.roomId,
                                                    });
                                                });
                                        }
                                }
                            },
                        },
                        {
                            key: '_createInteractiver',
                            value: function() {
                                this._destroyInteractiver(), this._interactiverClass = new g.default, this._interactiverClass.start(
                                    this._slsHost);
                            },
                        },
                        {
                            key: '_destroyInteractiver',
                            value: function() {
                                this._interactiverClass &&
                                (this._interactiverClass = void 0);
                            },
                        },
                        {
                            key: '_createConnect',
                            value: function() {
                                this._destroyConnect();
                                var e = l.HOST.PROTOCOL_WS + this._slsHost;
                                e += '/sls/room/' + l.Globals.impScene +
                                    '/', e += l.Globals.appId + '/' +
                                    l.Globals.host + '/', e += this._config.userId +
                                    '/' + l.Globals.token +
                                    '/ws', this._connectionClass = new v.default, this._connectionClass.listenTo(
                                    c.RoomEvent.CONNECT_EVENT,
                                    this._onConnectHandler.bind(
                                        this)), this._connectionClass.start(e, {
                                    userId: this._config.userId,
                                    roomId: this._config.roomId,
                                    userRole: this._config.userRole,
                                });
                            },
                        },
                        {
                            key: '_destroyConnect',
                            value: function() {
                                this._connectionClass &&
                                (this._connectionClass.stop(), this._connectionClass.removeToAll(), this._connectionClass = void 0);
                            },
                        },
                        {
                            key: '_onConnectHandler',
                            value: function(e) {
                                if (e) {
                                    switch (String(e[u.RSP.TYPE])) {
                                        case c.RoomEvent.CONNECT_MESSAGE_EVENT:
                                            this._ackMessage(e[u.RSP.DATA]);
                                            break;
                                        case c.RoomEvent.CONNECT_RECREATE_EVENT:
                                        case c.RoomEvent.CONNECT_PONG_ERROR_EVENT:
                                            this._recreateSSDispatch();
                                            break;
                                        default:
                                            d.default.debug(
                                                'unvalid connect event type',
                                                u.LOG.ROOM);
                                    }
                                }
                            },
                        },
                        {
                            key: '_ackMessage',
                            value: function(e) {
                                if (e) {
                                    switch (e[u.RSP.COMMAND] || '') {
                                        case c.RoomMessage.BROADCAST:
                                            this._onBroadcastMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.DESTROY_ROOM:
                                            this._onDestroyRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.QUIT_VROOM:
                                            this._onQuitVRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.BROADCAST_V:
                                            this._onBroadcastVRoomMessage(
                                                e[u.RSP.PARAM]);
                                            break;
                                        case c.RoomMessage.DESTROY_VROOM:
                                            this._onDestroyVRoomMessage(
                                                e[u.RSP.PARAM]);
                                    }
                                }
                            },
                        },
                        {
                            key: '_onBroadcastMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                e[u.RSP.USERS] &&
                                this._dispatchEvent(c.RoomMessage.BROADCAST,
                                    u.RSP.SUCCESS, u.RSP.OK, e[u.RSP.USERS]);
                            },
                        },
                        {
                            key: '_onDestroyRoomMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                    void 0 !== arguments[0] ? arguments[0] : {},
                                    t = e.roomId;
                                this._isInRoom(t) &&
                                this._dispatchEvent(c.RoomMessage.DESTROY_ROOM,
                                    u.RSP.SUCCESS, u.RSP.OK, e);
                            },
                        },
                        {
                            key: '_onQuitVRoomMessage',
                            value: function() {
                                arguments.length > 0 && void 0 !== arguments[0] &&
                                arguments[0];
                                this._dispatchEvent(c.RoomMessage.BROADCAST_V,
                                    u.RSP.SUCCESS, u.RSP.OK, []);
                            },
                        },
                        {
                            key: '_onDestroyVRoomMessage',
                            value: function() {
                                var e = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                this._dispatchEvent(c.RoomMessage.DESTROY_VROOM,
                                    u.RSP.SUCCESS, u.RSP.OK, e);
                            },
                        },
                        {
                            key: '_onBroadcastVRoomMessage',
                            value: function() {
                                var e = this, t = arguments.length > 0 &&
                                void 0 !== arguments[0] ? arguments[0] : {};
                                if (t[u.RSP.USERS]) {
                                    var i = [];
                                    t[u.RSP.USERS].forEach(function(t) {
                                        t[u.RSP.ROOMID] &&
                                        t[u.RSP.ROOMID] !== e._config.roomId &&
                                        i.push(t);
                                    }), this._dispatchEvent(
                                        c.RoomMessage.BROADCAST_V, u.RSP.SUCCESS,
                                        u.RSP.OK, i);
                                }
                            },
                        },
                        {
                            key: '_dispatchEvent',
                            value: function(e) {
                                var t = arguments.length > 1 &&
                                    void 0 !== arguments[1] ? arguments[1] : -1,
                                    i = arguments.length > 2 &&
                                    void 0 !== arguments[2] ? arguments[2] : '',
                                    r = arguments.length > 3 &&
                                    void 0 !== arguments[3] ? arguments[3] : {};
                                this._isActive &&
                                this.trigger(c.RoomEvent.ROOM_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        }]), t;
                }(S.default);
            t.default = b;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(6), u = r(a), l = i(1), c = r(l),
                h = function() {
                    function e(t) {
                        s(this,
                            e), this.OK = 0, this.UNKNOW = -1, this.isStop = !0, this.callback = t;
                    }
                    
                    return n(e, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (c.default.debug('[' + e +
                                        '], service stop', o.LOG.MIX), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                if (this.isStop = !1, e.type) switch (e.type) {
                                    case o.XHR.CREATE:
                                        this.cmdCreate(e);
                                        break;
                                    case o.XHR.JOIN:
                                        this.cmdJoin(e);
                                        break;
                                    case o.XHR.QUIT:
                                        this.cmdQuit(e);
                                        break;
                                    case o.XHR.DESTROY:
                                        this.cmdDestroy(e);
                                        break;
                                    case o.XHR.MODIFY:
                                        this.cmdModify(e);
                                        break;
                                    case o.XHR.STATUS:
                                        this.cmdStatus(e);
                                        break;
                                    default:
                                        c.default.log('unkown mix type',
                                            o.LOG.MIX);
                                }
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.isStop = !0, this.callback = void 0;},
                        },
                        {
                            key: 'cmdCreate',
                            value: function(e) {
                                var t = this;
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onCreateError.bind(this),
                                    success: function(i) {
                                        t.onCreateSuccess(i, e.isPushCreate);
                                    },
                                });
                            },
                        },
                        {
                            key: 'onCreateSuccess',
                            value: function(e, t) {
                                this.quit('onCreateSuccess') ||
                                (c.default.log(o.XHR.CREATE +
                                    ' command success ' + e,
                                    o.LOG.MIX), 'true' === String(t) &&
                                this.onSuccess(o.XHR.MIX, e));
                            },
                        },
                        {
                            key: 'onCreateError',
                            value: function(e) {
                                if (!this.quit('onCreateError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.CREATE +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'create failed') + ']',
                                        o.LOG.MIX), this.onError(t,
                                        o.XHR.CREATE);
                                }
                            },
                        },
                        {
                            key: 'cmdModify',
                            value: function(e) {
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onModifyError.bind(this),
                                    success: this.onModifySuccess.bind(this),
                                });
                            },
                        },
                        {
                            key: 'onModifySuccess',
                            value: function(e) {
                                this.quit('onModifySuccess') ||
                                c.default.log(o.XHR.MODIFY +
                                    ' command response ' + e, o.LOG.MIX);
                            },
                        },
                        {
                            key: 'onModifyError',
                            value: function(e) {
                                if (!this.quit('onModifyError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.MODIFY +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'modify failed') + ']',
                                        o.LOG.MIX), this.onError(t,
                                        o.XHR.MODIFY);
                                }
                            },
                        },
                        {
                            key: 'cmdJoin',
                            value: function(e) {
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onJoinError.bind(this),
                                    success: this.onJoinSuccess.bind(this),
                                });
                            },
                        },
                        {
                            key: 'onJoinSuccess',
                            value: function(e) {
                                this.quit('onJoinSuccess') ||
                                c.default.log(o.XHR.JOIN +
                                    ' command response ' + e, o.LOG.MIX);
                            },
                        },
                        {
                            key: 'onJoinError',
                            value: function(e) {
                                if (!this.quit('onJoinError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.JOIN +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'join failed') + ']',
                                        o.LOG.MIX), this.onError(t, o.XHR.JOIN);
                                }
                            },
                        },
                        {
                            key: 'cmdQuit',
                            value: function(e) {
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onQuitError.bind(this),
                                    success: this.onQuitSuccess.bind(this),
                                });
                            },
                        },
                        {
                            key: 'onQuitSuccess',
                            value: function(e) {
                                this.quit('onQuitSuccess') ||
                                c.default.log(o.XHR.QUIT +
                                    ' command response ' + e, o.LOG.MIX);
                            },
                        },
                        {
                            key: 'onQuitError',
                            value: function(e) {
                                if (!this.quit('onQuitError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.QUIT +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'quit failed') + ']',
                                        o.LOG.MIX), this.onError(t, o.XHR.QUIT);
                                }
                            },
                        },
                        {
                            key: 'cmdDestroy',
                            value: function(e) {
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onDestroyError.bind(this),
                                    success: this.onDestroySuccess.bind(this),
                                });
                            },
                        },
                        {
                            key: 'onDestroySuccess',
                            value: function(e) {
                                this.quit('onDestroySuccess') ||
                                c.default.log(o.XHR.DESTROY +
                                    ' command response ' + e, o.LOG.MIX);
                            },
                        },
                        {
                            key: 'onDestroyError',
                            value: function(e) {
                                if (!this.quit('onDestroyError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.DESTROY +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'destroy failed') + ']',
                                        o.LOG.MIX), this.onError(t,
                                        o.XHR.DESTROY);
                                }
                            },
                        },
                        {
                            key: 'cmdStatus',
                            value: function(e) {
                                u.default.ajax({
                                    type: 'POST',
                                    url: e.url || '',
                                    data: e.data || '',
                                    headers: e.headers || {},
                                    error: this.onStatusError.bind(this),
                                    success: this.onStatusSuccess.bind(this),
                                });
                            },
                        },
                        {
                            key: 'onStatusSuccess',
                            value: function(e) {
                                this.quit('onStatusSuccess') ||
                                (c.default.log(o.XHR.STATUS +
                                    ' command response ' + e,
                                    o.LOG.MIX), this.onSuccess(o.XHR.STATUS, e));
                            },
                        },
                        {
                            key: 'onStatusError',
                            value: function(e) {
                                if (!this.quit('onStatusError') && e) {
                                    var t = this.UNKNOW;
                                    void 0 !== e.status &&
                                    (t = e.status), c.default.log(o.XHR.STATUS +
                                        ' command response [' + t + ', ' +
                                        (e.message || 'status failed') + ']',
                                        o.LOG.MIX), this.onError(t,
                                        o.XHR.STATUS);
                                }
                            },
                        },
                        {
                            key: 'onSuccess',
                            value: function(e, t) {
                                if (!this.quit('onSuccess')) {
                                    var i = {};
                                    if (t) try {
                                        i = JSON.parse(t);
                                    } catch (e) {i = {};}
                                    this.callback && this.callback({
                                        type: e,
                                        code: this.OK,
                                        message: 'success',
                                        data: i,
                                    });
                                }
                            },
                        },
                        {
                            key: 'onError',
                            value: function(e, t) {
                                if (!this.quit('onError')) {
                                    var i = '', r = parseInt(e);
                                    i = 404 === r
                                        ? 'room not exist'
                                        : 409 === r
                                            ? 'stream conflict'
                                            : 500 === r
                                                ? 'nginx internal error'
                                                : 403 === r
                                                    ? 'authentication faied, forbidden access'
                                                    : 590 === r
                                                        ? 'room limit by only one anchor and six viewers'
                                                        : 400 === r
                                                            ? 'request error by error url or http headers or body'
                                                            : 'unknow status error code', this.callback &&
                                    this.callback(
                                        {type: t, code: r, message: i});
                                }
                            },
                        }]), e;
                }();
            t.default = h;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(0), o = i(2), a = i(5),
                u = function(e) {return e && e.__esModule ? e : {default: e};}(
                    a), l = function() {
                    function e() {r(this, e), this.IDLE = 120;}
                    
                    return s(e, [
                        {
                            key: 'createParse',
                            value: function(e) {
                                return this.parseCreateMixConfig(
                                    this.parseCreateConfig(e));
                            },
                        },
                        {
                            key: 'parseCreateConfig',
                            value: function(e) {
                                var t = e;
                                if (e.isMixCreate) {
                                    var i = void 0;
                                    i = '' === o.Globals.rtcTestHost
                                        ? o.Globals.RTC_HOST
                                        : o.Globals.rtcTestHost;
                                    var r = o.HOST.PROTOCOL + i + ':';
                                    return r += o.HOST.RTC_PORT +
                                        '/mix_control?', r += 'v=' +
                                        o.HOST.RTC_VER + '&wsHost=' +
                                        o.Globals.host, r += '&nodeaddr=' +
                                        e.dispatchIP + ':' +
                                        o.HOST.RTC_TRAN_PORT, o.Globals.pushMixUrl = t.mixUrl = r, t.room = o.Globals.appId +
                                        '_' + e.roomId, t.mixStreamName = t.room +
                                        '/' +
                                        e.userId, o.Globals.pushMixStreamName = t.mixStreamName, t;
                                }
                                return void 0 !== e.mixUrl
                                    ? o.Globals.pushMixUrl = e.mixUrl
                                    : t.mixUrl = o.Globals.pushMixUrl, void 0 !==
                                e.mixStreamName
                                    ? o.Globals.pushMixStreamName = e.mixStreamName
                                    : t.mixStreamName = o.Globals.pushMixStreamName, t.room = o.Globals.appId +
                                    '_' + e.roomId, t;
                            },
                        },
                        {
                            key: 'parseCreateMixConfig',
                            value: function(e) {
                                var t = {
                                    action: n.XHR.CREATE,
                                    idle: this.IDLE,
                                    room: e.room,
                                }, i = [];
                                if (void 0 !== e.peers) i = e.peers; else if (i = [
                                        {
                                            layout_index: 0,
                                            name: o.Globals.host + '/' +
                                            e.mixStreamName,
                                        }], void 0 !== e.layoutIndex) {
                                    var r = i[0], s = parseInt(e.layoutIndex);
                                    !isNaN(s) && s >= 0 && (r.layout_index = s);
                                }
                                t.peers = i;
                                var a = {
                                    layout: 1,
                                    room_url: e.roomUrl,
                                    resolution: {
                                        width: e.width || 800,
                                        height: e.height || 450,
                                    },
                                };
                                if (void 0 !== e.maxBitrate) {
                                    var u = parseInt(e.maxBitrate);
                                    u >= 300 && u <= 4e3 && (a.max_bitrate = u);
                                }
                                var l = e.framerate || e.frameRate;
                                if (void 0 !== l) {
                                    var c = parseInt(l);
                                    c >= 15 && c <= 30 && (a.frame_rate = c);
                                }
                                if (void 0 !== e.resolution) {
                                    var h = {}, d = e.resolution;
                                    d.width && d.height && (h.width = parseInt(
                                        d.width), h.height = parseInt(
                                        d.height), a.resolution = h);
                                }
                                if (void 0 !== e.sei) {
                                    var f = parseInt(e.sei);
                                    0 !== f && 1 !== f || (a.sei = f);
                                }
                                if (void 0 !== e.fill) {
                                    var v = parseInt(e.fill);
                                    0 !== v && 1 !== v && 2 !== v || (a.fill = v);
                                }
                                if (void 0 !== e.dump) {
                                    var p = parseInt(e.dump);
                                    0 !== p && 1 !== p || (a.hdl_dump = p);
                                }
                                if (void 0 !== e.layout) {
                                    var g = parseInt(e.layout);
                                    0 !== g && 1 !== g && 2 !== g && 11 !== g &&
                                    12 !== g || (a.layout = g);
                                }
                                var m = e.layoutContent || e.layout_content;
                                return void 0 !== m &&
                                (a.layout_content = m), t.mix_config = a, t;
                            },
                        },
                        {
                            key: 'modifyParse',
                            value: function(e) {
                                return this.parseModifyMixConfig(
                                    this.parseModifyConfig(e));
                            },
                        },
                        {
                            key: 'parseModifyConfig',
                            value: function(e) {
                                var t = e;
                                if (e.isMixModify) {
                                    var i = void 0;
                                    i = '' === o.Globals.rtcTestHost
                                        ? o.Globals.RTC_HOST
                                        : o.Globals.rtcTestHost;
                                    var r = o.HOST.PROTOCOL + i + ':';
                                    return r += o.HOST.RTC_PORT +
                                        '/mix_control?', r += 'v=' +
                                        o.HOST.RTC_VER + '&wsHost=' +
                                        o.Globals.host, r += '&nodeaddr=' +
                                        e.dispatchIP + ':' +
                                        o.HOST.RTC_TRAN_PORT, o.Globals.pushMixUrl = t.mixUrl = r, t.room = o.Globals.appId +
                                        '_' + e.roomId, t.mixStreamName = t.room +
                                        '/' +
                                        e.userId, o.Globals.pushMixStreamName = t.mixStreamName, t;
                                }
                                return void 0 !== e.mixUrl
                                    ? o.Globals.pushMixUrl = e.mixUrl
                                    : t.mixUrl = o.Globals.pushMixUrl, void 0 ===
                                t.room &&
                                (t.room = o.Globals.appId + '_' + e.roomId), t;
                            },
                        },
                        {
                            key: 'parseModifyMixConfig',
                            value: function(e) {
                                var t = {
                                    action: n.XHR.MODIFY,
                                    idle: this.IDLE,
                                    room: e.room,
                                }, i = {
                                    layout: 1,
                                    room_url: e.roomUrl,
                                    resolution: {
                                        width: e.width || 800,
                                        height: e.height || 450,
                                    },
                                };
                                if (void 0 !== e.profile) {
                                    var r = u.default.getAspectByProfile(e.profile);
                                    i.resolution.width = r.width, i.resolution.height = r.height;
                                }
                                if (void 0 !== e.maxBitrate) {
                                    var s = parseInt(e.maxBitrate);
                                    s >= 300 && s <= 4e3 && (i.max_bitrate = s);
                                }
                                var o = e.framerate || e.frameRate;
                                if (void 0 !== o) {
                                    var a = parseInt(o);
                                    a >= 15 && a <= 30 && (i.frame_rate = a);
                                }
                                if (void 0 !== e.resolution) {
                                    var l = {}, c = e.resolution;
                                    c.width && c.height && (l.width = parseInt(
                                        c.width), l.height = parseInt(
                                        c.height), i.resolution = l);
                                }
                                if (void 0 !== e.sei) {
                                    var h = parseInt(e.sei);
                                    0 !== h && 1 !== h || (i.sei = h);
                                }
                                if (void 0 !== e.fill) {
                                    var d = parseInt(e.fill);
                                    0 !== d && 1 !== d && 2 !== d || (i.fill = d);
                                }
                                if (void 0 !== e.dump) {
                                    var f = parseInt(e.dump);
                                    0 !== f && 1 !== f || (i.hdl_dump = f);
                                }
                                if (void 0 !== e.layout) {
                                    var v = parseInt(e.layout);
                                    0 !== v && 1 !== v && 2 !== v && 11 !== v &&
                                    12 !== v || (i.layout = v);
                                }
                                var p = e.layoutContent || e.layout_content;
                                return void 0 !== p &&
                                (i.layout_content = p), t.mix_config = i, t;
                            },
                        },
                        {
                            key: 'statusParse',
                            value: function(e) {
                                return this.parseStatusMixConfig(
                                    this.parseStatusConfig(e));
                            },
                        },
                        {
                            key: 'parseStatusConfig',
                            value: function(e) {
                                var t = e;
                                if (e.isMixStatus) {
                                    var i = void 0;
                                    i = '' === o.Globals.rtcTestHost
                                        ? o.Globals.RTC_HOST
                                        : o.Globals.rtcTestHost;
                                    var r = o.HOST.PROTOCOL + i + ':';
                                    return r += o.HOST.RTC_PORT +
                                        '/mix_control?', r += 'v=' +
                                        o.HOST.RTC_VER + '&wsHost=' +
                                        o.Globals.host, r += '&nodeaddr=' +
                                        e.dispatchIP + ':' +
                                        o.HOST.RTC_TRAN_PORT, o.Globals.pushMixUrl = t.mixUrl = r, t.room = o.Globals.appId +
                                        '_' + e.roomId, t;
                                }
                                return t.room = o.Globals.appId + '_' + e.roomId, t;
                            },
                        },
                        {
                            key: 'parseStatusMixConfig',
                            value: function(e) {
                                return {
                                    action: n.XHR.STATUS,
                                    room: e.room,
                                };
                            },
                        },
                        {
                            key: 'joinParse',
                            value: function(e) {
                                return this.parseJoinMixConfig(
                                    this.parseJoinConfig(e));
                            },
                        },
                        {
                            key: 'parseJoinConfig',
                            value: function(e) {
                                var t = e || {};
                                return t.room = o.Globals.appId + '_' +
                                    e.roomId, e.host ||
                                (t.host = o.Globals.host), e.mixStreamName ||
                                (t.mixStreamName = t.room + '/' + e.userId), t;
                            },
                        },
                        {
                            key: 'parseJoinMixConfig',
                            value: function(e) {
                                var t = {
                                    action: n.XHR.JOIN,
                                    room: e.room,
                                };
                                if (t.peers = [
                                        {
                                            layout_index: -1,
                                            name: e.host + '/' + e.mixStreamName,
                                        }], void 0 !== e.layoutIndex) {
                                    var i = t.peers[0], r = parseInt(e.layoutIndex);
                                    !isNaN(r) && r >= 0 && (i.layout_index = r);
                                }
                                return t;
                            },
                        },
                        {
                            key: 'quitParse',
                            value: function(e) {
                                return this.parseQuitMixConfig(
                                    this.parseQuitConfig(e));
                            },
                        },
                        {
                            key: 'parseQuitConfig',
                            value: function(e) {
                                var t = e || {};
                                return t.room = o.Globals.appId + '_' +
                                    e.roomId, t.mixStreamName = t.room + '/' +
                                    e.userId, t;
                            },
                        },
                        {
                            key: 'parseQuitMixConfig',
                            value: function(e) {
                                var t = {
                                    action: n.XHR.QUIT,
                                    room: e.room,
                                };
                                return t.peers = [
                                    {
                                        name: o.Globals.host + '/' + e.mixStreamName,
                                    }], t;
                            },
                        },
                        {
                            key: 'destroyParse',
                            value: function(e) {
                                return this.parseDestroyMixConfig(
                                    this.parseDestroyConfig(e));
                            },
                        },
                        {
                            key: 'parseDestroyConfig',
                            value: function(e) {
                                var t = e || {};
                                return t.room = o.Globals.appId + '_' + e.roomId, t;
                            },
                        },
                        {
                            key: 'parseDestroyMixConfig',
                            value: function(e) {
                                return {
                                    action: n.XHR.DESTROY,
                                    room: e.room,
                                };
                            },
                        }]), e;
                }();
            t.default = l;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(0), c = i(2), h = i(73), d = r(h), f = i(1),
                v = r(f), p = i(72), g = r(p), m = i(3), y = r(m),
                _ = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return e.config = {}, e.isStop = !0, e.mixParser = void 0, e.mixCommand = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (v.default.debug('[' + e +
                                        '], service stop', l.LOG.MIX), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.isStop = !1, this.config = e ||
                                    {}, this.config.headerFiels = {}, this.config.headerFiels[c.HOST.RTC_HEADER_TOKEN] = c.Globals.token, this.config.headerFiels[c.HOST.RTC_HEADER_APP_ID] = c.Globals.appId, this.config.headerFiels[c.HOST.RTC_HEADER_USER_ID] = c.Globals.userId, this.config.headerFiels[c.HOST.RTC_HEADER_TRACE_ID] = c.Globals.traceId, c.Globals.isPermission &&
                                (this.config.headerFiels[c.HOST.RTC_HEADER_TICKET] = c.Globals.ticket);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.mixCommand &&
                                (this.mixCommand.stop(), this.mixCommand = void 0), this.mixParser &&
                                (this.mixParser = void 0);
                            },
                        },
                        {
                            key: 'createControl',
                            value: function(e) {
                                if (e && !this.quit('createControl')) {
                                    var t = this.parser.createParse(e);
                                    this.commander.start({
                                        type: l.XHR.CREATE,
                                        data: t,
                                        url: c.Globals.pushMixUrl,
                                        headers: this.config.headerFiels,
                                        isPushCreate: 'true' ===
                                        String(e.isPushCreate),
                                    });
                                }
                            },
                        },
                        {
                            key: 'modifyControl',
                            value: function(e) {
                                if (e && !this.quit('modifyControl')) {
                                    var t = this.parser.modifyParse(e);
                                    this.commander.start({
                                        type: l.XHR.MODIFY,
                                        data: t,
                                        url: c.Globals.pushMixUrl,
                                        headers: this.config.headerFiels,
                                    });
                                }
                            },
                        },
                        {
                            key: 'joinControl',
                            value: function(e) {
                                if (e && !this.quit('joinControl')) {
                                    var t = this.parser.joinParse(e);
                                    this.commander.start({
                                        type: l.XHR.JOIN,
                                        data: t,
                                        headers: this.config.headerFiels,
                                        url: '' !== c.Globals.pushMixUrl
                                            ? c.Globals.pushMixUrl
                                            : c.Globals.pullMixUrl,
                                    });
                                }
                            },
                        },
                        {
                            key: 'quitControl',
                            value: function(e) {
                                if (e && !this.quit('quitControl')) {
                                    var t = this.parser.quitParse(e);
                                    this.commander.start({
                                        type: l.XHR.QUIT,
                                        data: t,
                                        url: c.Globals.pushMixUrl,
                                        headers: this.config.headerFiels,
                                    });
                                }
                            },
                        },
                        {
                            key: 'statusControl',
                            value: function(e) {
                                if (e && !this.quit('statusControl')) {
                                    var t = this.parser.statusParse(e);
                                    this.commander.start({
                                        type: l.XHR.STATUS,
                                        data: t,
                                        url: c.Globals.pushMixUrl,
                                        headers: this.config.headerFiels,
                                    });
                                }
                            },
                        },
                        {
                            key: 'destroyControl',
                            value: function(e) {
                                if (e && !this.quit('destroyControl')) {
                                    var t = this.parser.destroyParse(e);
                                    this.commander.start({
                                        type: l.XHR.DESTROY,
                                        data: t,
                                        url: c.Globals.pushMixUrl,
                                        headers: this.config.headerFiels,
                                    });
                                }
                            },
                        },
                        {
                            key: 'onCommandHandler',
                            value: function(e) {
                                if (!this.quit('onCommandHandler')) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.DATA] || {},
                                        s = e[l.RSP.MESSAGE];
                                    switch (t) {
                                        case l.XHR.MIX:
                                        case l.XHR.JOIN:
                                        case l.XHR.QUIT:
                                        case l.XHR.CREATE:
                                        case l.XHR.MODIFY:
                                        case l.XHR.STATUS:
                                        case l.XHR.DESTROY:
                                            this.trigger(u.Event.MIX_EVENT, {
                                                type: t,
                                                code: i,
                                                message: s,
                                                data: r,
                                            });
                                    }
                                }
                            },
                        },
                        {
                            key: 'parser',
                            get: function() {
                                return this.mixParser ||
                                (this.mixParser = new d.default), this.mixParser;
                            },
                        },
                        {
                            key: 'commander',
                            get: function() {
                                return this.mixCommand ||
                                (this.mixCommand = new g.default(
                                    this.onCommandHandler.bind(
                                        this))), this.mixCommand;
                            },
                        }]), t;
                }(y.default);
            t.default = _;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(4), a = i(0), u = i(5), l = r(u), c = i(1), h = r(c),
                d = function() {
                    function e(t) {
                        s(this,
                            e), this.config = {}, this.observer = t, this.previewStream = void 0;
                    }
                    
                    return n(e, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (h.default.debug('[' + e + ']server stop',
                                        a.LOG.PREVIEW), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                if (this.stop(), this.config = e ||
                                        {}, !this.config.playerId) return h.default.warn(
                                    'no preview playerId',
                                    a.LOG.PREVIEW), void this.dispatchEvent(
                                    a.RSP.ERROR, 'no preview video dom');
                                this.isStop = !1;
                                var t = this.parsePreviewConfig();
                                window.navigator.mediaDevices.getUserMedia(t).
                                    then(this.gotStream.bind(this)).
                                    catch(this.gotStreamError.bind(this));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.previewStream &&
                                this.stopStream(this.previewStream);
                            },
                        },
                        {
                            key: 'parsePreviewConfig',
                            value: function() {
                                var e = {
                                    audio: {},
                                    video: {width: 480, height: 320},
                                };
                                if ('false' === String(this.config.isAudio) &&
                                    (e.audio = !1), 'false' === String(
                                        this.config.isVideo)) return e.video = !1, e;
                                void 0 !== this.config.audioId && e.audio &&
                                (e.audio.deviceId = this.config.audioId);
                                var t = this.config.videoId ||
                                    this.config.deviceId;
                                if (void 0 !== t && e.video &&
                                    (e.video.deviceId = t), void 0 !==
                                    this.config.profile) {
                                    var i = l.default.getAspectByProfile(
                                        this.config.profile);
                                    e.video.width = i.width, e.video.height = i.height;
                                } else if (void 0 !== this.config.width &&
                                    void 0 !== this.config.height) {
                                    var r = parseInt(this.config.width),
                                        s = parseInt(this.config.height);
                                    r = r < 0 || r > 4096 ? 480 : r, s = s <
                                    0 || s > 2160
                                        ? 320
                                        : s, e.video.width = r, e.video.height = s;
                                }
                                return e;
                            },
                        },
                        {
                            key: 'stopStream',
                            value: function(e) {
                                var t = [];
                                try {t = e.getTracks();} catch (e) {t = [];}
                                for (var i = 0; i < t.length; i++) t[i].stop();
                                this.previewStream = void 0;
                            },
                        },
                        {
                            key: 'gotStream',
                            value: function(e) {
                                if (this.quit(
                                        'gotStream')) return void this.stopStream(
                                    e);
                                var t = document.getElementById(
                                    this.config.playerId);
                                if (!t) return h.default.error(
                                    'no preview video dom',
                                    a.LOG.PREVIEW), this.dispatchEvent(
                                    a.RSP.ERROR,
                                    'no preview video dom'), void this.stop();
                                var i = 0;
                                void 0 !== this.config.rotation &&
                                (i = parseInt(this.config.rotation), i < 0 &&
                                (i = -i), i > 360 && (i %= 360));
                                var r = 'scale(-1, 1)';
                                0 !== i && (r += ' rotate(' + i + 'deg)');
                                for (var s = [
                                    'transform',
                                    'oTransform',
                                    'msTransform',
                                    'mozTransform',
                                    'webkitTransform'], n = 0; n <
                                     s.length; n++) t.style[s[n]] = r;
                                t.srcObject = e, this.previewStream = e;
                                var o = function e(i) {
                                    var r = i.target.videoWidth,
                                        s = i.target.videoHeight;
                                    h.default.log('Preview video[' + r + 'x' +
                                        s + ']',
                                        a.LOG.PREVIEW), t.removeEventListener(
                                        'loadedmetadata', e);
                                };
                                t.volume = 0, t.addEventListener(
                                    'loadedmetadata', o), this.dispatchEvent(
                                    a.RSP.SUCCESS, 'success');
                            },
                        },
                        {
                            key: 'gotStreamError',
                            value: function(e) {
                                this.quit('gotStreamError') ||
                                (this.dispatchEvent(a.RSP.ERROR,
                                    e.toString()), h.default.warn(e.toString(),
                                    a.LOG.PREVIEW), this.stop());
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t) {
                                this.observer && (this.quit('dispatchEvent') ||
                                    this.observer.trigger(o.Event.PREVIEW_EVENT,
                                        {code: e, message: t}));
                            },
                        }]), e;
                }();
            t.default = d;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(0), o = i(1),
                a = function(e) {return e && e.__esModule ? e : {default: e};}(
                    o), u = function() {
                    function e(t) {
                        r(this,
                            e), this.peer = t, this.isStop = !0, this.reportTimer = void 0, this.REPORT_TIME = 1e4;
                    }
                    
                    return s(e, [
                        {
                            key: 'start',
                            value: function() {
                                this.stop(), this.isStop = !1, this.reportTimer = window.setTimeout(
                                    this.reportTimerHandler.bind(this),
                                    this.REPORT_TIME);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.reportTimer &&
                                (window.clearTimeout(
                                    this.reportTimer), delete this.reportTimer, this.reportTimer = void 0);
                            },
                        },
                        {
                            key: 'reportTimerHandler',
                            value: function() {
                                this.peer &&
                                (a.default.log('Ready RTCPeerConnection.getStats',
                                    n.LOG.PUSH), this.peer.getStats(
                                    this.getStatsHandler.bind(this)));
                            },
                        },
                        {
                            key: 'getStatsHandler',
                            value: function(e) {
                                if (e && !this.isStop) {
                                    for (var t = void 0, i = void 0, r = e.result(), s = 0; s <
                                    r.length; s++) i = r[s], t = '========>>>>>>>> [' +
                                        i.type + '][' + i.id + ']', a.default.log(t,
                                        n.LOG.PUSH), this.statsReport(i);
                                    this.isStop || this.start();
                                }
                            },
                        },
                        {
                            key: 'statsReport',
                            value: function(e) {
                                e.names().
                                    forEach(function(t) {
                                        a.default.log(t + ' ' + e.stat(t),
                                            n.LOG.PUSH);
                                    });
                            },
                        }]), e;
                }();
            t.default = u;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(12), c = i(2), h = i(76), d = r(h), f = i(79),
                v = r(f), p = i(5), g = r(p), m = i(1), y = r(m), _ = i(15),
                S = r(_), E = i(14), R = r(E), b = i(3), T = r(b),
                C = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return e.config = {}, e.isStop = !0, e.userRole = 1, e.isMix = !1, e.getStater = void 0, e.pullUrl = '', e.urlIndex = -1, e.joinMixConfig = {}, e.mixManager = void 0, e.peer = void 0, e.peerRetryCount = 0, e.peerRetryTimer = void 0, e.rtcServerXHR = void 0, e.rtcServerHeaders = void 0, e.rtcServerRetryCount = 0, e.rtcServerRetryTimer = void 0, e.PEER_RETRY_LIMIT = 40, e.PEER_RETRY_TIMER_TIME = 3e3, e.RTC_SERVER_RETRY_LIMIT = 40, e.RTC_SERVER_RETRY_TIMER_TIME = 3e3, e.mixRetryCount = 0, e.MIX_RETRY_LIMIT = 10, e.MIX_RETRY_TIMER_TIME = 3e3, e.mixJoinRetryTimer = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (y.default.debug('[' + e + ']server stop',
                                        u.LOG.PULL), this.stop(), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.isStop = !1, this.config = e ||
                                    {}, this.parsePeerConfig(
                                    this.config), this.createRemoteVideoPlayer(), this.createRTCPeer();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.destroyMixJoinTimer(), this.destroyPeerRetryTimer(
                                    !0), this.destroyRTCServerRetryTimer(
                                    !0), this.destroyPeer(), this.destroyRemoteVideoPlayer(), this.destroyMixManager();
                            },
                        },
                        {
                            key: 'parsePeerConfig',
                            value: function(e) {
                                if (void 0 !== e.userRole) {
                                    this.userRole = 1;
                                    var t = parseInt(e.userRole);
                                    0 !== t && 1 !== t || (this.userRole = t);
                                } else this.userRole = 1;
                                this.isMix = 'true' === String(e.isMix);
                            },
                        },
                        {
                            key: 'destroyMixManager',
                            value: function() {
                                this.config.mixStreamName &&
                                '' !== this.config.mixStreamName &&
                                this.mixQuitCommand({
                                    host: this.config.host,
                                    roomId: this.config.roomId,
                                    userId: this.config.peerUserId,
                                    mixStreamName: this.config.mixStreamName,
                                }), this.mixManager &&
                                (this.mixManager.stop(), this.mixManager = void 0);
                            },
                        },
                        {
                            key: 'destroyPeer',
                            value: function() {
                                this.peer &&
                                (this.peer.onaddstream = void 0, this.peer.onicecandidate = void 0, this.peer.oniceconnectionstatechange = void 0, this.peer.close(), this.peer = void 0);
                            },
                        },
                        {
                            key: 'destroyPeerRetryTimer',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && arguments[0] &&
                                (this.peerRetryCount = 0), this.peerRetryTimer &&
                                (window.clearTimeout(
                                    this.peerRetryTimer), delete this.peerRetryTimer, this.peerRetryTimer = void 0);
                            },
                        },
                        {
                            key: 'destroyRTCServerRetryTimer',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && arguments[0] &&
                                (this.rtcServerRetryCount = 0), this.rtcServerRetryTimer &&
                                (window.clearTimeout(
                                    this.rtcServerRetryTimer), delete this.rtcServerRetryTimer, this.rtcServerRetryTimer = void 0);
                            },
                        },
                        {
                            key: 'createRTCPeer',
                            value: function() {
                                this.peer = new RTCPeerConnection(
                                    null), this.peer.onaddstream = this.goRemoteStream.bind(
                                    this), this.peer.onicecandidate = this.onIceCandidate.bind(
                                    this), this.peer.oniceconnectionstatechange = this.onIceStateChange.bind(
                                    this), this.rtcServerHeaders = {}, this.rtcServerHeaders[c.HOST.RTC_HEADER_TOKEN] = c.Globals.token, this.rtcServerHeaders[c.HOST.RTC_HEADER_APP_ID] = c.Globals.appId, this.rtcServerHeaders[c.HOST.RTC_HEADER_USER_ID] = c.Globals.userId, this.rtcServerHeaders[c.HOST.RTC_HEADER_TRACE_ID] = c.Globals.traceId, c.Globals.isPermission &&
                                (this.rtcServerHeaders[c.HOST.RTC_HEADER_TICKET] = c.Globals.ticket), this.postRTCServer(
                                    {}, this.rtcServerHeaders);
                            },
                        },
                        {
                            key: 'goRemoteStream',
                            value: function(e) {
                                this.quit('goRemoteStream') ||
                                (this.remoteVideoPlayer
                                    ? this.remoteVideoPlayer.play(e.stream)
                                    : y.default.warn('no remote videp player',
                                        u.LOG.PULL));
                            },
                        },
                        {
                            key: 'createRemoteVideoPlayer',
                            value: function() {
                                this.remoteVideoPlayer ||
                                (this.remoteVideoPlayer = new v.default(
                                    this.config.playerId), this.remoteVideoPlayer.listenTo(
                                    l.PullEvent.VIDEO_EVENT,
                                    this.onRemoteVideoEventHandler.bind(
                                        this))), this.remoteVideoPlayer.start();
                            },
                        },
                        {
                            key: 'destroyRemoteVideoPlayer',
                            value: function() {
                                this.remoteVideoPlayer &&
                                (this.remoteVideoPlayer.removeToAll(), this.remoteVideoPlayer.stop(), this.remoteVideoPlayer = void 0);
                            },
                        },
                        {
                            key: 'onRemoteVideoEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[u.RSP.TYPE], i = e[u.RSP.CODE],
                                        r = e[u.RSP.MESSAGE];
                                    switch (t) {
                                        case l.PullMessage.PLAY_METADATA:
                                        case l.PullMessage.PLAY_ERROR:
                                            this.dispatchEvent(t, i, r);
                                    }
                                }
                            },
                        },
                        {
                            key: 'onIceCandidate',
                            value: function(e) {
                                if (!this.quit('onIceCandidate')) {
                                    var t = 'null';
                                    e && e.candidate &&
                                    (t = e.candidate.candidate), y.default.log('ICE candidate: \n' +
                                        t, u.LOG.PULL);
                                }
                            },
                        },
                        {
                            key: 'onIceStateChange',
                            value: function(e) {
                                if (!this.quit('onIceStateChange') &&
                                    this.peer && e && e.currentTarget) {
                                    var t = e.currentTarget;
                                    t.iceConnectionState &&
                                    t.iceGatheringState &&
                                    (y.default.log('iceConnectionState: ' +
                                        t.iceConnectionState +
                                        ', iceGatheringState: ' +
                                        t.iceGatheringState,
                                        u.LOG.PULL), 'failed' ===
                                    t.iceConnectionState
                                        ? this.recreateRTCPeer()
                                        : 'completed' ===
                                        t.iceConnectionState &&
                                        this.destroyPeerRetryTimer(!0));
                                }
                            },
                        },
                        {
                            key: 'recreateRTCPeer',
                            value: function() {
                                this.quit('recreateRTCPeer') ||
                                (this.destroyPeer(), this.destroyPeerRetryTimer(), this.destroyRTCServerRetryTimer(
                                    !0), this.isStartPeerRetryTimer() ||
                                (this.dispatchEvent(
                                    l.PullMessage.RTC_SERVER_ERROR, u.RSP.ERROR,
                                    'recreate rtcPeer limit error'), this.stop()));
                            },
                        },
                        {
                            key: 'getAvailablePullUrl',
                            value: function() {
                                var e = this.config.pullUrls[0];
                                return -1 === this.urlIndex
                                    ? (this.urlIndex++, e)
                                    : (this.urlIndex >=
                                    this.config.pullUrls.length &&
                                    (this.urlIndex = 0), e = this.config.pullUrls[this.urlIndex], this.urlIndex++, e);
                            },
                        },
                        {
                            key: 'getMixControlParams',
                            value: function() {
                                var e = {
                                        mixStreamName: '',
                                        host: c.Globals.host,
                                    }, t = this.pullUrl, i = t.split('?'),
                                    r = g.default.getQueryParams(i[1]);
                                r.host &&
                                (e.host = r.host), c.Globals.pullMixStreamName = e.mixStreamName = g.default.getStreamName(
                                    i[0]);
                                var s = void 0;
                                s = '' === c.Globals.rtcTestHost
                                    ? c.HOST.RTC_HOST
                                    : c.Globals.rtcTestHost;
                                var n = c.HOST.PROTOCOL + s;
                                n += ':' + c.HOST.RTC_PORT +
                                    '/', n += 'mix_control?v=' + c.HOST.RTC_VER;
                                for (var o in r) if (r.hasOwnProperty(
                                        o)) switch (o) {
                                    case'wsHost':
                                    case'nodeaddr':
                                        n += '&' + o + '=' + r[o];
                                }
                                return c.Globals.pullMixUrl = n, e;
                            },
                        },
                        {
                            key: 'isStartPeerRetryTimer',
                            value: function() {
                                return ++this.peerRetryCount <
                                    this.PEER_RETRY_LIMIT &&
                                    (y.default.log('[' + this.peerRetryCount +
                                        ']recreate rtcPeer after ' +
                                        this.PEER_RETRY_TIMER_TIME + 'ms',
                                        u.LOG.PULL), this.peerRetryTimer = window.setTimeout(
                                        this.createRTCPeer.bind(this),
                                        this.PEER_RETRY_TIMER_TIME), !0);
                            },
                        },
                        {
                            key: 'isStartRTCServerRetryTimer',
                            value: function() {
                                return ++this.rtcServerRetryCount <
                                    this.RTC_SERVER_RETRY_LIMIT &&
                                    (y.default.log('[' +
                                        this.rtcServerRetryCount +
                                        ']rePostRTCServer after ' +
                                        this.RTC_SERVER_RETRY_TIMER_TIME + 'ms',
                                        u.LOG.PULL), this.rtcServerRetryTimer = window.setTimeout(
                                        this.rePostRTCServer.bind(this),
                                        this.RTC_SERVER_RETRY_TIMER_TIME), !0);
                            },
                        },
                        {
                            key: 'rePostRTCServer',
                            value: function() {
                                this.postRTCServer({}, this.rtcServerHeaders);
                            },
                        },
                        {
                            key: 'postRTCServer',
                            value: function(e, t) {
                                if (this.destroyRTCServerRetryTimer(
                                        !1), !this.quit('postRTCServer')) {
                                    this.pullUrl = this.getAvailablePullUrl(), this.rtcServerXHR ||
                                    (this.rtcServerXHR = new R.default(
                                        this.postRTCServerSuccess.bind(this),
                                        this.postRTCServerFailed.bind(this)));
                                    var i = {};
                                    i[u.XHR.METHOD] = 'GET', i[u.XHR.HEADERS] = t, this.rtcServerXHR.start(
                                        this.pullUrl, e, i);
                                }
                            },
                        },
                        {
                            key: 'postRTCServerSuccess',
                            value: function(e, t) {
                                if (!this.quit('postRTCServerSuccess')) {
                                    var i = '';
                                    if (!e || t !== u.XHR.SUCCESS) return i = e
                                        ? 'postRTCServer response status: ' + t
                                        : 'postRTCServer response is null', void this.dispatchEvent(
                                        l.PullMessage.RTC_SERVER_ERROR, t, i);
                                    var r = void 0, s = void 0;
                                    try {
                                        r = JSON.parse(e).sdp, s = r.replace(
                                            /;;/g, '\r\n');
                                    } catch (e) {
                                        return i = 'parse sdp response failed', void this.dispatchEvent(
                                            l.PullMessage.RTC_SERVER_ERROR,
                                            u.RSP.ERROR, i);
                                    }
                                    if (y.default.log('peer answer SDP: \n' + s,
                                            u.LOG.PULL), !this.peer) return void y.default.warn(
                                        'RTCPeerConnection offline',
                                        u.LOG.PULL);
                                    this.destroyRTCServerRetryTimer(
                                        !0), this.peer.setRemoteDescription(
                                        {type: 'offer', sdp: s}, function() {
                                            y.default.debug(
                                                'set remote description success',
                                                u.LOG.PULL);
                                        }, function(e) {
                                            y.default.warn('set remote description failed[' +
                                                e.toString() + ']', u.LOG.PULL);
                                        }), this.peer.createAnswer().
                                        then(this.onCreateAnswerSuccess.bind(
                                            this),
                                            this.onCreateAnswerError.bind(this));
                                }
                            },
                        },
                        {
                            key: 'postRTCServerFailed',
                            value: function(e, t) {
                                if (!this.quit('postRTCServerFailed')) {
                                    this.destroyRTCServerRetryTimer(!1), e ||
                                    (e = {});
                                    var i = '', r = parseInt(e[u.XHR.STATUS]);
                                    if (!isNaN(r)) {
                                        if (400 === r
                                                ? i = 'request error by error url or http headers or body'
                                                : 403 === r
                                                    ? i = 'authentication faied, forbidden access'
                                                    : 404 === r || 500 === r &&
                                                    (i = 'nginx internal error'), '' !==
                                            i) return void this.dispatchEvent(
                                            l.PullMessage.RTC_SERVER_ERROR, r,
                                            i);
                                        y.default.log('subscribe status[' + r +
                                            ']', u.LOG.PULL);
                                    }
                                    this.isStartRTCServerRetryTimer() ||
                                    (this.dispatchEvent(
                                        l.PullMessage.RTC_SERVER_ERROR,
                                        u.RSP.ERROR,
                                        'subscribe retry limit error'), this.stop());
                                }
                            },
                        },
                        {
                            key: 'onCreateAnswerError',
                            value: function(e) {
                                this.quit('onCreateAnswerError') ||
                                (y.default.warn(e.toString(),
                                    u.LOG.PULL), this.recreateRTCPeer());
                            },
                        },
                        {
                            key: 'onCreateAnswerSuccess',
                            value: function(e) {
                                if (!this.quit('onCreateAnswerSuccess')) {
                                    if (y.default.log('local answer SDP: \n' +
                                            e.sdp, u.LOG.PULL), this.peer &&
                                        this.peer.setLocalDescription(e,
                                            function() {
                                                y.default.debug(
                                                    'set local description success',
                                                    u.LOG.PULL);
                                            }, function(e) {
                                                y.default.warn('set local description failed[' +
                                                    e.toString() + ']',
                                                    u.LOG.PULL);
                                            }), !this.isMix || 1 ===
                                        this.userRole) return void y.default.debug(
                                        'subscribe stream without mix control',
                                        u.LOG.PULL);
                                    var t = this.getMixControlParams();
                                    this.config.host = t.host, this.config.mixStreamName = t.mixStreamName, this.mixManager ||
                                    (this.mixManager = new S.default(
                                        this)), this.mixRetryCount = 0;
                                    var i = this.config;
                                    i.userId = this.config.peerUserId, this.mixManager.start(
                                        i), this.joinMixConfig = {
                                        host: i.host,
                                        roomId: this.config.roomId,
                                        userId: i.userId,
                                        mixStreamName: i.mixStreamName,
                                    }, this.mixJoinCommand(this.joinMixConfig);
                                }
                            },
                        },
                        {
                            key: 'destroyMixJoinTimer',
                            value: function() {
                                this.mixJoinRetryTimer && (window.clearTimeout(
                                    this.mixJoinRetryTimer), this.mixJoinRetryTimer = void 0);
                            },
                        },
                        {
                            key: 'onMixJoinRetryTimerHandler',
                            value: function() {
                                this.mixJoinCommand(this.joinMixConfig);
                            },
                        },
                        {
                            key: 'retryMixJoin',
                            value: function() {
                                this.destroyMixJoinTimer(), this.mixRetryCount <
                                this.MIX_RETRY_LIMIT &&
                                (this.mixRetryCount++, this.mixJoinRetryTimer = window.setTimeout(
                                    this.onMixJoinRetryTimerHandler.bind(this),
                                    this.MIX_RETRY_TIMER_TIME));
                            },
                        },
                        {
                            key: 'forceJoinCommand',
                            value: function() {
                                this.joinMixConfig &&
                                this.mixJoinCommand(this.joinMixConfig);
                            },
                        },
                        {
                            key: 'mixJoinCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixJoin(e);
                            },
                        },
                        {
                            key: 'mixQuitCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixQuit(e);
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i, r) {
                                this.quit('dispatchEvent') ||
                                this.trigger(l.PullEvent.PEER_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        },
                        {
                            key: 'getPeerStatus',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && !arguments[0]
                                    ? this.getStater &&
                                    (this.getStater.stop(), this.getStater = void 0)
                                    : (this.getStater ||
                                    (this.getStater = new d.default(
                                        this.peer)), this.getStater.start());
                            },
                        }]), t;
                }(T.default);
            t.default = C;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(4), l = i(0), c = i(12), h = i(2), d = i(77), f = r(d),
                v = i(5), p = r(v), g = i(1), m = r(g), y = i(3), _ = r(y),
                S = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return e.isStop = !0, e.config = {}, e.uuid = Math.random().
                            toFixed(6).
                            substring(2), e.rtcPeer = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (m.default.debug('[' + e + ']server stop',
                                        l.LOG.PULL), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.isStop = !1, this.config = e ||
                                    {}, this.parsePullConfig(
                                    this.config), this.config.pullUrl
                                    ? -1 !==
                                    this.config.pullUrl.indexOf('nodeaddr=')
                                        ? (this.pullUrl = this.parsePullUrl(), this.pullUrls.splice(), this.pullUrls.push(
                                            this.pullUrl))
                                        : (this.pullUrls = this.parsePullUrl(
                                            h.Globals.rtcHosts), this.pullUrl = this.pullUrls[0])
                                    : (this.pullUrls = this.assemblePullUrl(
                                        h.Globals.rtcHosts), this.pullUrl = this.pullUrls[0]), this.subscribe();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {this.isStop = !0, this.destroyRTCPeer();},
                        },
                        {
                            key: 'parsePullConfig',
                            value: function(e) {},
                        },
                        {
                            key: 'parsePullUrl',
                            value: function(e) {
                                var t = this.config.pullUrl, i = t.split('?'),
                                    r = p.default.getQueryParams(i[1]),
                                    s = p.default.getStreamName(i[0]),
                                    n = void 0;
                                n = '' === h.Globals.rtcTestHost
                                    ? h.HOST.RTC_HOST
                                    : h.Globals.rtcTestHost;
                                var o = h.HOST.PROTOCOL + n;
                                o += ':' + h.HOST.RTC_PORT + '/' +
                                    s, o += '?v=' + h.HOST.RTC_VER +
                                    '&type=subscribe';
                                for (var a in r) if (r.hasOwnProperty(
                                        a)) switch (a) {
                                    case'host':
                                    case'wsHost':
                                    case'proto':
                                        o += '&' + a + '=' + r[a];
                                        break;
                                    case'nodeaddr':
                                        e || (o += '&' + a + '=' + r[a]);
                                }
                                if (!e) return o;
                                for (var u = [], l = o, c = 0; c <
                                e.length; c++) l += '&nodeaddr=' + e[c] + ':' +
                                    h.HOST.RTC_TRAN_PORT, u.push(l), l = o;
                                return u.length || u.push(o), u;
                            },
                        },
                        {
                            key: 'assemblePullUrl',
                            value: function(e) {
                                var t = void 0;
                                t = '' === h.Globals.rtcTestHost
                                    ? h.HOST.RTC_HOST
                                    : h.Globals.rtcTestHost;
                                var i = h.HOST.PROTOCOL + t;
                                i += ':' + h.HOST.RTC_PORT + '/' +
                                    this.config.streamName, i += '?v=' +
                                    h.HOST.RTC_VER + '&type=subscribe&wsHost=' +
                                    h.Globals.host, void 0 !==
                                this.config.proto &&
                                (i += '&proto=' + parseInt(this.config.proto));
                                for (var r = [], s = i, n = 0; n <
                                e.length; n++) s += '&nodeaddr=' + e[n] + ':' +
                                    h.HOST.RTC_TRAN_PORT, r.push(s), s = i;
                                return r.length || r.push(i), r;
                            },
                        },
                        {
                            key: 'subscribe',
                            value: function() {this.createRTCPeerServer();},
                        },
                        {
                            key: 'destroyRTCPeer',
                            value: function() {
                                this.rtcPeer &&
                                (this.rtcPeer.removeToAll(), this.rtcPeer.stop(), this.rtcPeer = void 0);
                            },
                        },
                        {
                            key: 'createRTCPeerServer',
                            value: function() {
                                var e = this.config;
                                this.rtcPeer ||
                                (this.rtcPeer = new f.default, this.rtcPeer.listenTo(
                                    c.PullEvent.PEER_EVENT,
                                    this.onPeerEventHandler.bind(
                                        this)), this.rtcPeer.listenTo(
                                    u.Event.MIX_EVENT,
                                    this.onPeerMixEventHandler.bind(
                                        this))), e.pullUrls = this.pullUrls, this.rtcPeer.start(
                                    e);
                            },
                        },
                        {
                            key: 'onPeerEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.MESSAGE];
                                    switch (t) {
                                        case c.PullMessage.PLAY_METADATA:
                                        case c.PullMessage.RTC_SERVER_SUCCESS:
                                        case c.PullMessage.RTC_SERVER_ERROR:
                                        case c.PullMessage.PLAY_ERROR:
                                            this.dispatchEvent(t, i, r);
                                    }
                                }
                            },
                        },
                        {
                            key: 'onPeerMixEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.MESSAGE];
                                    this.dispatchEvent(t, i, r);
                                }
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i) {
                                var r = arguments.length > 3 &&
                                void 0 !== arguments[3] ? arguments[3] : {};
                                this.quit('dispatchEvent') ||
                                this.trigger(c.PullEvent.PULL_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        },
                        {
                            key: 'forceJoinCommand',
                            value: function() {
                                this.rtcPeer && this.rtcPeer.forceJoinCommand();
                            },
                        },
                        {
                            key: 'mixJoinCommand',
                            value: function(e) {
                                this.rtcPeer && this.rtcPeer.mixJoinCommand(e);
                            },
                        },
                        {
                            key: 'mixQuitCommand',
                            value: function(e) {
                                this.rtcPeer && this.rtcPeer.mixQuitCommand(e);
                            },
                        },
                        {
                            key: 'getPeerStatus',
                            value: function() {
                                var e = !(arguments.length > 0 && void 0 !==
                                    arguments[0]) || arguments[0];
                                this.rtcPeer && this.rtcPeer.getPeerStatus(e);
                            },
                        },
                        {
                            key: 'userId',
                            get: function() {
                                return this.config.userId || void 0;
                            },
                        },
                        {
                            key: 'roomId',
                            get: function() {
                                return this.config.roomId || void 0;
                            },
                        },
                        {
                            key: 'peerUserId',
                            get: function() {
                                return this.config.peerUserId || void 0;
                            },
                        },
                        {
                            key: 'playerId',
                            get: function() {
                                return this.config.playerId || void 0;
                            },
                        }]), t;
                }(_.default);
            t.default = S;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(12), c = i(1), h = r(c), d = i(3), f = r(d),
                v = function(e) {
                    function t(e) {
                        s(this, t);
                        var i = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return i.isActive = !1, i.video = void 0, i.playerId = e, i;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !this.isActive &&
                                    (h.default.debug('[' + e + ']server stop',
                                        u.LOG.PULL), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function() {
                                if (this.isActive = !0, this.video = document.getElementById(
                                        this.playerId), !this.video) return void h.default.warn('add local video[' +
                                    this.playerId + '] is null', u.LOG.PULL);
                                this.video.addEventListener('pause',
                                    this.localPause.bind(
                                        this)), this.video.addEventListener(
                                    'error', this.localError.bind(
                                        this)), this.video.addEventListener(
                                    'ended', this.localEnded.bind(
                                        this)), this.video.addEventListener(
                                    'playing', this.localPlay.bind(
                                        this)), this.video.addEventListener(
                                    'waiting', this.localWaiting.bind(
                                        this)), this.video.addEventListener(
                                    'loadedmetadata',
                                    this.localMetadata.bind(this));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isActive = !1, this.video &&
                                (this.video.removeEventListener('pause',
                                    this.localPause.bind(
                                        this)), this.video.removeEventListener(
                                    'error', this.localError.bind(
                                        this)), this.video.removeEventListener(
                                    'ended', this.localEnded.bind(
                                        this)), this.video.removeEventListener(
                                    'playing', this.localPlay.bind(
                                        this)), this.video.removeEventListener(
                                    'waiting', this.localWaiting.bind(
                                        this)), this.video.removeEventListener(
                                    'loadedmetadata', this.localMetadata.bind(
                                        this)), this.video = void 0);
                            },
                        },
                        {
                            key: 'play',
                            value: function(e) {
                                this.video && (this.video.srcObject = e);
                            },
                        },
                        {
                            key: 'localEnded',
                            value: function() {
                                this.quit('localEnded') ||
                                h.default.log('video ended', u.LOG.PULL);
                            },
                        },
                        {
                            key: 'localPause',
                            value: function() {
                                this.quit('localPause') ||
                                h.default.log('video pause', u.LOG.PULL);
                            },
                        },
                        {
                            key: 'localPlay',
                            value: function() {
                                this.quit('localPlay') ||
                                h.default.log('video playing', u.LOG.PULL);
                            },
                        },
                        {
                            key: 'localWaiting',
                            value: function() {
                                this.quit('localWaiting') ||
                                h.default.log('video waiting', u.LOG.PULL);
                            },
                        },
                        {
                            key: 'localError',
                            value: function(e) {
                                if (!this.quit('localError')) {
                                    var t = void 0;
                                    e && e.currentTarget &&
                                    (t = e.currentTarget.error);
                                    var i = 0, r = '';
                                    t && (i = t.code ||
                                        0, r = t.message, h.default.error('localError: [' +
                                        i + '][' + r + ']',
                                        u.LOG.PULL)), this.dispatchEvent(
                                        l.PullMessage.PLAY_ERROR, i, r);
                                }
                            },
                        },
                        {
                            key: 'localMetadata',
                            value: function(e) {
                                if (!this.quit('localMetadata')) {
                                    var t = -1, i = -1;
                                    if (e && e.target &&
                                        (t = e.target.videoWidth, i = e.target.videoHeight), h.default.log('remoteMetadata [' +
                                            t + 'x' + i + ']', u.LOG.PULL), e &&
                                        e.target) try {e.target.play();} catch (e) {}
                                    this.dispatchEvent(
                                        l.PullMessage.PLAY_METADATA,
                                        u.RSP.SUCCESS,
                                        JSON.stringify({width: t, height: i}));
                                }
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i) {
                                this.quit('dispatchEvent') ||
                                this.trigger(l.PullEvent.VIDEO_EVENT,
                                    {type: e, code: t, message: i});
                            },
                        }]), t;
                }(f.default);
            t.default = v;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(5),
                o = function(e) {return e && e.__esModule ? e : {default: e};}(
                    n), a = function() {
                    function e() {r(this, e);}
                    
                    return s(e, [
                        {
                            key: 'parse',
                            value: function(e) {
                                var t = {
                                    audio: {},
                                    video: {},
                                    mediaConfig: e.mediaConfig || {},
                                };
                                return e.audio
                                    ? 'boolean' == typeof e.audio
                                        ? t.audio = !('false' === String(e.audio))
                                        : t = this.parseAudioConfig(e.audio, t)
                                    : delete t.audio, e.video ? 'boolean' ==
                                typeof e.video ? t.video = !('false' ===
                                    String(e.video)) : t = this.parseVideoConfig(
                                    e.video, t) : delete t.video, t;
                            },
                        },
                        {
                            key: 'parseAudioConfig',
                            value: function(e, t) {
                                var i = t;
                                for (var r in e) if (e.hasOwnProperty(
                                        r)) switch (r) {
                                    case'bitrate':
                                    case'bitRate':
                                        var s = parseInt(e[r]);
                                        i.mediaConfig.audioBitrate = s > 0 &&
                                        s <= 512 ? s : 0;
                                        break;
                                    case'deviceId':
                                        i.audio[r] = e[r];
                                        break;
                                    case'sampleSize':
                                    case'channelCount':
                                        i.audio[r] = parseInt(e[r]);
                                        break;
                                    case'echoCancellation':
                                        i.audio[r] = !('false' ===
                                            String(e[r])), i.audio[r] ||
                                        (i = o.default.closeEchoCancellation(i));
                                        break;
                                    case'isCBR':
                                        i.mediaConfig.isAudioCBR = 'true' ===
                                            String(e[r]);
                                }
                                return i;
                            },
                        },
                        {
                            key: 'parseVideoConfig',
                            value: function(e, t) {
                                var i = t, r = {width: -1, height: -1};
                                for (var s in e) if (e.hasOwnProperty(
                                        s)) switch (s) {
                                    case'bitrate':
                                    case'bitRate':
                                        var n = parseInt(e[s]);
                                        i.mediaConfig.videoBitrate = n > 0 &&
                                        n <= 8192 ? n : 0;
                                        break;
                                    case'brFactor':
                                        var a = parseInt(e[s]);
                                        i.mediaConfig.brFactor = a > 0 && a < 1
                                            ? a
                                            : .6;
                                        break;
                                    case'deviceId':
                                        i.video[s] = e[s];
                                        break;
                                    case'width':
                                        var u = parseInt(e[s]);
                                        u > 0 && u <= 4096 && (r.width = u);
                                        break;
                                    case'height':
                                        var l = parseInt(e[s]);
                                        l > 0 && l <= 2160 && (r.height = l);
                                        break;
                                    case'framerate':
                                    case'frameRate':
                                        var c = parseInt(e[s]);
                                        c > 0 && c <= 75 && (i.video.frameRate = c);
                                        break;
                                    case'landscape':
                                        i.mediaConfig[s] = !('false' ===
                                            String(e[s]));
                                        break;
                                    case'isCBR':
                                        i.mediaConfig.isVideoCBR = 'true' ===
                                            String(e[s]);
                                        break;
                                    case'isBrControl':
                                        i.mediaConfig.isBrControl = 'true' ===
                                            String(e[s]);
                                }
                                var h = void 0, d = void 0, f = void 0,
                                    v = i.mediaConfig.landscape;
                                return f = -1 === r.width || -1 === r.height
                                    ? o.default.getAspectByProfile(e.profile)
                                    : r, h = f.width, d = f.height, i.video.width = v
                                    ? h
                                    : d, i.video.height = v
                                    ? d
                                    : h, i.mediaConfig.width = i.video.width, i.mediaConfig.height = i.video.height, i;
                            },
                        }]), e;
                }();
            t.default = a;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(0), o = i(1),
                a = function(e) {return e && e.__esModule ? e : {default: e};}(
                    o), u = function() {
                    function e(t) {
                        r(this,
                            e), this.peer = t, this.isStop = !0, this.reportTimer = void 0, this.REPORT_TIME = 1e4;
                    }
                    
                    return s(e, [
                        {
                            key: 'start',
                            value: function() {
                                this.stop(), this.isStop = !1, this.reportTimer = window.setTimeout(
                                    this.reportTimerHandler.bind(this),
                                    this.REPORT_TIME);
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.reportTimer &&
                                (window.clearTimeout(
                                    this.reportTimer), delete this.reportTimer, this.reportTimer = void 0);
                            },
                        },
                        {
                            key: 'reportTimerHandler',
                            value: function() {
                                this.peer &&
                                (a.default.log('Ready RTCPeerConnection.getStats',
                                    n.LOG.PUSH), this.peer.getStats(
                                    this.getStatsHandler.bind(this)));
                            },
                        },
                        {
                            key: 'getStatsHandler',
                            value: function(e) {
                                if (e && !this.isStop) {
                                    for (var t = void 0, i = void 0, r = e.result(), s = 0; s <
                                    r.length; s++) i = r[s], t = '========>>>>>>>> [' +
                                        i.type + '][' + i.id + ']', a.default.log(t,
                                        n.LOG.PUSH), this.statsReport(i);
                                    this.isStop || this.start();
                                }
                            },
                        },
                        {
                            key: 'statsReport',
                            value: function(e) {
                                e.names().
                                    forEach(function(t) {
                                        a.default.log(t + ' ' + e.stat(t),
                                            n.LOG.PUSH);
                                    });
                            },
                        }]), e;
                }();
            t.default = u;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(13), c = i(2), h = i(81), d = r(h), f = i(5),
                v = r(f), p = i(88), g = r(p), m = i(1), y = r(m), _ = i(15),
                S = r(_), E = i(3), R = r(E), b = i(14), T = r(b),
                C = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return e.config = {}, e.isStop = !0, e.userRole = 1, e.isMix = !1, e.isFirstMixCreate = !0, e.pushUrl = '', e.urlIndex = -1, e.dispatchIP = '', e.mixManager = void 0, e.localStream = void 0, e.peer = void 0, e.peerRetryCount = 0, e.peerRetryTimer = void 0, e.rtcSDP = '', e.rtcServerXHR = void 0, e.rtcServerHeaders = void 0, e.rtcRepeatCount = 0, e.rtcServerRetryCount = 0, e.rtcServerRetryTimer = void 0, e.PEER_RETRY_LIMIT = 24, e.PEER_RETRY_TIMER_TIME = 5e3, e.RTC_REPEAT_COUNT_LIMIT = 4, e.RTC_SERVER_RETRY_LIMIT = 40, e.RTC_SERVER_RETRY_TIMER_TIME = 3e3, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (y.default.debug('[' + e + ']server stop',
                                        u.LOG.PUSH), this.stop(), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e, t) {
                                this.isStop = !1, this.config = t || {
                                    mix: {},
                                    media: {},
                                }, this.isFirstMixCreate = !0, this.parsePeerConfig(
                                    this.config), this.localStream = e, this.createRTCPeer();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.destroyPeerRetryTimer(
                                    !0), this.destroyRTCServerRetryTimer(
                                    !0), this.destroyPeer(), this.destroyMixManager(), this.localStream &&
                                (this.localStream = void 0);
                            },
                        },
                        {
                            key: 'parsePeerConfig',
                            value: function(e) {
                                if (void 0 !== e.userRole) {
                                    this.userRole = 1;
                                    var t = parseInt(e.userRole);
                                    0 !== t && 1 !== t || (this.userRole = t);
                                } else this.userRole = 1;
                                this.isMix = 'true' === String(e.isMix);
                            },
                        },
                        {
                            key: 'destroyMixManager',
                            value: function() {
                                this.mixDestroyCommand(
                                    {roomId: this.config.roomId}), this.mixManager &&
                                (this.mixManager.stop(), this.mixManager = void 0);
                            },
                        },
                        {
                            key: 'destroyPeer',
                            value: function() {
                                this.peer &&
                                (this.peer.onicecandidate = void 0, this.peer.oniceconnectionstatechange = void 0, this.peer.close(), this.peer = void 0);
                            },
                        },
                        {
                            key: 'destroyPeerRetryTimer',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && arguments[0] &&
                                (this.peerRetryCount = 0), this.peerRetryTimer &&
                                (window.clearTimeout(
                                    this.peerRetryTimer), delete this.peerRetryTimer, this.peerRetryTimer = void 0);
                            },
                        },
                        {
                            key: 'destroyRTCServerRetryTimer',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && arguments[0] &&
                                (this.rtcRepeatCount = 0, this.rtcServerRetryCount = 0), this.rtcServerRetryTimer &&
                                (window.clearTimeout(
                                    this.rtcServerRetryTimer), delete this.rtcServerRetryTimer, this.rtcServerRetryTimer = void 0);
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i, r) {
                                this.trigger(l.PushEvent.PEER_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        },
                        {
                            key: 'createRTCPeer',
                            value: function() {
                                this.peer = new RTCPeerConnection(
                                    null), this.peer.onicecandidate = this.onIceCandidate.bind(
                                    this), this.peer.oniceconnectionstatechange = this.onIceStateChange.bind(
                                    this), this.peer.addStream(
                                    this.localStream);
                                var e = {
                                    offerToReceiveAudio: this.config.media.isAudio,
                                    offerToReceiveVideo: this.config.media.isVideo,
                                };
                                this.peer.createOffer(e).
                                    then(this.onCreateOfferSuccess.bind(this),
                                        this.onCreateOfferError.bind(this));
                            },
                        },
                        {
                            key: 'recreateRTCPeer',
                            value: function() {
                                this.quit('recreateRTCPeer') ||
                                (this.destroyPeer(), this.destroyPeerRetryTimer(), this.destroyRTCServerRetryTimer(
                                    !0), this.isStartPeerRetryTimer() ||
                                (this.stop(), this.dispatchEvent(
                                    l.PushMessage.RTC_SERVER_ERROR, u.RSP.ERROR,
                                    'recreate rtcPeer limit error')));
                            },
                        },
                        {
                            key: 'isStartPeerRetryTimer',
                            value: function() {
                                return ++this.peerRetryCount <
                                    this.PEER_RETRY_LIMIT &&
                                    (y.default.log('[' + this.peerRetryCount +
                                        ']recreate rtcPeer after ' +
                                        this.RTC_SERVER_RETRY_TIMER_TIME + 'ms',
                                        u.LOG.PUSH), this.peerRetryTimer = window.setTimeout(
                                        this.createRTCPeer.bind(this),
                                        this.PEER_RETRY_TIMER_TIME), !0);
                            },
                        },
                        {
                            key: 'onIceCandidate',
                            value: function(e) {
                                if (!this.quit('onIceCandidate')) {
                                    var t = 'null';
                                    e && e.candidate &&
                                    (t = e.candidate.candidate), y.default.log('ICE candidate: \n' +
                                        t, u.LOG.PUSH);
                                }
                            },
                        },
                        {
                            key: 'onIceStateChange',
                            value: function(e) {
                                if (!this.quit('onIceStateChange') &&
                                    this.peer && e && e.currentTarget) {
                                    var t = e.currentTarget;
                                    t.iceConnectionState &&
                                    t.iceGatheringState &&
                                    (y.default.log('iceConnectionState: ' +
                                        t.iceConnectionState +
                                        ', iceGatheringState: ' +
                                        t.iceGatheringState,
                                        u.LOG.PUSH), 'failed' ===
                                    t.iceConnectionState
                                        ? this.recreateRTCPeer()
                                        : 'completed' ===
                                        t.iceConnectionState &&
                                        this.destroyPeerRetryTimer(!0));
                                }
                            },
                        },
                        {
                            key: 'onCreateOfferError',
                            value: function(e) {
                                this.quit('onCreateOfferError') ||
                                (y.default.warn(e.toString(),
                                    u.LOG.PUSH), this.recreateRTCPeer());
                            },
                        },
                        {
                            key: 'onCreateOfferSuccess',
                            value: function(e) {
                                if (!this.quit('onCreateOfferSuccess')) {
                                    this.peer.setLocalDescription(e,
                                        function() {
                                            y.default.debug(
                                                'set local description success',
                                                u.LOG.PUSH);
                                        }, function(e) {
                                            y.default.warn('set local description failed[' +
                                                e.toString() + ']', u.LOG.PUSH);
                                        });
                                    var t = e.sdp;
                                    y.default.log('offer SDP: \n' + t,
                                        u.LOG.PUSH), this.rtcSDP = this.serializeSDPData(
                                        t), this.rtcServerHeaders = {}, this.rtcServerHeaders[c.HOST.RTC_HEADER_TOKEN] = c.Globals.token, this.rtcServerHeaders[c.HOST.RTC_HEADER_APP_ID] = c.Globals.appId, this.rtcServerHeaders[c.HOST.RTC_HEADER_USER_ID] = c.Globals.userId, this.rtcServerHeaders[c.HOST.RTC_HEADER_TRACE_ID] = c.Globals.traceId, c.Globals.isPermission &&
                                    (this.rtcServerHeaders[c.HOST.RTC_HEADER_TICKET] = c.Globals.ticket), this.postRTCServer(
                                        this.rtcSDP, this.rtcServerHeaders);
                                }
                            },
                        },
                        {
                            key: 'serializeSDPData',
                            value: function(e) {
                                var t = {
                                    peer_bitrate: 1e3,
                                    sdp: e ? e.replace(/\r\n/g, ';;') : '',
                                };
                                if (void 0 !== this.config.mix.trace &&
                                    (t.trace = 'true' === String(
                                        this.config.mix.trace)), void 0 !==
                                    this.config.mix.firInterval) {
                                    var i = parseInt(
                                        this.config.mix.firInterval);
                                    i >= 0 && i <= 120 && (t.fir_interval = i);
                                }
                                return 'true' === String(this.config.isSei) &&
                                (t.local_timestamp = String(
                                    (new Date).getTime())), JSON.stringify(t);
                            },
                        },
                        {
                            key: 'getAvailablePushUrl',
                            value: function() {
                                var e = this.config.pushUrls[0];
                                return -1 === this.urlIndex
                                    ? (this.urlIndex++, e)
                                    : (this.urlIndex >=
                                    this.config.pushUrls.length &&
                                    (this.urlIndex = 0), e = this.config.pushUrls[this.urlIndex], this.urlIndex++, e);
                            },
                        },
                        {
                            key: 'getMixControlUrl',
                            value: function() {
                                var e = this.pushUrl, t = e.split('?'),
                                    i = v.default.getQueryParams(t[1]);
                                c.Globals.pushMixStreamName = v.default.getStreamName(
                                    t[0]);
                                var r = void 0;
                                r = '' === c.Globals.rtcTestHost
                                    ? c.HOST.RTC_HOST
                                    : c.Globals.rtcTestHost;
                                var s = c.HOST.PROTOCOL + r;
                                s += ':' + c.HOST.RTC_PORT +
                                    '/', s += 'mix_control?v=' + c.HOST.RTC_VER;
                                for (var n in i) if (i.hasOwnProperty(
                                        n)) switch (n) {
                                    case'wsHost':
                                    case'nodeaddr':
                                        s += '&' + n + '=' + i[n];
                                }
                                if (i.nodeaddr) {
                                    var o = i.nodeaddr, a = o.indexOf(':');
                                    this.dispatchIP = -1 === a ? o : o.substr(0,
                                        a);
                                }
                                return s;
                            },
                        },
                        {
                            key: 'isStartRTCServerRetryTimer',
                            value: function() {
                                return ++this.rtcServerRetryCount <
                                    this.RTC_SERVER_RETRY_LIMIT &&
                                    (y.default.log('[' +
                                        this.rtcServerRetryCount +
                                        ']rePostRTCServer after ' +
                                        this.RTC_SERVER_RETRY_TIMER_TIME + 'ms',
                                        u.LOG.PUSH), this.rtcServerRetryTimer = window.setTimeout(
                                        this.rePostRTCServer.bind(this),
                                        this.RTC_SERVER_RETRY_TIMER_TIME), !0);
                            },
                        },
                        {
                            key: 'isStartRTCServerRepeatTimer',
                            value: function() {
                                return ++this.rtcRepeatCount <
                                    this.RTC_REPEAT_COUNT_LIMIT &&
                                    (y.default.log('[' + this.rtcRepeatCount +
                                        ']forbidden repeat after ' +
                                        this.RTC_SERVER_RETRY_TIMER_TIME + 'ms',
                                        u.LOG.PUSH), this.rtcServerRetryTimer = window.setTimeout(
                                        this.rePostRTCServer.bind(this),
                                        this.RTC_SERVER_RETRY_TIMER_TIME), !0);
                            },
                        },
                        {
                            key: 'rePostRTCServer',
                            value: function() {
                                this.postRTCServer(this.rtcSDP,
                                    this.rtcServerHeaders);
                            },
                        },
                        {
                            key: 'postRTCServer',
                            value: function(e, t) {
                                if (this.destroyRTCServerRetryTimer(
                                        !1), !this.quit('postRTCServer')) {
                                    this.pushUrl = this.getAvailablePushUrl(), this.rtcServerXHR ||
                                    (this.rtcServerXHR = new T.default(
                                        this.postRTCServerSuccess.bind(this),
                                        this.postRTCServerFailed.bind(this)));
                                    var i = {};
                                    i[u.XHR.HEADERS] = t, this.rtcServerXHR.start(
                                        this.pushUrl, e, i);
                                }
                            },
                        },
                        {
                            key: 'postRTCServerSuccess',
                            value: function(e, t) {
                                if (!this.quit('postRTCServerSuccess')) {
                                    var i = '';
                                    if (!e || t !== u.XHR.SUCCESS) return i = e
                                        ? 'postRTCServer response status: ' + t
                                        : 'postRTCServer response is null', void this.dispatchEvent(
                                        l.PushMessage.RTC_SERVER_ERROR, t, i);
                                    var r = void 0, s = void 0;
                                    try {
                                        r = JSON.parse(e).sdp, s = r.replace(
                                            /;;/g, '\r\n');
                                    } catch (e) {
                                        return i = 'parse sdp response failed', void this.dispatchEvent(
                                            l.PushMessage.RTC_SERVER_ERROR,
                                            u.RSP.ERROR, i);
                                    }
                                    var n = s;
                                    if (this.config.media.audioBitrate > 0 &&
                                        (n = g.default.setBandwidth(s, 'audio',
                                            this.config.media.audioBitrate)), this.config.media.videoBitrate >
                                        0 && (n = this.config.media.isBrControl
                                            ? g.default.bitrateControl(n, {
                                                max: this.config.media.videoBitrate,
                                                start: this.config.media.videoBitrate,
                                                min: Math.floor(this.config.media.videoBitrate *
                                                    this.config.media.brFactor),
                                            })
                                            : g.default.setBandwidth(n, 'video',
                                                this.config.media.videoBitrate)), this.config.media.isAudioCBR &&
                                        (n = g.default.bitrateConstant(n,
                                            'audio')), this.config.media.isVideoCBR &&
                                        (n = g.default.bitrateConstant(n,
                                            'video')), y.default.log('answer SDP: \n' +
                                            n,
                                            u.LOG.PUSH), !this.peer) return void y.default.warn(
                                        'peer is undefined', u.LOG.PUSH);
                                    if (this.destroyRTCServerRetryTimer(
                                            !0), this.peer.setRemoteDescription(
                                            {type: 'answer', sdp: n},
                                            function() {
                                                y.default.debug(
                                                    'set remote description success',
                                                    u.LOG.PUSH);
                                            }, function(e) {
                                                y.default.warn('set remote description failed[' +
                                                    e.toString() + ']',
                                                    u.LOG.PUSH);
                                            }), c.Globals.pushMixUrl = this.getMixControlUrl(), this.dispatchEvent(
                                            l.PushMessage.RTC_SERVER_SUCCESS,
                                            u.RSP.SUCCESS,
                                            'publish success'), this.isMix &&
                                        0 === this.userRole) {
                                        this.mixManager ||
                                        (this.mixManager = new S.default(
                                            this)), this.mixManager.start(
                                            this.config);
                                        var o = this.config.mix || {};
                                        o.userId = this.config.userId, o.roomId = this.config.roomId, o.dispatchIP = this.dispatchIP, o.isPushCreate = !0, this.isFirstMixCreate
                                            ? (this.isFirstMixCreate = !1, this.mixCreateCommand(
                                                o))
                                            : y.default.log(
                                                'mix create already done',
                                                u.LOG.PUSH), 'true' ===
                                        String(this.config.isMixCheck) &&
                                        this.mixManager &&
                                        this.mixManager.startStatusTimer();
                                    }
                                }
                            },
                        },
                        {
                            key: 'postRTCServerFailed',
                            value: function(e, t) {
                                if (!this.quit('postRTCServerFailed')) {
                                    this.destroyRTCServerRetryTimer(!1), e ||
                                    (e = {});
                                    var i = '', r = parseInt(e[u.XHR.STATUS]);
                                    if (!isNaN(r)) {
                                        if (400 ===
                                            r) i = 'request error by error url or http headers or body'; else if (403 ===
                                            r) i = 'authentication faied, forbidden access'; else if (409 ===
                                            r) {if (i = 'stream in publishing, forbidden repeat', this.isStartRTCServerRepeatTimer()) return;} else 500 ===
                                        r ? i = 'nginx internal error' : 590 ===
                                            r &&
                                            (i = 'linkers beyond room limit');
                                        if ('' !==
                                            i) return void this.dispatchEvent(
                                            l.PushMessage.RTC_SERVER_ERROR, r,
                                            i);
                                        y.default.log('publish status[' + r +
                                            ']', u.LOG.PUSH);
                                    }
                                    this.isStartRTCServerRetryTimer() ||
                                    (this.stop(), this.dispatchEvent(
                                        l.PushMessage.RTC_SERVER_ERROR,
                                        u.RSP.ERROR,
                                        'publish retry limit error'));
                                }
                            },
                        },
                        {
                            key: 'mixCreateCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixCreate(e);
                            },
                        },
                        {
                            key: 'mixModifyCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixModify(e);
                            },
                        },
                        {
                            key: 'mixStatusCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixStaus(e);
                            },
                        },
                        {
                            key: 'mixDestroyCommand',
                            value: function(e) {
                                this.isMix && this.mixManager &&
                                1 !== this.userRole &&
                                this.mixManager.mixDestroy(e);
                            },
                        },
                        {
                            key: 'getPeerStatus',
                            value: function() {
                                arguments.length > 0 &&
                                void 0 !== arguments[0] && !arguments[0]
                                    ? this.getStater &&
                                    (this.getStater.stop(), this.getStater = void 0)
                                    : (this.getStater ||
                                    (this.getStater = new d.default(
                                        this.peer)), this.getStater.start());
                            },
                        }]), t;
                }(R.default);
            t.default = C;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(13), l = i(0), c = i(2), h = i(4), d = i(82), f = r(d),
                v = i(84), p = r(v), g = i(85), m = r(g), y = i(5), _ = r(y),
                S = i(1), E = r(S), R = i(80), b = r(R), T = i(3), C = r(T),
                O = function(e) {
                    function t() {
                        s(this, t);
                        var e = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return e.isStop = !0, e.pushUrls = [], e.config = {}, e.mixConfig = {}, e.mediaConfig = {}, e.audioTracks = [], e.videoTracks = [], e.localStream = void 0, e.isEndRestart = !1, e.cameraConstraint = void 0, e.rtcPeer = void 0, e.getScreener = void 0, e.constaintParser = void 0, e.localVideoPlayer = void 0, e;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !!this.isStop &&
                                    (E.default.debug('[' + e + ']server stop',
                                        l.LOG.PUSH), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function(e) {
                                this.isStop = !1, this.config = e ||
                                    {}, this.parsePushConfig(), this.mixConfig = this.config.mixConfig ||
                                    {}, this.createLocalVideoPlayer(), void 0 !==
                                this.config.pushUrl
                                    ? this.pushUrls = this.parsePushUrl(
                                        c.Globals.rtcHosts)
                                    : this.pushUrls = this.assemblePushUrl(
                                        c.Globals.rtcHosts), this.publish();
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.reset(), this.destroyLocalVideoPlayer(), this.destroyLocalStream(
                                    this.localStream);
                            },
                        },
                        {
                            key: 'restart',
                            value: function() {
                                this.stop(), this.start(this.config);
                            },
                        },
                        {
                            key: 'stopAudio',
                            value: function() {
                                this.audioTracks && this.audioTracks.length &&
                                this.audioTracks.forEach(function(e) {e.stop();});
                            },
                        },
                        {
                            key: 'stopVideo',
                            value: function() {
                                this.videoTracks && this.videoTracks.length &&
                                this.videoTracks.forEach(function(e) {e.stop();});
                            },
                        },
                        {
                            key: 'reset',
                            value: function() {
                                this.isStop = !0, this.rtcPeer &&
                                (this.rtcPeer.stop(), this.rtcPeer = void 0), this.getScreener &&
                                (this.getScreener.stop(), this.getScreener = void 0), this.constaintParser &&
                                (this.constaintParser = void 0), this.cameraConstraint = void 0;
                            },
                        },
                        {
                            key: 'resetMediaConfig',
                            value: function() {this.mediaConfig.isAudio = !0, this.mediaConfig.isVideo = !0, this.mediaConfig.landscape = !0, this.mediaConfig.brFactor = .6, this.mediaConfig.audioBitrate = 0, this.mediaConfig.videoBitrate = 0, this.mediaConfig.isBrControl = !1, this.mediaConfig.isAudioCBR = !1, this.mediaConfig.isVideoCBR = !1;},
                        },
                        {
                            key: 'createLocalVideoPlayer',
                            value: function() {
                                this.localVideoPlayer ||
                                (this.localVideoPlayer = new m.default(
                                    this.config.playerId), this.localVideoPlayer.listenTo(
                                    u.PushEvent.VIDEO_EVENT,
                                    this.onLocalVideoEventHandler.bind(
                                        this))), this.localVideoPlayer.start();
                            },
                        },
                        {
                            key: 'destroyLocalVideoPlayer',
                            value: function() {
                                this.localVideoPlayer &&
                                (this.localVideoPlayer.removeToAll(), this.localVideoPlayer.stop(), this.localVideoPlayer = void 0);
                            },
                        },
                        {
                            key: 'onLocalVideoEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.MESSAGE];
                                    switch (t) {
                                        case u.PushMessage.PLAY_METADATA:
                                            this.dispatchEvent(
                                                u.PushMessage.PLAY_METADATA, i,
                                                r);
                                            break;
                                        case u.PushMessage.PLAY_ERROR:
                                            this.dispatchEvent(
                                                u.PushMessage.PLAY_ERROR, i, r);
                                    }
                                }
                            },
                        },
                        {
                            key: 'parsePushConfig',
                            value: function() {
                                this.isEndRestart = 'true' ===
                                    String(this.config.isEndRestart);
                            },
                        },
                        {
                            key: 'parsePushUrl',
                            value: function(e) {
                                var t = this.config.pushUrl, i = t.split('?'),
                                    r = _.default.getQueryParams(i[1]),
                                    s = _.default.getStreamName(i[0]),
                                    n = void 0;
                                n = '' === c.Globals.rtcTestHost
                                    ? c.HOST.RTC_HOST
                                    : c.Globals.rtcTestHost;
                                var o = c.HOST.PROTOCOL + n;
                                o += ':' + c.HOST.RTC_PORT + '/' +
                                    s, o += '?v=' + parseInt(r.v) +
                                    '&type=publish';
                                for (var a in r) if (r.hasOwnProperty(
                                        a)) switch (a) {
                                    case'host':
                                    case'wsHost':
                                    case'proto':
                                        o += '&' + a + '=' + r[a];
                                }
                                var u = [];
                                if (!r.nodeaddr) for (var l = o, h = 0; h <
                                e.length; h++) l += '&nodeaddr=' + e[h] + ':' +
                                    c.HOST.RTC_TRAN_PORT, u.push(l), l = o;
                                return u.length || u.push(o), u;
                            },
                        },
                        {
                            key: 'assemblePushUrl',
                            value: function(e) {
                                var t = void 0;
                                t = '' === c.Globals.rtcTestHost
                                    ? c.HOST.RTC_HOST
                                    : c.Globals.rtcTestHost;
                                var i = c.HOST.PROTOCOL + t;
                                if (i += ':' + c.HOST.RTC_PORT + '/' +
                                        this.config.streamName, i += '?v=' +
                                        c.HOST.RTC_VER +
                                        '&type=publish&wsHost=' +
                                        c.Globals.host, void 0 !==
                                    this.config.proto) {
                                    var r = parseInt(this.config.proto);
                                    isNaN(r) || (i += '&proto=' + r);
                                }
                                for (var s = [], n = i, o = 0; o <
                                e.length; o++) n += '&nodeaddr=' + e[o] + ':' +
                                    c.HOST.RTC_TRAN_PORT, s.push(n), n = i;
                                return s.length || s.push(i), s;
                            },
                        },
                        {
                            key: 'parseCameraConstraint',
                            value: function() {
                                var e = this.config.camConfig || {};
                                e.audio ||
                                (this.mediaConfig.isAudio = !1), e.video ||
                                (this.mediaConfig.isVideo = !1), this.mediaConfig.isAudio ||
                                this.mediaConfig.isVideo || E.default.warn(
                                    'error camera config with no audio and video',
                                    l.LOG.PUSH), this.constaintParser ||
                                (this.constaintParser = new b.default), e.mediaConfig = this.mediaConfig, this.cameraConstraint = this.constaintParser.parse(
                                    e), this.mediaConfig = this.cameraConstraint.mediaConfig, delete this.cameraConstraint.mediaConfig, E.default.log(
                                    JSON.stringify(this.cameraConstraint),
                                    l.LOG.PUSH);
                            },
                        },
                        {
                            key: 'publish',
                            value: function() {
                                if (this.resetMediaConfig(), this.parseCameraConstraint(), 'true' ===
                                    String(
                                        this.config.isScreen)) return this.getScreener ||
                                (this.getScreener = new p.default(
                                    this)), void this.getScreener.start(
                                    this.gotStream.bind(this),
                                    this.gotStreamError.bind(this));
                                window.navigator &&
                                window.navigator.mediaDevices &&
                                window.navigator.mediaDevices.getUserMedia
                                    ? window.navigator.mediaDevices.getUserMedia(
                                    this.cameraConstraint).
                                        then(this.gotStream.bind(this)).
                                        catch(this.gotStreamError.bind(this))
                                    : E.default.error(
                                    'not support getUserMedia api', l.LOG.PUSH);
                            },
                        },
                        {
                            key: 'destroyLocalStream',
                            value: function(e) {
                                if (e) try {
                                    for (var t = e.getTracks(), i = 0; i <
                                    t.length; i++) t[i].stop();
                                } catch (e) {}
                                this.audioTracks = [], this.videoTracks = [], this.localStream = void 0;
                            },
                        },
                        {
                            key: 'onTrackEndedHandler',
                            value: function(e) {
                                if (!this.quit('onTrackEndedHandler')) {
                                    var t = '', i = '', r = '';
                                    e && e.currentTarget &&
                                    (t = e.currentTarget.id, i = e.currentTarget.kind, r = e.currentTarget.label), '' !==
                                    i && this.dispatchEvent(
                                        u.PushMessage.STREAM_TRACK,
                                        l.RSP.SUCCESS, 'stream track ended', {
                                            event: 'ended',
                                            kind: i,
                                            id: t,
                                            label: r,
                                        }), this.isEndRestart && this.restart();
                                }
                            },
                        },
                        {
                            key: 'listenStreamTrack',
                            value: function(e) {
                                var t = this;
                                if (e) {
                                    var i = '', r = '', s = '';
                                    this.audioTracks = e.getAudioTracks(), this.videoTracks = e.getVideoTracks(), this.audioTracks &&
                                    this.audioTracks.length &&
                                    this.audioTracks.forEach(function(e) {
                                        e && (i = e.id || '', r = e.label ||
                                            '', s = '' !== r
                                            ? r
                                            : i, E.default.log('using audio device[' +
                                            s + ']',
                                            l.LOG.PUSH), e.onended = t.onTrackEndedHandler.bind(
                                            t));
                                    }), this.videoTracks &&
                                    this.videoTracks.length &&
                                    this.videoTracks.forEach(function(e) {
                                        e && (i = e.id || '', r = e.label ||
                                            '', s = '' !== r
                                            ? r
                                            : i, E.default.log('using video device[' +
                                            s + ']',
                                            l.LOG.PUSH), e.onended = t.onTrackEndedHandler.bind(
                                            t));
                                    });
                                }
                            },
                        },
                        {
                            key: 'gotStreamError',
                            value: function(e) {
                                this.quit('gotStreamError') ||
                                (E.default.error(e.toString(),
                                    l.LOG.PUSH), this.dispatchEvent(
                                    u.PushMessage.CAMERA_ERROR, l.RSP.ERROR,
                                    e.toString()));
                            },
                        },
                        {
                            key: 'gotStream',
                            value: function(e) {
                                if (this.quit(
                                        'gotStream')) return void this.destroyLocalStream(
                                    e);
                                if (void 0 !== this.config.rotation) {
                                    var t = parseInt(this.config.rotation);
                                    _.default.setRotationDegreee(this.playerId,
                                        t);
                                }
                                if (this.localStream = e, this.listenStreamTrack(
                                        e), !this.localVideoPlayer) return this.destroyLocalStream(
                                    e), void E.default.warn(
                                    'local videoPlayer is null', l.LOG.PUSH);
                                this.localVideoPlayer.play(
                                    e), this.createRTCPeerServer();
                            },
                        },
                        {
                            key: 'createRTCPeerServer',
                            value: function() {
                                var e = this.config || {};
                                e.mix = this.mixConfig, e.media = this.mediaConfig, e.pushUrls = this.pushUrls, this.rtcPeer ||
                                (this.rtcPeer = new f.default, this.rtcPeer.listenTo(
                                    u.PushEvent.PEER_EVENT,
                                    this.onPeerEventHandler.bind(
                                        this)), this.rtcPeer.listenTo(
                                    h.Event.MIX_EVENT,
                                    this.onPeerMixEventHandler.bind(
                                        this))), this.rtcPeer.start(
                                    this.localStream, e);
                            },
                        },
                        {
                            key: 'onPeerEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.MESSAGE];
                                    switch (t) {
                                        case u.PushMessage.RTC_SERVER_ERROR:
                                        case u.PushMessage.RTC_SERVER_SUCCESS:
                                        case u.PushMessage.MIX_COMMAND:
                                            this.dispatchEvent(t, i, r);
                                    }
                                }
                            },
                        },
                        {
                            key: 'onPeerMixEventHandler',
                            value: function(e) {
                                if (e) {
                                    var t = e[l.RSP.TYPE], i = e[l.RSP.CODE],
                                        r = e[l.RSP.DATA] || {},
                                        s = e[l.RSP.MESSAGE];
                                    if (t === l.XHR.STATUS && 404 ===
                                        parseInt(i)) {
                                        var n = this.mixConfig || {};
                                        return n.isPushCreate = !0, n.userId = this.config.userId, n.roomId = this.config.roomId, void this.mixCreateCommand(
                                            n);
                                    }
                                    this.dispatchEvent(t, i, s, r);
                                }
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i, r) {
                                this.quit('dispatchEvent') ||
                                this.trigger(u.PushEvent.PUSH_EVENT,
                                    {type: e, code: t, message: i, data: r});
                            },
                        },
                        {
                            key: 'mixCreateCommand',
                            value: function(e) {
                                this.rtcPeer && this.rtcPeer.mixCreateCommand(e);
                            },
                        },
                        {
                            key: 'mixModifyCommand',
                            value: function(e) {
                                this.rtcPeer && this.rtcPeer.mixModifyCommand(e);
                            },
                        },
                        {
                            key: 'mixStatusCommand',
                            value: function(e) {
                                this.rtcPeer && this.rtcPeer.mixStatusCommand(e);
                            },
                        },
                        {
                            key: 'mixDestroyCommand',
                            value: function(e) {
                                this.rtcPeer &&
                                this.rtcPeer.mixDestroyCommand(e);
                            },
                        },
                        {
                            key: 'getPeerStatus',
                            value: function() {
                                var e = !(arguments.length > 0 && void 0 !==
                                    arguments[0]) || arguments[0];
                                this.rtcPeer && this.rtcPeer.getPeerStatus(e);
                            },
                        },
                        {
                            key: 'userId',
                            get: function() {
                                return this.config.userId || void 0;
                            },
                        },
                        {
                            key: 'playerId',
                            get: function() {
                                return this.config.playerId || void 0;
                            },
                        }]), t;
                }(C.default);
            t.default = O;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var n = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), o = i(0), a = i(1), u = r(a), l = i(89), c = r(l),
                h = function() {
                    function e(t) {
                        s(this,
                            e), this.handler = t, this.isStop = !0, this.screener = void 0;
                    }
                    
                    return n(e, [
                        {
                            key: 'start',
                            value: function(e, t) {
                                var i = this;
                                this.isStop = !1, this.screener ||
                                (this.screener = new c.default), this.screener.getScreenId(
                                    function(r, s, n) {
                                        return i.isStop
                                            ? (u.default.warn(
                                                '[getScreenId], service stop',
                                                o.LOG.SCREEN), void i.stop())
                                            : (r &&
                                            u.default.warn(r, o.LOG.SCREEN), s
                                                ? n
                                                    ? (n.audio ||
                                                    (i.handler.mediaConfig.isAudio = !1), i.handler.mediaConfig.isVideo = !0, void window.navigator.mediaDevices.getUserMedia(
                                                        n).then(e).catch(t))
                                                    : void u.default.warn(
                                                        'no screen_constraints!',
                                                        o.LOG.SCREEN)
                                                : void u.default.warn(
                                                    'no sourceId!',
                                                    o.LOG.SCREEN));
                                    });
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isStop = !0, this.screener &&
                                (this.screener = void 0);
                            },
                        }]), e;
                }();
            t.default = h;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            function s(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            function n(e, t) {
                if (!e) throw new ReferenceError(
                    'this hasn\'t been initialised - super() hasn\'t been called');
                return !t || 'object' != typeof t && 'function' != typeof t
                    ? e
                    : t;
            }
            
            function o(e, t) {
                if ('function' != typeof t && null !==
                    t) throw new TypeError('Super expression must either be null or a function, not ' +
                    typeof t);
                e.prototype = Object.create(t && t.prototype, {
                    constructor: {
                        value: e,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0,
                    },
                }), t && (Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, t)
                    : e.__proto__ = t);
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var a = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), u = i(0), l = i(13), c = i(1), h = r(c), d = i(3), f = r(d),
                v = function(e) {
                    function t(e) {
                        s(this, t);
                        var i = n(this,
                            (t.__proto__ || Object.getPrototypeOf(t)).call(
                                this));
                        return i.isActive = !1, i.playerId = e, i;
                    }
                    
                    return o(t, e), a(t, [
                        {
                            key: 'quit',
                            value: function(e) {
                                return !this.isActive &&
                                    (h.default.debug('[' + e + ']server stop',
                                        u.LOG.PUSH), !0);
                            },
                        },
                        {
                            key: 'start',
                            value: function() {
                                if (this.isActive = !0, this.video = document.getElementById(
                                        this.playerId), !this.video) return void h.default.warn('add local video[' +
                                    this.playerId + '] is null', u.LOG.PUSH);
                                this.video.volume = 0, this.video.addEventListener(
                                    'pause', this.localPause.bind(
                                        this)), this.video.addEventListener(
                                    'error', this.localError.bind(
                                        this)), this.video.addEventListener(
                                    'ended', this.localEnded.bind(
                                        this)), this.video.addEventListener(
                                    'playing', this.localPlay.bind(
                                        this)), this.video.addEventListener(
                                    'waiting', this.localWaiting.bind(
                                        this)), this.video.addEventListener(
                                    'loadedmetadata',
                                    this.localMetadata.bind(this));
                            },
                        },
                        {
                            key: 'stop',
                            value: function() {
                                this.isActive = !1, this.video &&
                                (this.video.removeEventListener('pause',
                                    this.localPause.bind(
                                        this)), this.video.removeEventListener(
                                    'error', this.localError.bind(
                                        this)), this.video.removeEventListener(
                                    'ended', this.localEnded.bind(
                                        this)), this.video.removeEventListener(
                                    'playing', this.localPlay.bind(
                                        this)), this.video.removeEventListener(
                                    'waiting', this.localWaiting.bind(
                                        this)), this.video.removeEventListener(
                                    'loadedmetadata', this.localMetadata.bind(
                                        this)), this.video = void 0);
                            },
                        },
                        {
                            key: 'play',
                            value: function(e) {
                                this.video && (this.video.srcObject = e);
                            },
                        },
                        {
                            key: 'localEnded',
                            value: function() {
                                this.quit('localEnded') ||
                                h.default.log('video ended', u.LOG.PUSH);
                            },
                        },
                        {
                            key: 'localPause',
                            value: function() {
                                this.quit('localPause') ||
                                h.default.log('video pause', u.LOG.PUSH);
                            },
                        },
                        {
                            key: 'localPlay',
                            value: function() {
                                this.quit('localPlay') ||
                                h.default.log('video playing', u.LOG.PUSH);
                            },
                        },
                        {
                            key: 'localWaiting',
                            value: function() {
                                this.quit('localWaiting') ||
                                h.default.log('video waiting', u.LOG.PUSH);
                            },
                        },
                        {
                            key: 'localError',
                            value: function(e) {
                                if (!this.quit('localError')) {
                                    var t = void 0;
                                    e && e.currentTarget &&
                                    (t = e.currentTarget.error);
                                    var i = 0, r = '';
                                    t && (i = t.code ||
                                        0, r = t.message, h.default.error('localError: [' +
                                        i + '][' + r + ']',
                                        u.LOG.PUSH)), this.dispatchEvent(
                                        l.PushMessage.PLAY_ERROR, i, r);
                                }
                            },
                        },
                        {
                            key: 'localMetadata',
                            value: function(e) {
                                if (!this.quit('localMetadata')) {
                                    var t = -1, i = -1;
                                    if (e && e.target &&
                                        (t = e.target.videoWidth, i = e.target.videoHeight), h.default.log('localMetadata [' +
                                            t + 'x' + i + ']', u.LOG.PUSH), e &&
                                        e.target) try {e.target.play();} catch (e) {}
                                    this.dispatchEvent(
                                        l.PushMessage.PLAY_METADATA,
                                        u.RSP.SUCCESS,
                                        JSON.stringify({width: t, height: i}));
                                }
                            },
                        },
                        {
                            key: 'dispatchEvent',
                            value: function(e, t, i) {
                                this.quit('dispatchEvent') ||
                                this.trigger(l.PushEvent.VIDEO_EVENT,
                                    {type: e, code: t, message: i});
                            },
                        }]), t;
                }(f.default);
            t.default = v;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {
                    r(this,
                        e), this._cameras = [], this._cameraIndex = 0, this._aspectIndex = 0, this._logCallback = void 0, this._mediaStream = void 0, this._customAspect = void 0, this.ASPECT = [
                        {
                            width: 240,
                            height: 180,
                            label: '180P_1',
                        },
                        {
                            width: 320,
                            height: 180,
                            label: '180P_2',
                        },
                        {
                            width: 480,
                            height: 360,
                            label: '360P_1',
                        },
                        {
                            width: 640,
                            height: 360,
                            label: '360P_2',
                        },
                        {
                            width: 640,
                            height: 480,
                            label: '480P_1',
                        },
                        {
                            width: 848,
                            height: 480,
                            label: '480P_2',
                        },
                        {
                            width: 720,
                            height: 540,
                            label: '540P_1',
                        },
                        {
                            width: 960,
                            height: 540,
                            label: '540P_2',
                        },
                        {
                            width: 960,
                            height: 720,
                            label: '720P_1',
                        },
                        {
                            width: 1280,
                            height: 720,
                            label: '720P_2',
                        },
                        {
                            width: 1440,
                            height: 1080,
                            label: '1080P_1',
                        },
                        {
                            width: 1920,
                            height: 1080,
                            label: '1080P_2',
                        }];
                }
                
                return s(e, [
                    {
                        key: 'detect',
                        value: function(e) {
                            var t = this;
                            this._cameraIndex = 0, this._aspectIndex = 0, this._destroyTimer(), this._getMediaDevices(
                                function(i) {
                                    t._cameras = i, t._cameras.length && (e
                                        ? (t._customAspect = e, t._aspectTest(e,
                                            t._cameras[0]))
                                        : (t._customAspect = void 0, t._aspectTest(
                                            t.ASPECT[0], t._cameras[0])));
                                });
                        },
                    },
                    {
                        key: 'setLogCallback',
                        value: function(e) {this._logCallback = e;},
                    },
                    {
                        key: '_trace',
                        value: function(e) {
                            console && console.log &&
                            console.log(e), this._logCallback &&
                            this._logCallback(e);
                        },
                    },
                    {
                        key: '_getMediaDevices',
                        value: function(e) {
                            var t = void 0, i = [],
                                r = window.navigator.mediaDevices;
                            r && r.enumerateDevices ? r.enumerateDevices().
                                then(function(r) {
                                    for (var s in r) if (r.hasOwnProperty(s)) {
                                        var n = {};
                                        t = r[s], n.kind = t.kind, n.label = t.label, n.groupId = t.groupId, n.deviceId = t.deviceId, '' ===
                                        n.label &&
                                        (n.label = n.deviceId), 'videoinput' ===
                                        t.kind && i.push(n);
                                    }
                                    e && e(i);
                                }).
                                catch(function() {e && e(i);}) : e && e(i);
                        },
                    },
                    {
                        key: '_aspectTest',
                        value: function(e, t) {
                            var i = this;
                            this._mediaStream && this._mediaStream.getTracks().
                                forEach(function(e) {e.stop();});
                            var r = {
                                audio: !1,
                                video: {
                                    deviceId: t.deviceId
                                        ? {exact: t.deviceId}
                                        : void 0,
                                    width: {exact: e.width},
                                    height: {exact: e.height},
                                },
                            }, s = e.width + 'x' + e.height;
                            navigator.mediaDevices.getUserMedia(r).
                                then(function(r) {
                                    i._mediaStream = r, i._trace('trying ' + s +
                                        '[' + e.label + '] on [' + t.label +
                                        '] successed'), i._createTimer();
                                }).
                                catch(function(r) {
                                    i._trace('trying ' + s + '[' + e.label +
                                        '] on [' + t.label + '] failed: ' +
                                        r.toString()), i._createTimer();
                                });
                        },
                    },
                    {
                        key: '_createTimer',
                        value: function() {
                            this._destroyTimer(), this._customAspect
                                ? ++this._cameraIndex < this._cameras.length &&
                                (this._timer = window.setTimeout(
                                    this._onTimerHandler.bind(this), 200))
                                : (this._aspectIndex++, this._aspectIndex <
                                this.ASPECT.length
                                    ? this._cameraIndex <
                                    this._cameras.length &&
                                    (this._timer = window.setTimeout(
                                        this._onTimerHandler.bind(this), 200))
                                    : ++this._cameraIndex <
                                    this._cameras.length &&
                                    (this._aspectIndex = 0, this._timer = window.setTimeout(
                                        this._onTimerHandler.bind(this), 200)));
                        },
                    },
                    {
                        key: '_destroyTimer',
                        value: function() {
                            this._timer && (window.clearTimeout(
                                this._timer), this._timer = void 0), this._mediaStream &&
                            this._mediaStream.getTracks().
                                forEach(function(e) {e.stop();});
                        },
                    },
                    {
                        key: '_onTimerHandler',
                        value: function() {
                            this._customAspect
                                ? this._aspectTest(this._customAspect,
                                this._cameras[this._cameraIndex])
                                : this._aspectTest(
                                this.ASPECT[this._aspectIndex],
                                this._cameras[this._cameraIndex]);
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {
                    r(this,
                        e), this.notifys = {}, this.enableNotification = !!Notification;
                }
                
                return s(e, [
                    {
                        key: 'notify',
                        value: function(
                            e, t) {
                            if (this.enableNotification) {
                                var i = Math.random().
                                    toFixed(8).
                                    substring(2), r = window.Notification ||
                                    window.mozNotification ||
                                    window.webkitNotification;
                                new r(e, {
                                    tag: i,
                                    body: t.body || '',
                                    icon: '../images/avatar.jpg',
                                    requireInteraction: 'true' ===
                                    String(t.isFixed),
                                });
                            }
                        },
                    },
                    {
                        key: 'close',
                        value: function() {this.notifys = {};},
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                    function e(e, t) {
                        for (var i = 0; i < t.length; i++) {
                            var r = t[i];
                            r.enumerable = r.enumerable ||
                                !1, r.configurable = !0, 'value' in r &&
                            (r.writable = !0), Object.defineProperty(e, r.key, r);
                        }
                    }
                    
                    return function(t, i, r) {
                        return i && e(t.prototype, i), r && e(t, r), t;
                    };
                }(), n = i(1),
                o = function(e) {return e && e.__esModule ? e : {default: e};}(
                    n), a = function() {
                    function e() {r(this, e);}
                    
                    return s(e, null, [
                        {
                            key: 'setBandwidth',
                            value: function(e, t, i) {
                                var r = e.split('\n');
                                if (r.length < 1) return o.default.warn(
                                    'sdp is empty', 'SDP'), e;
                                for (var s = -1, n = 0; n < r.length; n++) if (0 ===
                                    r[n].indexOf('m=' + t)) {
                                    s = n;
                                    break;
                                }
                                if (-1 ===
                                    s) return o.default.warn('not found the m line for ' +
                                    t, 'SDP'), r.join('\n');
                                for (o.default.debug('found the m line for ' + t +
                                    ' at ' + s + ' line', 'SDP'), s++; 0 ===
                                     r[s].indexOf("i=") ||
                                     0 === r[s].indexOf("c=");) s++;
                                if (0 === r[s].indexOf(
                                        'b=')) return o.default.debug('replace b line at line ' +
                                    s, 'SDP'), r[s] = 'b=AS:' + i, r.join('\n');
                                o.default.debug('add new b line before line ' + s,
                                    'SDP');
                                var a = r.slice(0, s);
                                return a.push('b=AS:' + i), a = a.concat(
                                    r.slice(s, s.length)), a.join('\n');
                            },
                        },
                        {
                            key: 'bitrateConstant',
                            value: function(e, t) {
                                var i = e.split('\n');
                                if (i.length < 1) return o.default.warn(
                                    'sdp is empty', 'SDP'), e;
                                for (var r = -1, s = 'video' === t
                                    ? 'H264'
                                    : 'opus', n = 0; n < i.length; n++) if (0 ===
                                    i[n].indexOf('a=rtpmap') &&
                                    -1 !== i[n].indexOf(s)) {
                                    r = n;
                                    break;
                                }
                                if (-1 === r) return o.default.warn(
                                    'not found the rtpmap line for a=rtpmap',
                                    'SDP'), i.join('\n');
                                o.default.debug('found the rtpmap line for a=rtpmap at ' +
                                    r + ' line', 'SDP');
                                var a = 'video' === t ? 100 : 111;
                                try {
                                    var u = i[r].split(':'), l = u[1].split(' ');
                                    l[0];
                                } catch (e) {a = 'video' === t ? 100 : 111;}
                                r++;
                                for (; 0 === i[r].indexOf("a=rtcp-fb");) r++;
                                if (0 === i[r].indexOf(
                                        'a=fmtp')) return o.default.debug('replace fmtp line at line ' +
                                    r, 'SDP'), -1 !== i[r].indexOf('useinbandfec=')
                                    ? (i[r] = i[r].replace('useinbandfec=0',
                                        'cbr=1'), i[r] = i[r].replace(
                                        'useinbandfec=1', 'cbr=1'))
                                    : i[r] += ';cbr=1', i.join('\n');
                                o.default.debug('add new fmtp line before line ' +
                                    r, 'SDP');
                                var c = i.slice(0, r);
                                return 'audio' === t ? c.push('a=fmtp:' + a +
                                    ' minptime=10;cbr=1') : 'video' === t &&
                                    c.push('a=fmtp:' + a +
                                        ' profile-level-id=42e01f;packetization-mode=1;cbr=1'), c = c.concat(
                                    i.slice(r, r.length)), c.join('\n');
                            },
                        },
                        {
                            key: 'bitrateControl',
                            value: function(e, t) {
                                var i = e.split('\n');
                                if (i.length < 1) return o.default.warn(
                                    'sdp is empty', 'SDP'), e;
                                for (var r = -1, s = 0; s < i.length; s++) if (0 ===
                                    i[s].indexOf('a=rtpmap') &&
                                    -1 !== i[s].indexOf('H264')) {
                                    r = s;
                                    break;
                                }
                                if (-1 === r) return o.default.warn(
                                    'not found the rtpmap line for a=rtpmap',
                                    'SDP'), i.join('\n');
                                o.default.debug('found the rtpmap line for a=rtpmap at ' +
                                    r + ' line', 'SDP');
                                var n = 100;
                                try {
                                    var a = i[r].split(':'), u = a[1].split(' ');
                                    u[0];
                                } catch (e) {n = 100;}
                                r++;
                                for (; 0 === i[r].indexOf("a=rtcp-fb");) r++;
                                if (0 === i[r].indexOf(
                                        'a=fmtp')) return o.default.debug('replace fmtp line at line ' +
                                    r, 'SDP'), i[r] += ';x-google-min-bitrate=' +
                                    t.min + ';', i[r] += 'x-google-max-bitrate=' +
                                    t.max + ';', i[r] += 'x-google-start-bitrate=' +
                                    t.start, i.join('\n');
                                o.default.debug('add new fmtp line before line ' +
                                    r, 'SDP');
                                var l = i.slice(0, r), c = 'a=fmtp:' + n +
                                    ' profile-level-id=42e01f;packetization-mode=1';
                                return c += ';x-google-min-bitrate=' + t.min +
                                    ';', c += 'x-google-max-bitrate=' + t.max +
                                    ';', c += 'x-google-start-bitrate=' +
                                    t.start, l.push(c), l = l.concat(
                                    i.slice(r, r.length)), l.join('\n');
                            },
                        }]), e;
                }();
            t.default = a;
        }, function(e, t, i) {
            'use strict';
            
            function r(e, t) {
                if (!(e instanceof t)) throw new TypeError(
                    'Cannot call a class as a function');
            }
            
            Object.defineProperty(t, '__esModule', {value: !0});
            var s = function() {
                function e(e, t) {
                    for (var i = 0; i < t.length; i++) {
                        var r = t[i];
                        r.enumerable = r.enumerable ||
                            !1, r.configurable = !0, 'value' in r &&
                        (r.writable = !0), Object.defineProperty(e, r.key, r);
                    }
                }
                
                return function(t, i, r) {
                    return i && e(t.prototype, i), r && e(t, r), t;
                };
            }(), n = function() {
                function e() {
                    r(this,
                        e), this.iframe = void 0, window.getScreenConstraints = this.windowGetScreenConstraints.bind(
                        this), window.getChromeExtensionStatus = this.windowGetChromeExtensionStatus.bind(
                        this);
                }
                
                return s(e, [
                    {
                        key: 'getScreenerConstraints',
                        value: function(e, t) {
                            var i = {
                                audio: !1,
                                video: {
                                    mandatory: {
                                        chromeMediaSource: e
                                            ? 'screen'
                                            : 'desktop',
                                        maxWidth: window.screen.width > 1920
                                            ? window.screen.width
                                            : 1920,
                                        maxHeight: window.screen.height > 1080
                                            ? window.screen.height
                                            : 1080,
                                    }, optional: [],
                                },
                            };
                            return t &&
                            (i.video.mandatory.chromeMediaSourceId = t), i;
                        },
                    },
                    {
                        key: 'getScreenId',
                        value: function(e) {
                            function t(r) {
                                r.data && (r.data.chromeMediaSourceId &&
                                ('PermissionDeniedError' ===
                                r.data.chromeMediaSourceId
                                    ? e('permission-denied')
                                    : e(null, r.data.chromeMediaSourceId,
                                        i.getScreenerConstraints(null,
                                            r.data.chromeMediaSourceId))), r.data.chromeExtensionStatus &&
                                e(r.data.chromeExtensionStatus, null,
                                    i.getScreenerConstraints(
                                        r.data.chromeExtensionStatus)), window.removeEventListener(
                                    'message', t));
                            }
                            
                            if (navigator.mozGetUserMedia) return void e(null,
                                'firefox', {
                                    video: {
                                        mozMediaSource: 'window',
                                        mediaSource: 'window',
                                    },
                                });
                            var i = this;
                            window.addEventListener('message',
                                t), window.setTimeout(
                                this.postGetSourceIdMessage.bind(this), 100);
                        },
                    },
                    {
                        key: 'postGetSourceIdMessage',
                        value: function() {
                            return this.iframe
                                ? this.iframe.isLoaded
                                    ? void this.iframe.contentWindow.postMessage(
                                        {captureSourceId: !0}, '*')
                                    : void window.setTimeout(
                                        this.postGetSourceIdMessage.bind(this),
                                        100)
                                : void this.loadIFrame(
                                    this.postGetSourceIdMessage.bind(this));
                        },
                    },
                    {
                        key: 'windowGetScreenConstraints',
                        value: function(e) {
                            var t = this, i = function() {
                                t.getScreenId(function(t, i, r) {e(t, r.video);});
                            };
                            this.loadIFrame(i);
                        },
                    },
                    {
                        key: 'loadIFrame',
                        value: function(e) {
                            if (this.iframe) return void e();
                            var t = this;
                            this.iframe = document.createElement(
                                'iframe'), this.iframe.onload = function() {t.iframe.isLoaded = !0, e();}, this.iframe.src = 'https://10.8.225.209/linxj/webrtc/extension/getSourceId.html', this.iframe.style.display = 'none', (document.body ||
                                document.documentElement).appendChild(
                                this.iframe);
                        },
                    },
                    {
                        key: 'windowGetChromeExtensionStatus',
                        value: function(e) {
                            function t(i) {
                                i.data && (i.data.chromeExtensionStatus &&
                                e(i.data.chromeExtensionStatus), window.removeEventListener(
                                    'message', t));
                            }
                            
                            if (navigator.mozGetUserMedia) return void e(
                                'installed-enabled');
                            window.addEventListener('message',
                                t), window.setTimeout(
                                this.postGetChromeExtensionStatusMessage.bind(
                                    this), 100);
                        },
                    },
                    {
                        key: 'postGetChromeExtensionStatusMessage',
                        value: function() {
                            return this.iframe
                                ? this.iframe.isLoaded
                                    ? void this.iframe.contentWindow.postMessage(
                                        {getChromeExtensionStatus: !0}, '*')
                                    : void window.setTimeout(
                                        this.postGetChromeExtensionStatusMessage.bind(
                                            this), 100)
                                : void this.loadIFrame(
                                    this.postGetChromeExtensionStatusMessage.bind(
                                        this));
                        },
                    }]), e;
            }();
            t.default = n;
        }, function(e, t, i) {
            'use strict';
            
            function r(e) {return e && e.__esModule ? e : {default: e};}
            
            var s = i(2), n = i(5), o = r(n), a = i(31), u = r(a), l = i(32),
                c = r(l), h = i(33), d = r(h), f = i(36), v = r(f), p = i(35),
                g = r(p), m = i(34), y = r(m), _ = i(16), S = r(_), E = i(19),
                R = r(E), b = i(18), T = r(b), C = i(17), O = r(C), P = i(4),
                I = function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null !=
                        e) for (var i in e) Object.prototype.hasOwnProperty.call(
                        e, i) && (t[i] = e[i]);
                    return t.default = e, t;
                }(P), k = !1, w = I.Event;
            t.WSEvent = I, t.WSInit = function() {
                var e = void 0;
                return {
                    init: function(t, i) {
                        var r = this;
                        k = !1, e || (e = new d.default(function(e) {
                            k = !0, i && i(e), r.destroy();
                        }), e.start(t));
                    }, destroy: function() {e && (e.stop(), e = void 0);},
                };
            }(), t.WSAuth = function() {
                return {
                    fetch: function(e) {
                        c.default.fetch(e);
                    },
                    setUserAuthInfo: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        s.Globals.token = e.token ||
                            '', s.Globals.ticket = e.ticket || '';
                        var t = parseInt(e.permissionIndex);
                        isNaN(t) || -1 !== t && 0 !== t && 1 !== t ||
                        (s.Globals.permissionIndex = t);
                    },
                };
            }(), t.WSDestroy = function() {return {destroy: function() {e.exports.WSEmitter.removeToAll(), e.exports.WSInit.destroy(), e.exports.WSChannel.destroy(), e.exports.WSPlayer.destroy(), e.exports.WSStream.destroy(), e.exports.WSSignal.destroy();}};}(), t.WSSignal = function() {
                var e = void 0;
                return {
                    init: function() {k && (e || (e = new v.default));},
                    createChannel: function(t) {
                        if (e) return e.createChannel(t);
                    },
                    joinChannel: function(t) {
                        var i = arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : '',
                            r = arguments.length > 2 && void 0 !== arguments[2]
                                ? arguments[2]
                                : '',
                            s = arguments.length > 3 && void 0 !== arguments[3]
                                ? arguments[3]
                                : [],
                            n = arguments.length > 4 && void 0 !== arguments[4]
                                ? arguments[4]
                                : {};
                        e && e.joinChannel(t, i, r, s, n);
                    },
                    quitChannel: function(t) {e && e.quitChannel(t);},
                    sendUnicastMessage: function(t, i, r) {
                        e && e.sendUnicastMessage(t, i, r);
                    },
                    sendMulticastMessage: function(t, i, r) {
                        e && e.sendMulticastMessage(t, i, r);
                    },
                    sendBroadcastMessage: function(t, i) {
                        e && e.sendBroadcastMessage(t, i);
                    },
                    destroy: function() {e && (e.destroy(), e = void 0);},
                };
            }(), t.WSPlayer = function() {
                var e = void 0;
                return {
                    play: function(t) {
                        k && t && (e ||
                            (e = new S.default, e.listenTo(w.PLAYER_EVENT,
                                function(e) {
                                    s.Globals.observer &&
                                    s.Globals.observer.trigger(w.PLAYER_EVENT,
                                        e);
                                }), e.start(t)));
                    },
                    debug: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        e && e.debug(t);
                    },
                    debugSourceBuffer: function() {e && e.debugSourceBuffer();},
                    destroy: function() {
                        e && (e.removeToAll(), e.stop(), e = void 0);
                    },
                };
            }(), t.WSStream = function() {
                var e = void 0, t = void 0, i = void 0, r = void 0;
                return {
                    startPreview: function() {
                        var e = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        k && (r || (r = new O.default), r.start(e));
                    },
                    stopPreview: function() {r && (r.stop(), r = void 0);},
                    startPush: function(e) {
                        k && e && (t ||
                            (t = new R.default, t.listenTo(w.PUSH_STREAM_EVENT,
                                function(e) {
                                    s.Globals.observer &&
                                    s.Globals.observer.trigger(
                                        w.PUSH_STREAM_EVENT, e);
                                }), t.start(e)));
                    },
                    stopPush: function() {
                        t && (t.removeToAll(), t.stop(), t = void 0);
                    },
                    stopPushAudio: function() {t && t.stopAudio();},
                    stopPushVideo: function() {t && t.stopVideo();},
                    pushStatus: function() {
                        var e = !(arguments.length > 0 && void 0 !==
                            arguments[0]) || arguments[0];
                        t && t.getPeerStatus(e);
                    },
                    startPull: function(e) {
                        k && e && (i ||
                            (i = new T.default, i.listenTo(w.PULL_STREAM_EVENT,
                                function(e) {
                                    s.Globals.observer &&
                                    s.Globals.observer.trigger(
                                        w.PULL_STREAM_EVENT, e);
                                }), i.start(e)));
                    },
                    stopPull: function() {
                        i && (i.removeToAll(), i.stop(), i = void 0);
                    },
                    pullStatus: function() {
                        var e = !(arguments.length > 0 && void 0 !==
                            arguments[0]) || arguments[0];
                        i && i.getPeerStatus(e);
                    },
                    startMix: function(t) {
                        k && (e || (e = new y.default, e.listenTo(w.MIX_EVENT,
                            function(e) {
                                s.Globals.observer &&
                                s.Globals.observer.trigger(w.MIX_EVENT, e);
                            })), e.start(t));
                    },
                    stopMix: function() {
                        e && (e.removeToAll(), e.stop(), e = void 0);
                    },
                    mixCreate: function(t) {e && e.create(t);},
                    mixModify: function(t) {e && e.modify(t);},
                    mixStatus: function(t) {e && e.status(t);},
                    mixDestroy: function(t) {e && e.destroy(t);},
                    mixJoin: function(t) {e && e.join(t);},
                    mixQuit: function(t) {e && e.quit(t);},
                    destroy: function() {this.stopMix(), this.stopPreview(), this.stopPush(), this.stopPull();},
                };
            }(), t.WSChannel = function() {
                var e = void 0;
                return {
                    init: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        k && (e ||
                        (e = new g.default, e.listenTo(w.CHANNEL_EVENT,
                            function(e) {
                                s.Globals.observer &&
                                s.Globals.observer.trigger(w.CHANNEL_EVENT, e);
                            })), e.init(t));
                    },
                    startPreview: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        e && e.startPreview(t);
                    },
                    stopPreview: function() {e && e.stopPreview();},
                    sendMessage: function(t, i) {e && e.sendMessage(t, i);},
                    broadcastMessage: function(t) {e && e.sendMessage(t);},
                    changeRole: function(t) {e && e.changeRole(t);},
                    createChannel: function(t, i, r) {
                        e && e.createChannel(t, i, r);
                    },
                    destroyChannel: function() {e && e.destroyChannel();},
                    joinChannel: function(t, i, r) {
                        e && e.joinChannel(t, i, r);
                    },
                    quitChannel: function() {e && e.quitChannel();},
                    joinVChannel: function(t) {e && e.joinVChannel(t);},
                    quitVChannel: function(t) {e && e.quitVChannel(t);},
                    debug: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : {};
                        e && e.debug(t);
                    },
                    debugSourceBuffer: function() {e && e.debugSourceBuffer();},
                    stopPushAudio: function() {e && e.stopAudio();},
                    stopPushVideo: function() {e && e.stopVideo();},
                    destroy: function() {
                        e && (e.removeToAll(), e.stop(), e = void 0);
                    },
                };
            }(), t.WSEmitter = {
                trigger: function(e) {
                    if (s.Globals.observer) {
                        for (var t, i = arguments.length, r = Array(
                            i > 1 ? i - 1 : 0), n = 1; n < i; n++) r[n -
                        1] = arguments[n];
                        (t = s.Globals.observer).trigger.apply(t, [e].concat(r));
                    }
                },
                listenTo: function(e, t) {
                    s.Globals.observer && s.Globals.observer.listenTo(e, t);
                },
                removeTo: function(e, t) {
                    s.Globals.observer && s.Globals.observer.removeTo(e, t);
                },
                removeToAll: function() {
                    s.Globals.observer && s.Globals.observer.removeToAll();
                },
            }, t.WSUtil = {
                version: 'ILive_V2.2.1.20180601',
                trim: function(e) {return o.default.trim(e);},
                uuid: function() {return o.default.uuid();},
                getBlowserInfo: function() {return o.default.getBlowserInfo();},
                getBrowserUUID: function(e) {
                    return o.default.getBrowserUUID(e);
                },
                getMediaDevices: function(e) {o.default.getMediaDevices(e);},
                setVideoVolume: function(e) {
                    var t = arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : 100;
                    o.default.setVideoVolume(e, t);
                },
                setVideoDisplay: function(e, t) {
                    o.default.setVideoDisplay(e, t);
                },
            }, t.WSDebug = {
                parseSPS: function(e) {return u.default.parseSPS(e);},
                aspectDetect: function(e, t) {u.default.aspectDetect(e, t);},
                notify: function() {
                    var e = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                    u.default.notify(e);
                },
            };
        }]);
});